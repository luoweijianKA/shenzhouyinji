// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/management.proto

package shenzhouyinji

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ManagementService service

func NewManagementServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ManagementService service

type ManagementService interface {
	GetConfigs(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	UpdateConfigs(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error)
	CreateCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*MsKeyword, error)
	UpdateCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*MsUpdateRes, error)
	GetCategoryByID(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*Category, error)
	GetCategoryByName(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*Category, error)
	GetCategoryByParentID(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*CategoriesRes, error)
	GetTopCategory(ctx context.Context, in *MsEmptyReq, opts ...client.CallOption) (*CategoriesRes, error)
	CreateTideSpot(ctx context.Context, in *TideSpot, opts ...client.CallOption) (*MsKeyword, error)
	UpdateTideSpot(ctx context.Context, in *TideSpot, opts ...client.CallOption) (*MsUpdateRes, error)
	GetTideSpotList(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TideSpotRes, error)
	CreateTag(ctx context.Context, in *Tag, opts ...client.CallOption) (*MsKeyword, error)
	UpdateTag(ctx context.Context, in *Tag, opts ...client.CallOption) (*MsUpdateRes, error)
	GetTagByID(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*Tag, error)
	GetTagByCategoryID(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TagsRes, error)
	GetTurtleBackMenuList(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TurtleBackMenuRes, error)
	CreateTideSpotConfig(ctx context.Context, in *TideSpotConfig, opts ...client.CallOption) (*MsKeyword, error)
	UpdateTideSpotConfig(ctx context.Context, in *TideSpotConfig, opts ...client.CallOption) (*MsUpdateRes, error)
	GetTideSpotConfigList(ctx context.Context, in *TideSpotConfigRequest, opts ...client.CallOption) (*TideSpotConfigRes, error)
	GetTideSpotConfigById(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TideSpotConfig, error)
	CreateTideSpotGood(ctx context.Context, in *TideSpotGood, opts ...client.CallOption) (*MsKeyword, error)
	CreateCouponBuyGood(ctx context.Context, in *CouponBuyGood, opts ...client.CallOption) (*MsKeyword, error)
	CreateCoupon(ctx context.Context, in *Coupon, opts ...client.CallOption) (*MsKeyword, error)
	UpdateCoupon(ctx context.Context, in *Coupon, opts ...client.CallOption) (*MsUpdateRes, error)
	GetCouponList(ctx context.Context, in *CouponRequest, opts ...client.CallOption) (*CouponRes, error)
	GetCouponListByPage(ctx context.Context, in *CouponRequest, opts ...client.CallOption) (*CouponRes, error)
	GetCoupon(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*Coupon, error)
	GetTurtleBackConfigList(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TurtleBackConfigRes, error)
	UpdateTurtleBackConfig(ctx context.Context, in *TurtleBackConfig, opts ...client.CallOption) (*MsUpdateRes, error)
	GetTurtleBackConfig(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TurtleBackConfig, error)
	GetAreaInfoByParentID(ctx context.Context, in *AreaInfoRequest, opts ...client.CallOption) (*AreaInfosRes, error)
	CreateAuditing(ctx context.Context, in *Auditing, opts ...client.CallOption) (*AuditingResponse, error)
	GetAuditings(ctx context.Context, in *AuditingRequest, opts ...client.CallOption) (*AuditingResponse, error)
	RestoreSceneryspot(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error)
	RestoreEvent(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error)
	RestoreUser(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error)
	RestoreUserEvent(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error)
	RestoreTask(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error)
	RestoreBadge(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error)
	RestoreLike(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error)
	RestorePoints(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error)
	RestoreConversation(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error)
}

type managementService struct {
	c    client.Client
	name string
}

func NewManagementService(name string, c client.Client) ManagementService {
	return &managementService{
		c:    c,
		name: name,
	}
}

func (c *managementService) GetConfigs(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetConfigs", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) UpdateConfigs(ctx context.Context, in *ConfigRequest, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.UpdateConfigs", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) CreateCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*MsKeyword, error) {
	req := c.c.NewRequest(c.name, "ManagementService.CreateCategory", in)
	out := new(MsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) UpdateCategory(ctx context.Context, in *Category, opts ...client.CallOption) (*MsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.UpdateCategory", in)
	out := new(MsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetCategoryByID(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*Category, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetCategoryByID", in)
	out := new(Category)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetCategoryByName(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*Category, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetCategoryByName", in)
	out := new(Category)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetCategoryByParentID(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*CategoriesRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetCategoryByParentID", in)
	out := new(CategoriesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetTopCategory(ctx context.Context, in *MsEmptyReq, opts ...client.CallOption) (*CategoriesRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetTopCategory", in)
	out := new(CategoriesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) CreateTideSpot(ctx context.Context, in *TideSpot, opts ...client.CallOption) (*MsKeyword, error) {
	req := c.c.NewRequest(c.name, "ManagementService.CreateTideSpot", in)
	out := new(MsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) UpdateTideSpot(ctx context.Context, in *TideSpot, opts ...client.CallOption) (*MsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.UpdateTideSpot", in)
	out := new(MsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetTideSpotList(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TideSpotRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetTideSpotList", in)
	out := new(TideSpotRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) CreateTag(ctx context.Context, in *Tag, opts ...client.CallOption) (*MsKeyword, error) {
	req := c.c.NewRequest(c.name, "ManagementService.CreateTag", in)
	out := new(MsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) UpdateTag(ctx context.Context, in *Tag, opts ...client.CallOption) (*MsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.UpdateTag", in)
	out := new(MsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetTagByID(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*Tag, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetTagByID", in)
	out := new(Tag)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetTagByCategoryID(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TagsRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetTagByCategoryID", in)
	out := new(TagsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetTurtleBackMenuList(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TurtleBackMenuRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetTurtleBackMenuList", in)
	out := new(TurtleBackMenuRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) CreateTideSpotConfig(ctx context.Context, in *TideSpotConfig, opts ...client.CallOption) (*MsKeyword, error) {
	req := c.c.NewRequest(c.name, "ManagementService.CreateTideSpotConfig", in)
	out := new(MsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) UpdateTideSpotConfig(ctx context.Context, in *TideSpotConfig, opts ...client.CallOption) (*MsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.UpdateTideSpotConfig", in)
	out := new(MsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetTideSpotConfigList(ctx context.Context, in *TideSpotConfigRequest, opts ...client.CallOption) (*TideSpotConfigRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetTideSpotConfigList", in)
	out := new(TideSpotConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetTideSpotConfigById(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TideSpotConfig, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetTideSpotConfigById", in)
	out := new(TideSpotConfig)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) CreateTideSpotGood(ctx context.Context, in *TideSpotGood, opts ...client.CallOption) (*MsKeyword, error) {
	req := c.c.NewRequest(c.name, "ManagementService.CreateTideSpotGood", in)
	out := new(MsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) CreateCouponBuyGood(ctx context.Context, in *CouponBuyGood, opts ...client.CallOption) (*MsKeyword, error) {
	req := c.c.NewRequest(c.name, "ManagementService.CreateCouponBuyGood", in)
	out := new(MsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) CreateCoupon(ctx context.Context, in *Coupon, opts ...client.CallOption) (*MsKeyword, error) {
	req := c.c.NewRequest(c.name, "ManagementService.CreateCoupon", in)
	out := new(MsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) UpdateCoupon(ctx context.Context, in *Coupon, opts ...client.CallOption) (*MsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.UpdateCoupon", in)
	out := new(MsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetCouponList(ctx context.Context, in *CouponRequest, opts ...client.CallOption) (*CouponRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetCouponList", in)
	out := new(CouponRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetCouponListByPage(ctx context.Context, in *CouponRequest, opts ...client.CallOption) (*CouponRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetCouponListByPage", in)
	out := new(CouponRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetCoupon(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*Coupon, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetCoupon", in)
	out := new(Coupon)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetTurtleBackConfigList(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TurtleBackConfigRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetTurtleBackConfigList", in)
	out := new(TurtleBackConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) UpdateTurtleBackConfig(ctx context.Context, in *TurtleBackConfig, opts ...client.CallOption) (*MsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.UpdateTurtleBackConfig", in)
	out := new(MsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetTurtleBackConfig(ctx context.Context, in *MsKeyword, opts ...client.CallOption) (*TurtleBackConfig, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetTurtleBackConfig", in)
	out := new(TurtleBackConfig)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetAreaInfoByParentID(ctx context.Context, in *AreaInfoRequest, opts ...client.CallOption) (*AreaInfosRes, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetAreaInfoByParentID", in)
	out := new(AreaInfosRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) CreateAuditing(ctx context.Context, in *Auditing, opts ...client.CallOption) (*AuditingResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.CreateAuditing", in)
	out := new(AuditingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) GetAuditings(ctx context.Context, in *AuditingRequest, opts ...client.CallOption) (*AuditingResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.GetAuditings", in)
	out := new(AuditingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) RestoreSceneryspot(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.RestoreSceneryspot", in)
	out := new(RestoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) RestoreEvent(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.RestoreEvent", in)
	out := new(RestoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) RestoreUser(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.RestoreUser", in)
	out := new(RestoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) RestoreUserEvent(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.RestoreUserEvent", in)
	out := new(RestoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) RestoreTask(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.RestoreTask", in)
	out := new(RestoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) RestoreBadge(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.RestoreBadge", in)
	out := new(RestoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) RestoreLike(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.RestoreLike", in)
	out := new(RestoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) RestorePoints(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.RestorePoints", in)
	out := new(RestoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementService) RestoreConversation(ctx context.Context, in *RestoreRequest, opts ...client.CallOption) (*RestoreResponse, error) {
	req := c.c.NewRequest(c.name, "ManagementService.RestoreConversation", in)
	out := new(RestoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ManagementService service

type ManagementServiceHandler interface {
	GetConfigs(context.Context, *ConfigRequest, *ConfigResponse) error
	UpdateConfigs(context.Context, *ConfigRequest, *ConfigResponse) error
	CreateCategory(context.Context, *Category, *MsKeyword) error
	UpdateCategory(context.Context, *Category, *MsUpdateRes) error
	GetCategoryByID(context.Context, *MsKeyword, *Category) error
	GetCategoryByName(context.Context, *MsKeyword, *Category) error
	GetCategoryByParentID(context.Context, *MsKeyword, *CategoriesRes) error
	GetTopCategory(context.Context, *MsEmptyReq, *CategoriesRes) error
	CreateTideSpot(context.Context, *TideSpot, *MsKeyword) error
	UpdateTideSpot(context.Context, *TideSpot, *MsUpdateRes) error
	GetTideSpotList(context.Context, *MsKeyword, *TideSpotRes) error
	CreateTag(context.Context, *Tag, *MsKeyword) error
	UpdateTag(context.Context, *Tag, *MsUpdateRes) error
	GetTagByID(context.Context, *MsKeyword, *Tag) error
	GetTagByCategoryID(context.Context, *MsKeyword, *TagsRes) error
	GetTurtleBackMenuList(context.Context, *MsKeyword, *TurtleBackMenuRes) error
	CreateTideSpotConfig(context.Context, *TideSpotConfig, *MsKeyword) error
	UpdateTideSpotConfig(context.Context, *TideSpotConfig, *MsUpdateRes) error
	GetTideSpotConfigList(context.Context, *TideSpotConfigRequest, *TideSpotConfigRes) error
	GetTideSpotConfigById(context.Context, *MsKeyword, *TideSpotConfig) error
	CreateTideSpotGood(context.Context, *TideSpotGood, *MsKeyword) error
	CreateCouponBuyGood(context.Context, *CouponBuyGood, *MsKeyword) error
	CreateCoupon(context.Context, *Coupon, *MsKeyword) error
	UpdateCoupon(context.Context, *Coupon, *MsUpdateRes) error
	GetCouponList(context.Context, *CouponRequest, *CouponRes) error
	GetCouponListByPage(context.Context, *CouponRequest, *CouponRes) error
	GetCoupon(context.Context, *MsKeyword, *Coupon) error
	GetTurtleBackConfigList(context.Context, *MsKeyword, *TurtleBackConfigRes) error
	UpdateTurtleBackConfig(context.Context, *TurtleBackConfig, *MsUpdateRes) error
	GetTurtleBackConfig(context.Context, *MsKeyword, *TurtleBackConfig) error
	GetAreaInfoByParentID(context.Context, *AreaInfoRequest, *AreaInfosRes) error
	CreateAuditing(context.Context, *Auditing, *AuditingResponse) error
	GetAuditings(context.Context, *AuditingRequest, *AuditingResponse) error
	RestoreSceneryspot(context.Context, *RestoreRequest, *RestoreResponse) error
	RestoreEvent(context.Context, *RestoreRequest, *RestoreResponse) error
	RestoreUser(context.Context, *RestoreRequest, *RestoreResponse) error
	RestoreUserEvent(context.Context, *RestoreRequest, *RestoreResponse) error
	RestoreTask(context.Context, *RestoreRequest, *RestoreResponse) error
	RestoreBadge(context.Context, *RestoreRequest, *RestoreResponse) error
	RestoreLike(context.Context, *RestoreRequest, *RestoreResponse) error
	RestorePoints(context.Context, *RestoreRequest, *RestoreResponse) error
	RestoreConversation(context.Context, *RestoreRequest, *RestoreResponse) error
}

func RegisterManagementServiceHandler(s server.Server, hdlr ManagementServiceHandler, opts ...server.HandlerOption) error {
	type managementService interface {
		GetConfigs(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		UpdateConfigs(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error
		CreateCategory(ctx context.Context, in *Category, out *MsKeyword) error
		UpdateCategory(ctx context.Context, in *Category, out *MsUpdateRes) error
		GetCategoryByID(ctx context.Context, in *MsKeyword, out *Category) error
		GetCategoryByName(ctx context.Context, in *MsKeyword, out *Category) error
		GetCategoryByParentID(ctx context.Context, in *MsKeyword, out *CategoriesRes) error
		GetTopCategory(ctx context.Context, in *MsEmptyReq, out *CategoriesRes) error
		CreateTideSpot(ctx context.Context, in *TideSpot, out *MsKeyword) error
		UpdateTideSpot(ctx context.Context, in *TideSpot, out *MsUpdateRes) error
		GetTideSpotList(ctx context.Context, in *MsKeyword, out *TideSpotRes) error
		CreateTag(ctx context.Context, in *Tag, out *MsKeyword) error
		UpdateTag(ctx context.Context, in *Tag, out *MsUpdateRes) error
		GetTagByID(ctx context.Context, in *MsKeyword, out *Tag) error
		GetTagByCategoryID(ctx context.Context, in *MsKeyword, out *TagsRes) error
		GetTurtleBackMenuList(ctx context.Context, in *MsKeyword, out *TurtleBackMenuRes) error
		CreateTideSpotConfig(ctx context.Context, in *TideSpotConfig, out *MsKeyword) error
		UpdateTideSpotConfig(ctx context.Context, in *TideSpotConfig, out *MsUpdateRes) error
		GetTideSpotConfigList(ctx context.Context, in *TideSpotConfigRequest, out *TideSpotConfigRes) error
		GetTideSpotConfigById(ctx context.Context, in *MsKeyword, out *TideSpotConfig) error
		CreateTideSpotGood(ctx context.Context, in *TideSpotGood, out *MsKeyword) error
		CreateCouponBuyGood(ctx context.Context, in *CouponBuyGood, out *MsKeyword) error
		CreateCoupon(ctx context.Context, in *Coupon, out *MsKeyword) error
		UpdateCoupon(ctx context.Context, in *Coupon, out *MsUpdateRes) error
		GetCouponList(ctx context.Context, in *CouponRequest, out *CouponRes) error
		GetCouponListByPage(ctx context.Context, in *CouponRequest, out *CouponRes) error
		GetCoupon(ctx context.Context, in *MsKeyword, out *Coupon) error
		GetTurtleBackConfigList(ctx context.Context, in *MsKeyword, out *TurtleBackConfigRes) error
		UpdateTurtleBackConfig(ctx context.Context, in *TurtleBackConfig, out *MsUpdateRes) error
		GetTurtleBackConfig(ctx context.Context, in *MsKeyword, out *TurtleBackConfig) error
		GetAreaInfoByParentID(ctx context.Context, in *AreaInfoRequest, out *AreaInfosRes) error
		CreateAuditing(ctx context.Context, in *Auditing, out *AuditingResponse) error
		GetAuditings(ctx context.Context, in *AuditingRequest, out *AuditingResponse) error
		RestoreSceneryspot(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error
		RestoreEvent(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error
		RestoreUser(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error
		RestoreUserEvent(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error
		RestoreTask(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error
		RestoreBadge(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error
		RestoreLike(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error
		RestorePoints(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error
		RestoreConversation(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error
	}
	type ManagementService struct {
		managementService
	}
	h := &managementServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ManagementService{h}, opts...))
}

type managementServiceHandler struct {
	ManagementServiceHandler
}

func (h *managementServiceHandler) GetConfigs(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ManagementServiceHandler.GetConfigs(ctx, in, out)
}

func (h *managementServiceHandler) UpdateConfigs(ctx context.Context, in *ConfigRequest, out *ConfigResponse) error {
	return h.ManagementServiceHandler.UpdateConfigs(ctx, in, out)
}

func (h *managementServiceHandler) CreateCategory(ctx context.Context, in *Category, out *MsKeyword) error {
	return h.ManagementServiceHandler.CreateCategory(ctx, in, out)
}

func (h *managementServiceHandler) UpdateCategory(ctx context.Context, in *Category, out *MsUpdateRes) error {
	return h.ManagementServiceHandler.UpdateCategory(ctx, in, out)
}

func (h *managementServiceHandler) GetCategoryByID(ctx context.Context, in *MsKeyword, out *Category) error {
	return h.ManagementServiceHandler.GetCategoryByID(ctx, in, out)
}

func (h *managementServiceHandler) GetCategoryByName(ctx context.Context, in *MsKeyword, out *Category) error {
	return h.ManagementServiceHandler.GetCategoryByName(ctx, in, out)
}

func (h *managementServiceHandler) GetCategoryByParentID(ctx context.Context, in *MsKeyword, out *CategoriesRes) error {
	return h.ManagementServiceHandler.GetCategoryByParentID(ctx, in, out)
}

func (h *managementServiceHandler) GetTopCategory(ctx context.Context, in *MsEmptyReq, out *CategoriesRes) error {
	return h.ManagementServiceHandler.GetTopCategory(ctx, in, out)
}

func (h *managementServiceHandler) CreateTideSpot(ctx context.Context, in *TideSpot, out *MsKeyword) error {
	return h.ManagementServiceHandler.CreateTideSpot(ctx, in, out)
}

func (h *managementServiceHandler) UpdateTideSpot(ctx context.Context, in *TideSpot, out *MsUpdateRes) error {
	return h.ManagementServiceHandler.UpdateTideSpot(ctx, in, out)
}

func (h *managementServiceHandler) GetTideSpotList(ctx context.Context, in *MsKeyword, out *TideSpotRes) error {
	return h.ManagementServiceHandler.GetTideSpotList(ctx, in, out)
}

func (h *managementServiceHandler) CreateTag(ctx context.Context, in *Tag, out *MsKeyword) error {
	return h.ManagementServiceHandler.CreateTag(ctx, in, out)
}

func (h *managementServiceHandler) UpdateTag(ctx context.Context, in *Tag, out *MsUpdateRes) error {
	return h.ManagementServiceHandler.UpdateTag(ctx, in, out)
}

func (h *managementServiceHandler) GetTagByID(ctx context.Context, in *MsKeyword, out *Tag) error {
	return h.ManagementServiceHandler.GetTagByID(ctx, in, out)
}

func (h *managementServiceHandler) GetTagByCategoryID(ctx context.Context, in *MsKeyword, out *TagsRes) error {
	return h.ManagementServiceHandler.GetTagByCategoryID(ctx, in, out)
}

func (h *managementServiceHandler) GetTurtleBackMenuList(ctx context.Context, in *MsKeyword, out *TurtleBackMenuRes) error {
	return h.ManagementServiceHandler.GetTurtleBackMenuList(ctx, in, out)
}

func (h *managementServiceHandler) CreateTideSpotConfig(ctx context.Context, in *TideSpotConfig, out *MsKeyword) error {
	return h.ManagementServiceHandler.CreateTideSpotConfig(ctx, in, out)
}

func (h *managementServiceHandler) UpdateTideSpotConfig(ctx context.Context, in *TideSpotConfig, out *MsUpdateRes) error {
	return h.ManagementServiceHandler.UpdateTideSpotConfig(ctx, in, out)
}

func (h *managementServiceHandler) GetTideSpotConfigList(ctx context.Context, in *TideSpotConfigRequest, out *TideSpotConfigRes) error {
	return h.ManagementServiceHandler.GetTideSpotConfigList(ctx, in, out)
}

func (h *managementServiceHandler) GetTideSpotConfigById(ctx context.Context, in *MsKeyword, out *TideSpotConfig) error {
	return h.ManagementServiceHandler.GetTideSpotConfigById(ctx, in, out)
}

func (h *managementServiceHandler) CreateTideSpotGood(ctx context.Context, in *TideSpotGood, out *MsKeyword) error {
	return h.ManagementServiceHandler.CreateTideSpotGood(ctx, in, out)
}

func (h *managementServiceHandler) CreateCouponBuyGood(ctx context.Context, in *CouponBuyGood, out *MsKeyword) error {
	return h.ManagementServiceHandler.CreateCouponBuyGood(ctx, in, out)
}

func (h *managementServiceHandler) CreateCoupon(ctx context.Context, in *Coupon, out *MsKeyword) error {
	return h.ManagementServiceHandler.CreateCoupon(ctx, in, out)
}

func (h *managementServiceHandler) UpdateCoupon(ctx context.Context, in *Coupon, out *MsUpdateRes) error {
	return h.ManagementServiceHandler.UpdateCoupon(ctx, in, out)
}

func (h *managementServiceHandler) GetCouponList(ctx context.Context, in *CouponRequest, out *CouponRes) error {
	return h.ManagementServiceHandler.GetCouponList(ctx, in, out)
}

func (h *managementServiceHandler) GetCouponListByPage(ctx context.Context, in *CouponRequest, out *CouponRes) error {
	return h.ManagementServiceHandler.GetCouponListByPage(ctx, in, out)
}

func (h *managementServiceHandler) GetCoupon(ctx context.Context, in *MsKeyword, out *Coupon) error {
	return h.ManagementServiceHandler.GetCoupon(ctx, in, out)
}

func (h *managementServiceHandler) GetTurtleBackConfigList(ctx context.Context, in *MsKeyword, out *TurtleBackConfigRes) error {
	return h.ManagementServiceHandler.GetTurtleBackConfigList(ctx, in, out)
}

func (h *managementServiceHandler) UpdateTurtleBackConfig(ctx context.Context, in *TurtleBackConfig, out *MsUpdateRes) error {
	return h.ManagementServiceHandler.UpdateTurtleBackConfig(ctx, in, out)
}

func (h *managementServiceHandler) GetTurtleBackConfig(ctx context.Context, in *MsKeyword, out *TurtleBackConfig) error {
	return h.ManagementServiceHandler.GetTurtleBackConfig(ctx, in, out)
}

func (h *managementServiceHandler) GetAreaInfoByParentID(ctx context.Context, in *AreaInfoRequest, out *AreaInfosRes) error {
	return h.ManagementServiceHandler.GetAreaInfoByParentID(ctx, in, out)
}

func (h *managementServiceHandler) CreateAuditing(ctx context.Context, in *Auditing, out *AuditingResponse) error {
	return h.ManagementServiceHandler.CreateAuditing(ctx, in, out)
}

func (h *managementServiceHandler) GetAuditings(ctx context.Context, in *AuditingRequest, out *AuditingResponse) error {
	return h.ManagementServiceHandler.GetAuditings(ctx, in, out)
}

func (h *managementServiceHandler) RestoreSceneryspot(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error {
	return h.ManagementServiceHandler.RestoreSceneryspot(ctx, in, out)
}

func (h *managementServiceHandler) RestoreEvent(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error {
	return h.ManagementServiceHandler.RestoreEvent(ctx, in, out)
}

func (h *managementServiceHandler) RestoreUser(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error {
	return h.ManagementServiceHandler.RestoreUser(ctx, in, out)
}

func (h *managementServiceHandler) RestoreUserEvent(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error {
	return h.ManagementServiceHandler.RestoreUserEvent(ctx, in, out)
}

func (h *managementServiceHandler) RestoreTask(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error {
	return h.ManagementServiceHandler.RestoreTask(ctx, in, out)
}

func (h *managementServiceHandler) RestoreBadge(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error {
	return h.ManagementServiceHandler.RestoreBadge(ctx, in, out)
}

func (h *managementServiceHandler) RestoreLike(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error {
	return h.ManagementServiceHandler.RestoreLike(ctx, in, out)
}

func (h *managementServiceHandler) RestorePoints(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error {
	return h.ManagementServiceHandler.RestorePoints(ctx, in, out)
}

func (h *managementServiceHandler) RestoreConversation(ctx context.Context, in *RestoreRequest, out *RestoreResponse) error {
	return h.ManagementServiceHandler.RestoreConversation(ctx, in, out)
}
