// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.11
// source: proto/management.proto

package shenzhouyinji

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentId    string `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	HasSubclass bool   `protobuf:"varint,4,opt,name=has_subclass,json=hasSubclass,proto3" json:"has_subclass,omitempty"`
	Status      int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Sort        int32  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{0}
}

func (x *Category) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *Category) GetHasSubclass() bool {
	if x != nil {
		return x.HasSubclass
	}
	return false
}

func (x *Category) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Category) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CategoryId string `protobuf:"bytes,3,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Status     int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{1}
}

func (x *Tag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *Tag) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TideSpotConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	TideSpotId string `protobuf:"bytes,2,opt,name=tideSpotId,proto3" json:"tideSpotId,omitempty"`
	Id         string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Enable     bool   `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *TideSpotConfigRequest) Reset() {
	*x = TideSpotConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TideSpotConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TideSpotConfigRequest) ProtoMessage() {}

func (x *TideSpotConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TideSpotConfigRequest.ProtoReflect.Descriptor instead.
func (*TideSpotConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{2}
}

func (x *TideSpotConfigRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TideSpotConfigRequest) GetTideSpotId() string {
	if x != nil {
		return x.TideSpotId
	}
	return ""
}

func (x *TideSpotConfigRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TideSpotConfigRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type AreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentId string `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Status   int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AreaInfo) Reset() {
	*x = AreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfo) ProtoMessage() {}

func (x *AreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfo.ProtoReflect.Descriptor instead.
func (*AreaInfo) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{3}
}

func (x *AreaInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AreaInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AreaInfo) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *AreaInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AreaInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TideSpot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PositionTolerance string `protobuf:"bytes,3,opt,name=position_tolerance,json=positionTolerance,proto3" json:"position_tolerance,omitempty"`
	ElectricFence     string `protobuf:"bytes,4,opt,name=electric_fence,json=electricFence,proto3" json:"electric_fence,omitempty"`
	CreateTime        int32  `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime        int32  `protobuf:"varint,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Status            int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TideSpot) Reset() {
	*x = TideSpot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TideSpot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TideSpot) ProtoMessage() {}

func (x *TideSpot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TideSpot.ProtoReflect.Descriptor instead.
func (*TideSpot) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{4}
}

func (x *TideSpot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TideSpot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TideSpot) GetPositionTolerance() string {
	if x != nil {
		return x.PositionTolerance
	}
	return ""
}

func (x *TideSpot) GetElectricFence() string {
	if x != nil {
		return x.ElectricFence
	}
	return ""
}

func (x *TideSpot) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *TideSpot) GetUpdateTime() int32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *TideSpot) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TideSpotRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TideSpot `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TideSpotRes) Reset() {
	*x = TideSpotRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TideSpotRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TideSpotRes) ProtoMessage() {}

func (x *TideSpotRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TideSpotRes.ProtoReflect.Descriptor instead.
func (*TideSpotRes) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{5}
}

func (x *TideSpotRes) GetData() []*TideSpot {
	if x != nil {
		return x.Data
	}
	return nil
}

type CouponRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	StateCode              string `protobuf:"bytes,2,opt,name=stateCode,proto3" json:"stateCode,omitempty"`
	TideSpotName           string `protobuf:"bytes,3,opt,name=tide_spot_name,json=tideSpotName,proto3" json:"tide_spot_name,omitempty"`
	GenerateRule           string `protobuf:"bytes,4,opt,name=generate_rule,json=generateRule,proto3" json:"generate_rule,omitempty"`
	BuyGoodName            string `protobuf:"bytes,5,opt,name=buy_good_name,json=buyGoodName,proto3" json:"buy_good_name,omitempty"`
	VerificationWechatName string `protobuf:"bytes,6,opt,name=verification_wechat_name,json=verificationWechatName,proto3" json:"verification_wechat_name,omitempty"`
	UserWechatName         string `protobuf:"bytes,7,opt,name=user_wechat_name,json=userWechatName,proto3" json:"user_wechat_name,omitempty"`
	UserPhone              string `protobuf:"bytes,8,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`
	UseTimeStart           int32  `protobuf:"varint,9,opt,name=use_time_start,json=useTimeStart,proto3" json:"use_time_start,omitempty"`
	UseTimeEnd             int32  `protobuf:"varint,10,opt,name=use_time_end,json=useTimeEnd,proto3" json:"use_time_end,omitempty"`
	UserWechat             string `protobuf:"bytes,11,opt,name=user_wechat,json=userWechat,proto3" json:"user_wechat,omitempty"`
	BackSearch             bool   `protobuf:"varint,12,opt,name=back_search,json=backSearch,proto3" json:"back_search,omitempty"`
	TideSpotId             string `protobuf:"bytes,13,opt,name=tide_spot_id,json=tideSpotId,proto3" json:"tide_spot_id,omitempty"`
	TideSpotConfigId       string `protobuf:"bytes,14,opt,name=tide_spot_config_id,json=tideSpotConfigId,proto3" json:"tide_spot_config_id,omitempty"`
	PageIndex              int32  `protobuf:"varint,15,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
	PageSize               int32  `protobuf:"varint,16,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	IsNew                  bool   `protobuf:"varint,17,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
}

func (x *CouponRequest) Reset() {
	*x = CouponRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponRequest) ProtoMessage() {}

func (x *CouponRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponRequest.ProtoReflect.Descriptor instead.
func (*CouponRequest) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{6}
}

func (x *CouponRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CouponRequest) GetStateCode() string {
	if x != nil {
		return x.StateCode
	}
	return ""
}

func (x *CouponRequest) GetTideSpotName() string {
	if x != nil {
		return x.TideSpotName
	}
	return ""
}

func (x *CouponRequest) GetGenerateRule() string {
	if x != nil {
		return x.GenerateRule
	}
	return ""
}

func (x *CouponRequest) GetBuyGoodName() string {
	if x != nil {
		return x.BuyGoodName
	}
	return ""
}

func (x *CouponRequest) GetVerificationWechatName() string {
	if x != nil {
		return x.VerificationWechatName
	}
	return ""
}

func (x *CouponRequest) GetUserWechatName() string {
	if x != nil {
		return x.UserWechatName
	}
	return ""
}

func (x *CouponRequest) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *CouponRequest) GetUseTimeStart() int32 {
	if x != nil {
		return x.UseTimeStart
	}
	return 0
}

func (x *CouponRequest) GetUseTimeEnd() int32 {
	if x != nil {
		return x.UseTimeEnd
	}
	return 0
}

func (x *CouponRequest) GetUserWechat() string {
	if x != nil {
		return x.UserWechat
	}
	return ""
}

func (x *CouponRequest) GetBackSearch() bool {
	if x != nil {
		return x.BackSearch
	}
	return false
}

func (x *CouponRequest) GetTideSpotId() string {
	if x != nil {
		return x.TideSpotId
	}
	return ""
}

func (x *CouponRequest) GetTideSpotConfigId() string {
	if x != nil {
		return x.TideSpotConfigId
	}
	return ""
}

func (x *CouponRequest) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *CouponRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CouponRequest) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

type CouponRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*Coupon `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *CouponRes) Reset() {
	*x = CouponRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponRes) ProtoMessage() {}

func (x *CouponRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponRes.ProtoReflect.Descriptor instead.
func (*CouponRes) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{7}
}

func (x *CouponRes) GetData() []*Coupon {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CouponRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CouponIsNewRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNew bool `protobuf:"varint,1,opt,name=isNew,proto3" json:"isNew,omitempty"`
}

func (x *CouponIsNewRes) Reset() {
	*x = CouponIsNewRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponIsNewRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponIsNewRes) ProtoMessage() {}

func (x *CouponIsNewRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponIsNewRes.ProtoReflect.Descriptor instead.
func (*CouponIsNewRes) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{8}
}

func (x *CouponIsNewRes) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

type Coupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	TideSpotConfigId       string `protobuf:"bytes,3,opt,name=tide_spot_config_id,json=tideSpotConfigId,proto3" json:"tide_spot_config_id,omitempty"`
	TideSpotId             string `protobuf:"bytes,4,opt,name=tide_spot_id,json=tideSpotId,proto3" json:"tide_spot_id,omitempty"`
	TideSpotName           string `protobuf:"bytes,5,opt,name=tide_spot_name,json=tideSpotName,proto3" json:"tide_spot_name,omitempty"`
	CouponName             string `protobuf:"bytes,6,opt,name=coupon_name,json=couponName,proto3" json:"coupon_name,omitempty"`
	GenerateWord           string `protobuf:"bytes,7,opt,name=generate_word,json=generateWord,proto3" json:"generate_word,omitempty"`
	GenerateImgPath        string `protobuf:"bytes,8,opt,name=generate_img_path,json=generateImgPath,proto3" json:"generate_img_path,omitempty"`
	CreateTime             int32  `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UserWechat             string `protobuf:"bytes,10,opt,name=user_wechat,json=userWechat,proto3" json:"user_wechat,omitempty"`
	UserWechatName         string `protobuf:"bytes,11,opt,name=user_wechat_name,json=userWechatName,proto3" json:"user_wechat_name,omitempty"`
	SubmitWord             string `protobuf:"bytes,12,opt,name=submit_word,json=submitWord,proto3" json:"submit_word,omitempty"`
	SubmitImgPath          string `protobuf:"bytes,13,opt,name=submit_img_path,json=submitImgPath,proto3" json:"submit_img_path,omitempty"`
	EffectiveTime          int32  `protobuf:"varint,14,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	Desc                   string `protobuf:"bytes,15,opt,name=desc,proto3" json:"desc,omitempty"`
	Use                    bool   `protobuf:"varint,16,opt,name=use,proto3" json:"use,omitempty"`
	QrCodePath             string `protobuf:"bytes,17,opt,name=qr_code_path,json=qrCodePath,proto3" json:"qr_code_path,omitempty"`
	MinimumAmount          int32  `protobuf:"varint,18,opt,name=minimum_amount,json=minimumAmount,proto3" json:"minimum_amount,omitempty"`
	DeductionAmount        int32  `protobuf:"varint,19,opt,name=deduction_amount,json=deductionAmount,proto3" json:"deduction_amount,omitempty"`
	BuyGoodName            string `protobuf:"bytes,20,opt,name=buy_good_name,json=buyGoodName,proto3" json:"buy_good_name,omitempty"`
	VerificationWechat     string `protobuf:"bytes,21,opt,name=verification_wechat,json=verificationWechat,proto3" json:"verification_wechat,omitempty"`
	VerificationWechatName string `protobuf:"bytes,22,opt,name=verification_wechat_name,json=verificationWechatName,proto3" json:"verification_wechat_name,omitempty"`
	UseTime                int32  `protobuf:"varint,23,opt,name=use_time,json=useTime,proto3" json:"use_time,omitempty"`
	UserPhone              string `protobuf:"bytes,24,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`
	SubmitLogoImgPath      string `protobuf:"bytes,25,opt,name=submit_logo_img_path,json=submitLogoImgPath,proto3" json:"submit_logo_img_path,omitempty"`
	Read                   bool   `protobuf:"varint,26,opt,name=read,proto3" json:"read,omitempty"`
}

func (x *Coupon) Reset() {
	*x = Coupon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coupon) ProtoMessage() {}

func (x *Coupon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coupon.ProtoReflect.Descriptor instead.
func (*Coupon) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{9}
}

func (x *Coupon) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Coupon) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Coupon) GetTideSpotConfigId() string {
	if x != nil {
		return x.TideSpotConfigId
	}
	return ""
}

func (x *Coupon) GetTideSpotId() string {
	if x != nil {
		return x.TideSpotId
	}
	return ""
}

func (x *Coupon) GetTideSpotName() string {
	if x != nil {
		return x.TideSpotName
	}
	return ""
}

func (x *Coupon) GetCouponName() string {
	if x != nil {
		return x.CouponName
	}
	return ""
}

func (x *Coupon) GetGenerateWord() string {
	if x != nil {
		return x.GenerateWord
	}
	return ""
}

func (x *Coupon) GetGenerateImgPath() string {
	if x != nil {
		return x.GenerateImgPath
	}
	return ""
}

func (x *Coupon) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Coupon) GetUserWechat() string {
	if x != nil {
		return x.UserWechat
	}
	return ""
}

func (x *Coupon) GetUserWechatName() string {
	if x != nil {
		return x.UserWechatName
	}
	return ""
}

func (x *Coupon) GetSubmitWord() string {
	if x != nil {
		return x.SubmitWord
	}
	return ""
}

func (x *Coupon) GetSubmitImgPath() string {
	if x != nil {
		return x.SubmitImgPath
	}
	return ""
}

func (x *Coupon) GetEffectiveTime() int32 {
	if x != nil {
		return x.EffectiveTime
	}
	return 0
}

func (x *Coupon) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Coupon) GetUse() bool {
	if x != nil {
		return x.Use
	}
	return false
}

func (x *Coupon) GetQrCodePath() string {
	if x != nil {
		return x.QrCodePath
	}
	return ""
}

func (x *Coupon) GetMinimumAmount() int32 {
	if x != nil {
		return x.MinimumAmount
	}
	return 0
}

func (x *Coupon) GetDeductionAmount() int32 {
	if x != nil {
		return x.DeductionAmount
	}
	return 0
}

func (x *Coupon) GetBuyGoodName() string {
	if x != nil {
		return x.BuyGoodName
	}
	return ""
}

func (x *Coupon) GetVerificationWechat() string {
	if x != nil {
		return x.VerificationWechat
	}
	return ""
}

func (x *Coupon) GetVerificationWechatName() string {
	if x != nil {
		return x.VerificationWechatName
	}
	return ""
}

func (x *Coupon) GetUseTime() int32 {
	if x != nil {
		return x.UseTime
	}
	return 0
}

func (x *Coupon) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *Coupon) GetSubmitLogoImgPath() string {
	if x != nil {
		return x.SubmitLogoImgPath
	}
	return ""
}

func (x *Coupon) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

type TideSpotConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TideSpotId           string `protobuf:"bytes,2,opt,name=tide_spot_id,json=tideSpotId,proto3" json:"tide_spot_id,omitempty"`
	TideSpotName         string `protobuf:"bytes,3,opt,name=tide_spot_name,json=tideSpotName,proto3" json:"tide_spot_name,omitempty"`
	CouponName           string `protobuf:"bytes,4,opt,name=coupon_name,json=couponName,proto3" json:"coupon_name,omitempty"`
	CompareWord          string `protobuf:"bytes,5,opt,name=compare_word,json=compareWord,proto3" json:"compare_word,omitempty"`
	CouponImgPath        string `protobuf:"bytes,6,opt,name=coupon_img_path,json=couponImgPath,proto3" json:"coupon_img_path,omitempty"`
	CompareLogoPath      string `protobuf:"bytes,7,opt,name=compare_logo_path,json=compareLogoPath,proto3" json:"compare_logo_path,omitempty"`
	CompareLogoId        string `protobuf:"bytes,8,opt,name=compare_logo_id,json=compareLogoId,proto3" json:"compare_logo_id,omitempty"`
	Desc                 string `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
	EffectiveTime        int32  `protobuf:"varint,10,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	CouponContent        string `protobuf:"bytes,11,opt,name=coupon_content,json=couponContent,proto3" json:"coupon_content,omitempty"`
	GenerateNum          int32  `protobuf:"varint,12,opt,name=generate_num,json=generateNum,proto3" json:"generate_num,omitempty"`
	UseNum               int32  `protobuf:"varint,13,opt,name=use_num,json=useNum,proto3" json:"use_num,omitempty"`
	NotUseNum            int32  `protobuf:"varint,14,opt,name=not_use_num,json=notUseNum,proto3" json:"not_use_num,omitempty"`
	MinimumAmount        int32  `protobuf:"varint,15,opt,name=minimum_amount,json=minimumAmount,proto3" json:"minimum_amount,omitempty"`
	DeductionAmount      int32  `protobuf:"varint,16,opt,name=deduction_amount,json=deductionAmount,proto3" json:"deduction_amount,omitempty"`
	UseAmount            int32  `protobuf:"varint,17,opt,name=use_amount,json=useAmount,proto3" json:"use_amount,omitempty"`
	GuideDesc            string `protobuf:"bytes,18,opt,name=guide_desc,json=guideDesc,proto3" json:"guide_desc,omitempty"`
	GuideVideoPath       string `protobuf:"bytes,19,opt,name=guide_video_path,json=guideVideoPath,proto3" json:"guide_video_path,omitempty"`
	TideSpotGoodListJson string `protobuf:"bytes,20,opt,name=tide_spot_good_list_json,json=tideSpotGoodListJson,proto3" json:"tide_spot_good_list_json,omitempty"`
	Type                 string `protobuf:"bytes,21,opt,name=type,proto3" json:"type,omitempty"`
	Enable               bool   `protobuf:"varint,22,opt,name=enable,proto3" json:"enable,omitempty"`
	CreateTime           int32  `protobuf:"varint,23,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *TideSpotConfig) Reset() {
	*x = TideSpotConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TideSpotConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TideSpotConfig) ProtoMessage() {}

func (x *TideSpotConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TideSpotConfig.ProtoReflect.Descriptor instead.
func (*TideSpotConfig) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{10}
}

func (x *TideSpotConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TideSpotConfig) GetTideSpotId() string {
	if x != nil {
		return x.TideSpotId
	}
	return ""
}

func (x *TideSpotConfig) GetTideSpotName() string {
	if x != nil {
		return x.TideSpotName
	}
	return ""
}

func (x *TideSpotConfig) GetCouponName() string {
	if x != nil {
		return x.CouponName
	}
	return ""
}

func (x *TideSpotConfig) GetCompareWord() string {
	if x != nil {
		return x.CompareWord
	}
	return ""
}

func (x *TideSpotConfig) GetCouponImgPath() string {
	if x != nil {
		return x.CouponImgPath
	}
	return ""
}

func (x *TideSpotConfig) GetCompareLogoPath() string {
	if x != nil {
		return x.CompareLogoPath
	}
	return ""
}

func (x *TideSpotConfig) GetCompareLogoId() string {
	if x != nil {
		return x.CompareLogoId
	}
	return ""
}

func (x *TideSpotConfig) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TideSpotConfig) GetEffectiveTime() int32 {
	if x != nil {
		return x.EffectiveTime
	}
	return 0
}

func (x *TideSpotConfig) GetCouponContent() string {
	if x != nil {
		return x.CouponContent
	}
	return ""
}

func (x *TideSpotConfig) GetGenerateNum() int32 {
	if x != nil {
		return x.GenerateNum
	}
	return 0
}

func (x *TideSpotConfig) GetUseNum() int32 {
	if x != nil {
		return x.UseNum
	}
	return 0
}

func (x *TideSpotConfig) GetNotUseNum() int32 {
	if x != nil {
		return x.NotUseNum
	}
	return 0
}

func (x *TideSpotConfig) GetMinimumAmount() int32 {
	if x != nil {
		return x.MinimumAmount
	}
	return 0
}

func (x *TideSpotConfig) GetDeductionAmount() int32 {
	if x != nil {
		return x.DeductionAmount
	}
	return 0
}

func (x *TideSpotConfig) GetUseAmount() int32 {
	if x != nil {
		return x.UseAmount
	}
	return 0
}

func (x *TideSpotConfig) GetGuideDesc() string {
	if x != nil {
		return x.GuideDesc
	}
	return ""
}

func (x *TideSpotConfig) GetGuideVideoPath() string {
	if x != nil {
		return x.GuideVideoPath
	}
	return ""
}

func (x *TideSpotConfig) GetTideSpotGoodListJson() string {
	if x != nil {
		return x.TideSpotGoodListJson
	}
	return ""
}

func (x *TideSpotConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TideSpotConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *TideSpotConfig) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type TideSpotConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TideSpotConfig `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TideSpotConfigRes) Reset() {
	*x = TideSpotConfigRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TideSpotConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TideSpotConfigRes) ProtoMessage() {}

func (x *TideSpotConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TideSpotConfigRes.ProtoReflect.Descriptor instead.
func (*TideSpotConfigRes) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{11}
}

func (x *TideSpotConfigRes) GetData() []*TideSpotConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type TideSpotConfigCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalGenerateNum int32 `protobuf:"varint,1,opt,name=total_generate_num,json=totalGenerateNum,proto3" json:"total_generate_num,omitempty"`
	TotalUseAmount   int32 `protobuf:"varint,2,opt,name=total_use_amount,json=totalUseAmount,proto3" json:"total_use_amount,omitempty"`
	TotalUseNum      int32 `protobuf:"varint,3,opt,name=total_use_num,json=totalUseNum,proto3" json:"total_use_num,omitempty"`
	TotalNotUseNum   int32 `protobuf:"varint,4,opt,name=total_not_use_num,json=totalNotUseNum,proto3" json:"total_not_use_num,omitempty"`
}

func (x *TideSpotConfigCountRes) Reset() {
	*x = TideSpotConfigCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TideSpotConfigCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TideSpotConfigCountRes) ProtoMessage() {}

func (x *TideSpotConfigCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TideSpotConfigCountRes.ProtoReflect.Descriptor instead.
func (*TideSpotConfigCountRes) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{12}
}

func (x *TideSpotConfigCountRes) GetTotalGenerateNum() int32 {
	if x != nil {
		return x.TotalGenerateNum
	}
	return 0
}

func (x *TideSpotConfigCountRes) GetTotalUseAmount() int32 {
	if x != nil {
		return x.TotalUseAmount
	}
	return 0
}

func (x *TideSpotConfigCountRes) GetTotalUseNum() int32 {
	if x != nil {
		return x.TotalUseNum
	}
	return 0
}

func (x *TideSpotConfigCountRes) GetTotalNotUseNum() int32 {
	if x != nil {
		return x.TotalNotUseNum
	}
	return 0
}

type TideSpotGood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GoodName         string `protobuf:"bytes,2,opt,name=good_name,json=goodName,proto3" json:"good_name,omitempty"`
	GoodBarcode      string `protobuf:"bytes,3,opt,name=good_barcode,json=goodBarcode,proto3" json:"good_barcode,omitempty"`
	TideSpotConfigId string `protobuf:"bytes,4,opt,name=tide_spot_config_id,json=tideSpotConfigId,proto3" json:"tide_spot_config_id,omitempty"`
}

func (x *TideSpotGood) Reset() {
	*x = TideSpotGood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TideSpotGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TideSpotGood) ProtoMessage() {}

func (x *TideSpotGood) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TideSpotGood.ProtoReflect.Descriptor instead.
func (*TideSpotGood) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{13}
}

func (x *TideSpotGood) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TideSpotGood) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *TideSpotGood) GetGoodBarcode() string {
	if x != nil {
		return x.GoodBarcode
	}
	return ""
}

func (x *TideSpotGood) GetTideSpotConfigId() string {
	if x != nil {
		return x.TideSpotConfigId
	}
	return ""
}

type CouponBuyGood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GoodName    string `protobuf:"bytes,2,opt,name=good_name,json=goodName,proto3" json:"good_name,omitempty"`
	GoodBarcode string `protobuf:"bytes,3,opt,name=good_barcode,json=goodBarcode,proto3" json:"good_barcode,omitempty"`
	CouponId    string `protobuf:"bytes,4,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"`
}

func (x *CouponBuyGood) Reset() {
	*x = CouponBuyGood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponBuyGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponBuyGood) ProtoMessage() {}

func (x *CouponBuyGood) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponBuyGood.ProtoReflect.Descriptor instead.
func (*CouponBuyGood) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{14}
}

func (x *CouponBuyGood) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CouponBuyGood) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *CouponBuyGood) GetGoodBarcode() string {
	if x != nil {
		return x.GoodBarcode
	}
	return ""
}

func (x *CouponBuyGood) GetCouponId() string {
	if x != nil {
		return x.CouponId
	}
	return ""
}

type TurtleBackMenu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MenuName string `protobuf:"bytes,2,opt,name=menu_name,json=menuName,proto3" json:"menu_name,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	MenuCode string `protobuf:"bytes,4,opt,name=menu_code,json=menuCode,proto3" json:"menu_code,omitempty"`
}

func (x *TurtleBackMenu) Reset() {
	*x = TurtleBackMenu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurtleBackMenu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurtleBackMenu) ProtoMessage() {}

func (x *TurtleBackMenu) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurtleBackMenu.ProtoReflect.Descriptor instead.
func (*TurtleBackMenu) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{15}
}

func (x *TurtleBackMenu) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TurtleBackMenu) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *TurtleBackMenu) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TurtleBackMenu) GetMenuCode() string {
	if x != nil {
		return x.MenuCode
	}
	return ""
}

type TurtleBackConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sort           int32  `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
	MenuConfigName string `protobuf:"bytes,3,opt,name=menu_config_name,json=menuConfigName,proto3" json:"menu_config_name,omitempty"`
	MenuName       string `protobuf:"bytes,4,opt,name=menu_name,json=menuName,proto3" json:"menu_name,omitempty"`
	Path           string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	MenuCode       string `protobuf:"bytes,6,opt,name=menu_code,json=menuCode,proto3" json:"menu_code,omitempty"`
	Enable         bool   `protobuf:"varint,7,opt,name=enable,proto3" json:"enable,omitempty"`
	IconPath       string `protobuf:"bytes,8,opt,name=iconPath,proto3" json:"iconPath,omitempty"`
}

func (x *TurtleBackConfig) Reset() {
	*x = TurtleBackConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurtleBackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurtleBackConfig) ProtoMessage() {}

func (x *TurtleBackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurtleBackConfig.ProtoReflect.Descriptor instead.
func (*TurtleBackConfig) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{16}
}

func (x *TurtleBackConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TurtleBackConfig) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TurtleBackConfig) GetMenuConfigName() string {
	if x != nil {
		return x.MenuConfigName
	}
	return ""
}

func (x *TurtleBackConfig) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *TurtleBackConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TurtleBackConfig) GetMenuCode() string {
	if x != nil {
		return x.MenuCode
	}
	return ""
}

func (x *TurtleBackConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *TurtleBackConfig) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

type MsKeyword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MsKeyword) Reset() {
	*x = MsKeyword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsKeyword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsKeyword) ProtoMessage() {}

func (x *MsKeyword) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsKeyword.ProtoReflect.Descriptor instead.
func (*MsKeyword) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{17}
}

func (x *MsKeyword) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type MsEmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsEmptyReq) Reset() {
	*x = MsEmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsEmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsEmptyReq) ProtoMessage() {}

func (x *MsEmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsEmptyReq.ProtoReflect.Descriptor instead.
func (*MsEmptyReq) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{18}
}

type MsUpdateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MsUpdateRes) Reset() {
	*x = MsUpdateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsUpdateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsUpdateRes) ProtoMessage() {}

func (x *MsUpdateRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsUpdateRes.ProtoReflect.Descriptor instead.
func (*MsUpdateRes) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{19}
}

func (x *MsUpdateRes) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type CategoriesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Category `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CategoriesRes) Reset() {
	*x = CategoriesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoriesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoriesRes) ProtoMessage() {}

func (x *CategoriesRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoriesRes.ProtoReflect.Descriptor instead.
func (*CategoriesRes) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{20}
}

func (x *CategoriesRes) GetData() []*Category {
	if x != nil {
		return x.Data
	}
	return nil
}

type TurtleBackConfigRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TurtleBackConfig `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TurtleBackConfigRes) Reset() {
	*x = TurtleBackConfigRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurtleBackConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurtleBackConfigRes) ProtoMessage() {}

func (x *TurtleBackConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurtleBackConfigRes.ProtoReflect.Descriptor instead.
func (*TurtleBackConfigRes) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{21}
}

func (x *TurtleBackConfigRes) GetData() []*TurtleBackConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type TagsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Tag `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TagsRes) Reset() {
	*x = TagsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsRes) ProtoMessage() {}

func (x *TagsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsRes.ProtoReflect.Descriptor instead.
func (*TagsRes) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{22}
}

func (x *TagsRes) GetData() []*Tag {
	if x != nil {
		return x.Data
	}
	return nil
}

type AreaInfosRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AreaInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AreaInfosRes) Reset() {
	*x = AreaInfosRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfosRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfosRes) ProtoMessage() {}

func (x *AreaInfosRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfosRes.ProtoReflect.Descriptor instead.
func (*AreaInfosRes) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{23}
}

func (x *AreaInfosRes) GetData() []*AreaInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type TurtleBackMenuRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TurtleBackMenu `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TurtleBackMenuRes) Reset() {
	*x = TurtleBackMenuRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurtleBackMenuRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurtleBackMenuRes) ProtoMessage() {}

func (x *TurtleBackMenuRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurtleBackMenuRes.ProtoReflect.Descriptor instead.
func (*TurtleBackMenuRes) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{24}
}

func (x *TurtleBackMenuRes) GetData() []*TurtleBackMenu {
	if x != nil {
		return x.Data
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{25}
}

func (x *Config) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Config) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Config `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{26}
}

func (x *ConfigRequest) GetData() []*Config {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Config `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{27}
}

func (x *ConfigResponse) GetData() []*Config {
	if x != nil {
		return x.Data
	}
	return nil
}

type Auditing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Message     string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data        string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	CreatedBy   string `protobuf:"bytes,5,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedTime int32  `protobuf:"varint,6,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
}

func (x *Auditing) Reset() {
	*x = Auditing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auditing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auditing) ProtoMessage() {}

func (x *Auditing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auditing.ProtoReflect.Descriptor instead.
func (*Auditing) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{28}
}

func (x *Auditing) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Auditing) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Auditing) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Auditing) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Auditing) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Auditing) GetCreatedTime() int32 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type AuditingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CreatedBy string `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	StartTime int32  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int32  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *AuditingRequest) Reset() {
	*x = AuditingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditingRequest) ProtoMessage() {}

func (x *AuditingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditingRequest.ProtoReflect.Descriptor instead.
func (*AuditingRequest) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{29}
}

func (x *AuditingRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AuditingRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AuditingRequest) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AuditingRequest) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type AuditingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Auditing `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AuditingResponse) Reset() {
	*x = AuditingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditingResponse) ProtoMessage() {}

func (x *AuditingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditingResponse.ProtoReflect.Descriptor instead.
func (*AuditingResponse) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{30}
}

func (x *AuditingResponse) GetData() []*Auditing {
	if x != nil {
		return x.Data
	}
	return nil
}

type RestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RestoreRequest) Reset() {
	*x = RestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreRequest) ProtoMessage() {}

func (x *RestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreRequest.ProtoReflect.Descriptor instead.
func (*RestoreRequest) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{31}
}

func (x *RestoreRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RestoreRequest) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type AreaInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ParentId string `protobuf:"bytes,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
}

func (x *AreaInfoRequest) Reset() {
	*x = AreaInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreaInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreaInfoRequest) ProtoMessage() {}

func (x *AreaInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreaInfoRequest.ProtoReflect.Descriptor instead.
func (*AreaInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{32}
}

func (x *AreaInfoRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AreaInfoRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

type RestoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestoreResponse) Reset() {
	*x = RestoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_management_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreResponse) ProtoMessage() {}

func (x *RestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_management_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreResponse.ProtoReflect.Descriptor instead.
func (*RestoreResponse) Descriptor() ([]byte, []int) {
	return file_proto_management_proto_rawDescGZIP(), []int{33}
}

var File_proto_management_proto protoreflect.FileDescriptor

var file_proto_management_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x62,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73,
	0x53, 0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x22, 0x62, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x73, 0x0a, 0x15, 0x54, 0x69, 0x64, 0x65,
	0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x64, 0x65, 0x53,
	0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x77, 0x0a,
	0x08, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x08, 0x54, 0x69, 0x64, 0x65, 0x53,
	0x70, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x0a, 0x0b, 0x54, 0x69, 0x64, 0x65, 0x53,
	0x70, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xe1, 0x04, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x64, 0x65, 0x5f,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x47, 0x6f,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x64, 0x65, 0x53,
	0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x22, 0x4c, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49,
	0x73, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x22, 0x99, 0x07,
	0x0a, 0x06, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x13,
	0x74, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x69, 0x64, 0x65, 0x53,
	0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74,
	0x69, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6d,
	0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6d, 0x67,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x49, 0x6d, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x71, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62,
	0x75, 0x79, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x12, 0x38, 0x0a, 0x18, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x49, 0x6d,
	0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x22, 0xa5, 0x06, 0x0a, 0x0e, 0x54, 0x69,
	0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x74, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6d, 0x67, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x6f,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4c, 0x6f,
	0x67, 0x6f, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x69, 0x64, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x18,
	0x74, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x74, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x46, 0x0a, 0x11, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbf, 0x01, 0x0a, 0x16, 0x54, 0x69,
	0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x29, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x8d, 0x01, 0x0a, 0x0c,
	0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x6f,
	0x64, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x13,
	0x74, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x69, 0x64, 0x65, 0x53,
	0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x0d, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x42, 0x75, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x6f,
	0x64, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x67, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x0e, 0x54, 0x75, 0x72,
	0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6e, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x10, 0x54, 0x75,
	0x72, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x6e, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x21,
	0x0a, 0x09, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x0c, 0x0a, 0x0a, 0x4d, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x22,
	0x23, 0x0a, 0x0b, 0x4d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x0d, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x4a, 0x0a, 0x13, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31,
	0x0a, 0x07, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3b, 0x0a, 0x0c, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x46,
	0x0a, 0x11, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x9e, 0x01, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x0f, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa8, 0x1b, 0x0a, 0x11,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12,
	0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x4d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x17, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70,
	0x6f, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70,
	0x6f, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1a, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x69,
	0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x12, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x18, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x12, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x42, 0x79, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a,
	0x12, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x54, 0x61, 0x67, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x67, 0x42,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x16, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x1a, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x6e,
	0x75, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54,
	0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x18, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x4d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x69,
	0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x69, 0x64, 0x65,
	0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x69, 0x64, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x42, 0x75, 0x79,
	0x47, 0x6f, 0x6f, 0x64, 0x12, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x42, 0x75, 0x79, 0x47, 0x6f,
	0x6f, 0x64, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x15,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x12, 0x15, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12,
	0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x15, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x15, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x1a,
	0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x4d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x1a, 0x22, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x54, 0x75, 0x72, 0x74, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79,
	0x73, 0x70, 0x6f, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3b, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_management_proto_rawDescOnce sync.Once
	file_proto_management_proto_rawDescData = file_proto_management_proto_rawDesc
)

func file_proto_management_proto_rawDescGZIP() []byte {
	file_proto_management_proto_rawDescOnce.Do(func() {
		file_proto_management_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_management_proto_rawDescData)
	})
	return file_proto_management_proto_rawDescData
}

var file_proto_management_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_proto_management_proto_goTypes = []interface{}{
	(*Category)(nil),               // 0: shenzhouyinji.Category
	(*Tag)(nil),                    // 1: shenzhouyinji.Tag
	(*TideSpotConfigRequest)(nil),  // 2: shenzhouyinji.TideSpotConfigRequest
	(*AreaInfo)(nil),               // 3: shenzhouyinji.AreaInfo
	(*TideSpot)(nil),               // 4: shenzhouyinji.TideSpot
	(*TideSpotRes)(nil),            // 5: shenzhouyinji.TideSpotRes
	(*CouponRequest)(nil),          // 6: shenzhouyinji.CouponRequest
	(*CouponRes)(nil),              // 7: shenzhouyinji.CouponRes
	(*CouponIsNewRes)(nil),         // 8: shenzhouyinji.CouponIsNewRes
	(*Coupon)(nil),                 // 9: shenzhouyinji.Coupon
	(*TideSpotConfig)(nil),         // 10: shenzhouyinji.TideSpotConfig
	(*TideSpotConfigRes)(nil),      // 11: shenzhouyinji.TideSpotConfigRes
	(*TideSpotConfigCountRes)(nil), // 12: shenzhouyinji.TideSpotConfigCountRes
	(*TideSpotGood)(nil),           // 13: shenzhouyinji.TideSpotGood
	(*CouponBuyGood)(nil),          // 14: shenzhouyinji.CouponBuyGood
	(*TurtleBackMenu)(nil),         // 15: shenzhouyinji.TurtleBackMenu
	(*TurtleBackConfig)(nil),       // 16: shenzhouyinji.TurtleBackConfig
	(*MsKeyword)(nil),              // 17: shenzhouyinji.MsKeyword
	(*MsEmptyReq)(nil),             // 18: shenzhouyinji.MsEmptyReq
	(*MsUpdateRes)(nil),            // 19: shenzhouyinji.MsUpdateRes
	(*CategoriesRes)(nil),          // 20: shenzhouyinji.CategoriesRes
	(*TurtleBackConfigRes)(nil),    // 21: shenzhouyinji.TurtleBackConfigRes
	(*TagsRes)(nil),                // 22: shenzhouyinji.TagsRes
	(*AreaInfosRes)(nil),           // 23: shenzhouyinji.AreaInfosRes
	(*TurtleBackMenuRes)(nil),      // 24: shenzhouyinji.TurtleBackMenuRes
	(*Config)(nil),                 // 25: shenzhouyinji.Config
	(*ConfigRequest)(nil),          // 26: shenzhouyinji.ConfigRequest
	(*ConfigResponse)(nil),         // 27: shenzhouyinji.ConfigResponse
	(*Auditing)(nil),               // 28: shenzhouyinji.Auditing
	(*AuditingRequest)(nil),        // 29: shenzhouyinji.AuditingRequest
	(*AuditingResponse)(nil),       // 30: shenzhouyinji.AuditingResponse
	(*RestoreRequest)(nil),         // 31: shenzhouyinji.RestoreRequest
	(*AreaInfoRequest)(nil),        // 32: shenzhouyinji.AreaInfoRequest
	(*RestoreResponse)(nil),        // 33: shenzhouyinji.RestoreResponse
}
var file_proto_management_proto_depIdxs = []int32{
	4,  // 0: shenzhouyinji.TideSpotRes.data:type_name -> shenzhouyinji.TideSpot
	9,  // 1: shenzhouyinji.CouponRes.data:type_name -> shenzhouyinji.Coupon
	10, // 2: shenzhouyinji.TideSpotConfigRes.data:type_name -> shenzhouyinji.TideSpotConfig
	0,  // 3: shenzhouyinji.CategoriesRes.data:type_name -> shenzhouyinji.Category
	16, // 4: shenzhouyinji.TurtleBackConfigRes.data:type_name -> shenzhouyinji.TurtleBackConfig
	1,  // 5: shenzhouyinji.TagsRes.data:type_name -> shenzhouyinji.Tag
	3,  // 6: shenzhouyinji.AreaInfosRes.data:type_name -> shenzhouyinji.AreaInfo
	15, // 7: shenzhouyinji.TurtleBackMenuRes.data:type_name -> shenzhouyinji.TurtleBackMenu
	25, // 8: shenzhouyinji.ConfigRequest.data:type_name -> shenzhouyinji.Config
	25, // 9: shenzhouyinji.ConfigResponse.data:type_name -> shenzhouyinji.Config
	28, // 10: shenzhouyinji.AuditingResponse.data:type_name -> shenzhouyinji.Auditing
	26, // 11: shenzhouyinji.ManagementService.GetConfigs:input_type -> shenzhouyinji.ConfigRequest
	26, // 12: shenzhouyinji.ManagementService.UpdateConfigs:input_type -> shenzhouyinji.ConfigRequest
	0,  // 13: shenzhouyinji.ManagementService.CreateCategory:input_type -> shenzhouyinji.Category
	0,  // 14: shenzhouyinji.ManagementService.UpdateCategory:input_type -> shenzhouyinji.Category
	17, // 15: shenzhouyinji.ManagementService.GetCategoryByID:input_type -> shenzhouyinji.MsKeyword
	17, // 16: shenzhouyinji.ManagementService.GetCategoryByName:input_type -> shenzhouyinji.MsKeyword
	17, // 17: shenzhouyinji.ManagementService.GetCategoryByParentID:input_type -> shenzhouyinji.MsKeyword
	18, // 18: shenzhouyinji.ManagementService.GetTopCategory:input_type -> shenzhouyinji.MsEmptyReq
	4,  // 19: shenzhouyinji.ManagementService.CreateTideSpot:input_type -> shenzhouyinji.TideSpot
	4,  // 20: shenzhouyinji.ManagementService.UpdateTideSpot:input_type -> shenzhouyinji.TideSpot
	17, // 21: shenzhouyinji.ManagementService.GetTideSpotList:input_type -> shenzhouyinji.MsKeyword
	1,  // 22: shenzhouyinji.ManagementService.CreateTag:input_type -> shenzhouyinji.Tag
	1,  // 23: shenzhouyinji.ManagementService.UpdateTag:input_type -> shenzhouyinji.Tag
	17, // 24: shenzhouyinji.ManagementService.GetTagByID:input_type -> shenzhouyinji.MsKeyword
	17, // 25: shenzhouyinji.ManagementService.GetTagByCategoryID:input_type -> shenzhouyinji.MsKeyword
	17, // 26: shenzhouyinji.ManagementService.GetTurtleBackMenuList:input_type -> shenzhouyinji.MsKeyword
	10, // 27: shenzhouyinji.ManagementService.CreateTideSpotConfig:input_type -> shenzhouyinji.TideSpotConfig
	10, // 28: shenzhouyinji.ManagementService.UpdateTideSpotConfig:input_type -> shenzhouyinji.TideSpotConfig
	2,  // 29: shenzhouyinji.ManagementService.GetTideSpotConfigList:input_type -> shenzhouyinji.TideSpotConfigRequest
	17, // 30: shenzhouyinji.ManagementService.GetTideSpotConfigById:input_type -> shenzhouyinji.MsKeyword
	2,  // 31: shenzhouyinji.ManagementService.GetTideSpotConfigCount:input_type -> shenzhouyinji.TideSpotConfigRequest
	13, // 32: shenzhouyinji.ManagementService.CreateTideSpotGood:input_type -> shenzhouyinji.TideSpotGood
	14, // 33: shenzhouyinji.ManagementService.CreateCouponBuyGood:input_type -> shenzhouyinji.CouponBuyGood
	9,  // 34: shenzhouyinji.ManagementService.CreateCoupon:input_type -> shenzhouyinji.Coupon
	9,  // 35: shenzhouyinji.ManagementService.UpdateCoupon:input_type -> shenzhouyinji.Coupon
	6,  // 36: shenzhouyinji.ManagementService.GetCouponList:input_type -> shenzhouyinji.CouponRequest
	6,  // 37: shenzhouyinji.ManagementService.GetCouponListByPage:input_type -> shenzhouyinji.CouponRequest
	17, // 38: shenzhouyinji.ManagementService.GetCoupon:input_type -> shenzhouyinji.MsKeyword
	9,  // 39: shenzhouyinji.ManagementService.UpdateCouponToRead:input_type -> shenzhouyinji.Coupon
	17, // 40: shenzhouyinji.ManagementService.GetTurtleBackConfigList:input_type -> shenzhouyinji.MsKeyword
	16, // 41: shenzhouyinji.ManagementService.UpdateTurtleBackConfig:input_type -> shenzhouyinji.TurtleBackConfig
	17, // 42: shenzhouyinji.ManagementService.GetTurtleBackConfig:input_type -> shenzhouyinji.MsKeyword
	32, // 43: shenzhouyinji.ManagementService.GetAreaInfoByParentID:input_type -> shenzhouyinji.AreaInfoRequest
	28, // 44: shenzhouyinji.ManagementService.CreateAuditing:input_type -> shenzhouyinji.Auditing
	29, // 45: shenzhouyinji.ManagementService.GetAuditings:input_type -> shenzhouyinji.AuditingRequest
	31, // 46: shenzhouyinji.ManagementService.RestoreSceneryspot:input_type -> shenzhouyinji.RestoreRequest
	31, // 47: shenzhouyinji.ManagementService.RestoreEvent:input_type -> shenzhouyinji.RestoreRequest
	31, // 48: shenzhouyinji.ManagementService.RestoreUser:input_type -> shenzhouyinji.RestoreRequest
	31, // 49: shenzhouyinji.ManagementService.RestoreUserEvent:input_type -> shenzhouyinji.RestoreRequest
	31, // 50: shenzhouyinji.ManagementService.RestoreTask:input_type -> shenzhouyinji.RestoreRequest
	31, // 51: shenzhouyinji.ManagementService.RestoreBadge:input_type -> shenzhouyinji.RestoreRequest
	31, // 52: shenzhouyinji.ManagementService.RestoreLike:input_type -> shenzhouyinji.RestoreRequest
	31, // 53: shenzhouyinji.ManagementService.RestorePoints:input_type -> shenzhouyinji.RestoreRequest
	31, // 54: shenzhouyinji.ManagementService.RestoreConversation:input_type -> shenzhouyinji.RestoreRequest
	27, // 55: shenzhouyinji.ManagementService.GetConfigs:output_type -> shenzhouyinji.ConfigResponse
	27, // 56: shenzhouyinji.ManagementService.UpdateConfigs:output_type -> shenzhouyinji.ConfigResponse
	17, // 57: shenzhouyinji.ManagementService.CreateCategory:output_type -> shenzhouyinji.MsKeyword
	19, // 58: shenzhouyinji.ManagementService.UpdateCategory:output_type -> shenzhouyinji.MsUpdateRes
	0,  // 59: shenzhouyinji.ManagementService.GetCategoryByID:output_type -> shenzhouyinji.Category
	0,  // 60: shenzhouyinji.ManagementService.GetCategoryByName:output_type -> shenzhouyinji.Category
	20, // 61: shenzhouyinji.ManagementService.GetCategoryByParentID:output_type -> shenzhouyinji.CategoriesRes
	20, // 62: shenzhouyinji.ManagementService.GetTopCategory:output_type -> shenzhouyinji.CategoriesRes
	17, // 63: shenzhouyinji.ManagementService.CreateTideSpot:output_type -> shenzhouyinji.MsKeyword
	19, // 64: shenzhouyinji.ManagementService.UpdateTideSpot:output_type -> shenzhouyinji.MsUpdateRes
	5,  // 65: shenzhouyinji.ManagementService.GetTideSpotList:output_type -> shenzhouyinji.TideSpotRes
	17, // 66: shenzhouyinji.ManagementService.CreateTag:output_type -> shenzhouyinji.MsKeyword
	19, // 67: shenzhouyinji.ManagementService.UpdateTag:output_type -> shenzhouyinji.MsUpdateRes
	1,  // 68: shenzhouyinji.ManagementService.GetTagByID:output_type -> shenzhouyinji.Tag
	22, // 69: shenzhouyinji.ManagementService.GetTagByCategoryID:output_type -> shenzhouyinji.TagsRes
	24, // 70: shenzhouyinji.ManagementService.GetTurtleBackMenuList:output_type -> shenzhouyinji.TurtleBackMenuRes
	17, // 71: shenzhouyinji.ManagementService.CreateTideSpotConfig:output_type -> shenzhouyinji.MsKeyword
	19, // 72: shenzhouyinji.ManagementService.UpdateTideSpotConfig:output_type -> shenzhouyinji.MsUpdateRes
	11, // 73: shenzhouyinji.ManagementService.GetTideSpotConfigList:output_type -> shenzhouyinji.TideSpotConfigRes
	10, // 74: shenzhouyinji.ManagementService.GetTideSpotConfigById:output_type -> shenzhouyinji.TideSpotConfig
	12, // 75: shenzhouyinji.ManagementService.GetTideSpotConfigCount:output_type -> shenzhouyinji.TideSpotConfigCountRes
	17, // 76: shenzhouyinji.ManagementService.CreateTideSpotGood:output_type -> shenzhouyinji.MsKeyword
	17, // 77: shenzhouyinji.ManagementService.CreateCouponBuyGood:output_type -> shenzhouyinji.MsKeyword
	17, // 78: shenzhouyinji.ManagementService.CreateCoupon:output_type -> shenzhouyinji.MsKeyword
	19, // 79: shenzhouyinji.ManagementService.UpdateCoupon:output_type -> shenzhouyinji.MsUpdateRes
	7,  // 80: shenzhouyinji.ManagementService.GetCouponList:output_type -> shenzhouyinji.CouponRes
	7,  // 81: shenzhouyinji.ManagementService.GetCouponListByPage:output_type -> shenzhouyinji.CouponRes
	9,  // 82: shenzhouyinji.ManagementService.GetCoupon:output_type -> shenzhouyinji.Coupon
	19, // 83: shenzhouyinji.ManagementService.UpdateCouponToRead:output_type -> shenzhouyinji.MsUpdateRes
	21, // 84: shenzhouyinji.ManagementService.GetTurtleBackConfigList:output_type -> shenzhouyinji.TurtleBackConfigRes
	19, // 85: shenzhouyinji.ManagementService.UpdateTurtleBackConfig:output_type -> shenzhouyinji.MsUpdateRes
	16, // 86: shenzhouyinji.ManagementService.GetTurtleBackConfig:output_type -> shenzhouyinji.TurtleBackConfig
	23, // 87: shenzhouyinji.ManagementService.GetAreaInfoByParentID:output_type -> shenzhouyinji.AreaInfosRes
	30, // 88: shenzhouyinji.ManagementService.CreateAuditing:output_type -> shenzhouyinji.AuditingResponse
	30, // 89: shenzhouyinji.ManagementService.GetAuditings:output_type -> shenzhouyinji.AuditingResponse
	33, // 90: shenzhouyinji.ManagementService.RestoreSceneryspot:output_type -> shenzhouyinji.RestoreResponse
	33, // 91: shenzhouyinji.ManagementService.RestoreEvent:output_type -> shenzhouyinji.RestoreResponse
	33, // 92: shenzhouyinji.ManagementService.RestoreUser:output_type -> shenzhouyinji.RestoreResponse
	33, // 93: shenzhouyinji.ManagementService.RestoreUserEvent:output_type -> shenzhouyinji.RestoreResponse
	33, // 94: shenzhouyinji.ManagementService.RestoreTask:output_type -> shenzhouyinji.RestoreResponse
	33, // 95: shenzhouyinji.ManagementService.RestoreBadge:output_type -> shenzhouyinji.RestoreResponse
	33, // 96: shenzhouyinji.ManagementService.RestoreLike:output_type -> shenzhouyinji.RestoreResponse
	33, // 97: shenzhouyinji.ManagementService.RestorePoints:output_type -> shenzhouyinji.RestoreResponse
	33, // 98: shenzhouyinji.ManagementService.RestoreConversation:output_type -> shenzhouyinji.RestoreResponse
	55, // [55:99] is the sub-list for method output_type
	11, // [11:55] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_proto_management_proto_init() }
func file_proto_management_proto_init() {
	if File_proto_management_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_management_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TideSpotConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TideSpot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TideSpotRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponIsNewRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coupon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TideSpotConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TideSpotConfigRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TideSpotConfigCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TideSpotGood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponBuyGood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurtleBackMenu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurtleBackConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsKeyword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsEmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsUpdateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoriesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurtleBackConfigRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfosRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurtleBackMenuRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auditing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreaInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_management_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_management_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_management_proto_goTypes,
		DependencyIndexes: file_proto_management_proto_depIdxs,
		MessageInfos:      file_proto_management_proto_msgTypes,
	}.Build()
	File_proto_management_proto = out.File
	file_proto_management_proto_rawDesc = nil
	file_proto_management_proto_goTypes = nil
	file_proto_management_proto_depIdxs = nil
}
