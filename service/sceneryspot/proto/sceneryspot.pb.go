// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: proto/sceneryspot.proto

package shenzhouyinji

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Sceneryspot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address           string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Points            int32  `protobuf:"varint,4,opt,name=points,proto3" json:"points,omitempty"`
	Images            string `protobuf:"bytes,5,opt,name=images,proto3" json:"images,omitempty"`
	Coordinate        string `protobuf:"bytes,6,opt,name=coordinate,proto3" json:"coordinate,omitempty"`
	ElectricFence     string `protobuf:"bytes,7,opt,name=electric_fence,json=electricFence,proto3" json:"electric_fence,omitempty"`
	Introduction      string `protobuf:"bytes,8,opt,name=introduction,proto3" json:"introduction,omitempty"`
	CategoryId        string `protobuf:"bytes,9,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	PositionTolerance string `protobuf:"bytes,10,opt,name=position_tolerance,json=positionTolerance,proto3" json:"position_tolerance,omitempty"`
	PassportLink      string `protobuf:"bytes,11,opt,name=passport_link,json=passportLink,proto3" json:"passport_link,omitempty"`
	HealthCodeLink    string `protobuf:"bytes,12,opt,name=health_code_link,json=healthCodeLink,proto3" json:"health_code_link,omitempty"`
	Status            int32  `protobuf:"varint,13,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime        int32  `protobuf:"varint,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Code              string `protobuf:"bytes,15,opt,name=code,proto3" json:"code,omitempty"`
	EnableAward       bool   `protobuf:"varint,16,opt,name=enable_award,json=enableAward,proto3" json:"enable_award,omitempty"`
}

func (x *Sceneryspot) Reset() {
	*x = Sceneryspot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sceneryspot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sceneryspot) ProtoMessage() {}

func (x *Sceneryspot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sceneryspot.ProtoReflect.Descriptor instead.
func (*Sceneryspot) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{0}
}

func (x *Sceneryspot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Sceneryspot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sceneryspot) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Sceneryspot) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Sceneryspot) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Sceneryspot) GetCoordinate() string {
	if x != nil {
		return x.Coordinate
	}
	return ""
}

func (x *Sceneryspot) GetElectricFence() string {
	if x != nil {
		return x.ElectricFence
	}
	return ""
}

func (x *Sceneryspot) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Sceneryspot) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *Sceneryspot) GetPositionTolerance() string {
	if x != nil {
		return x.PositionTolerance
	}
	return ""
}

func (x *Sceneryspot) GetPassportLink() string {
	if x != nil {
		return x.PassportLink
	}
	return ""
}

func (x *Sceneryspot) GetHealthCodeLink() string {
	if x != nil {
		return x.HealthCodeLink
	}
	return ""
}

func (x *Sceneryspot) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Sceneryspot) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Sceneryspot) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Sceneryspot) GetEnableAward() bool {
	if x != nil {
		return x.EnableAward
	}
	return false
}

type ServiceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SceneryspotId      string `protobuf:"bytes,2,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Name               string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CategoryId         string `protobuf:"bytes,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Address            string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Images             string `protobuf:"bytes,6,opt,name=images,proto3" json:"images,omitempty"`
	Coordinate         string `protobuf:"bytes,7,opt,name=coordinate,proto3" json:"coordinate,omitempty"`
	Wxappid            string `protobuf:"bytes,8,opt,name=wxappid,proto3" json:"wxappid,omitempty"`
	DisplayOrder       int32  `protobuf:"varint,9,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	Introduction       string `protobuf:"bytes,10,opt,name=introduction,proto3" json:"introduction,omitempty"`
	ExpenseInstruction string `protobuf:"bytes,11,opt,name=expense_instruction,json=expenseInstruction,proto3" json:"expense_instruction,omitempty"`
	Status             int32  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ServiceItem) Reset() {
	*x = ServiceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceItem) ProtoMessage() {}

func (x *ServiceItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceItem.ProtoReflect.Descriptor instead.
func (*ServiceItem) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceItem) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *ServiceItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceItem) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *ServiceItem) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ServiceItem) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *ServiceItem) GetCoordinate() string {
	if x != nil {
		return x.Coordinate
	}
	return ""
}

func (x *ServiceItem) GetWxappid() string {
	if x != nil {
		return x.Wxappid
	}
	return ""
}

func (x *ServiceItem) GetDisplayOrder() int32 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *ServiceItem) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *ServiceItem) GetExpenseInstruction() string {
	if x != nil {
		return x.ExpenseInstruction
	}
	return ""
}

func (x *ServiceItem) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Stamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SceneryspotId string `protobuf:"bytes,2,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Address       string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Coordinate    string `protobuf:"bytes,5,opt,name=coordinate,proto3" json:"coordinate,omitempty"`
	Code          string `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Images        string `protobuf:"bytes,7,opt,name=images,proto3" json:"images,omitempty"`
	Status        int32  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int32  `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *Stamp) Reset() {
	*x = Stamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stamp) ProtoMessage() {}

func (x *Stamp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stamp.ProtoReflect.Descriptor instead.
func (*Stamp) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{2}
}

func (x *Stamp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Stamp) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *Stamp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stamp) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Stamp) GetCoordinate() string {
	if x != nil {
		return x.Coordinate
	}
	return ""
}

func (x *Stamp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Stamp) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Stamp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Stamp) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type UserStamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId       string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,3,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Code          string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Location      string `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Status        int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int32  `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	LikeCount     int32  `protobuf:"varint,8,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	ShareCount    int32  `protobuf:"varint,9,opt,name=share_count,json=shareCount,proto3" json:"share_count,omitempty"`
	ViewCount     int32  `protobuf:"varint,10,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
}

func (x *UserStamp) Reset() {
	*x = UserStamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStamp) ProtoMessage() {}

func (x *UserStamp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStamp.ProtoReflect.Descriptor instead.
func (*UserStamp) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{3}
}

func (x *UserStamp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserStamp) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserStamp) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *UserStamp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UserStamp) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UserStamp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserStamp) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserStamp) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *UserStamp) GetShareCount() int32 {
	if x != nil {
		return x.ShareCount
	}
	return 0
}

func (x *UserStamp) GetViewCount() int32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

type SsKeywordByCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SceneryspotID string `protobuf:"bytes,1,opt,name=sceneryspotID,proto3" json:"sceneryspotID,omitempty"`
	CategoryID    string `protobuf:"bytes,2,opt,name=categoryID,proto3" json:"categoryID,omitempty"`
}

func (x *SsKeywordByCategory) Reset() {
	*x = SsKeywordByCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsKeywordByCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsKeywordByCategory) ProtoMessage() {}

func (x *SsKeywordByCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsKeywordByCategory.ProtoReflect.Descriptor instead.
func (*SsKeywordByCategory) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{4}
}

func (x *SsKeywordByCategory) GetSceneryspotID() string {
	if x != nil {
		return x.SceneryspotID
	}
	return ""
}

func (x *SsKeywordByCategory) GetCategoryID() string {
	if x != nil {
		return x.CategoryID
	}
	return ""
}

type SsKeyword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SsKeyword) Reset() {
	*x = SsKeyword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsKeyword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsKeyword) ProtoMessage() {}

func (x *SsKeyword) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsKeyword.ProtoReflect.Descriptor instead.
func (*SsKeyword) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{5}
}

func (x *SsKeyword) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SsKeywords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *SsKeywords) Reset() {
	*x = SsKeywords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsKeywords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsKeywords) ProtoMessage() {}

func (x *SsKeywords) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsKeywords.ProtoReflect.Descriptor instead.
func (*SsKeywords) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{6}
}

func (x *SsKeywords) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type SsEmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SsEmptyReq) Reset() {
	*x = SsEmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsEmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsEmptyReq) ProtoMessage() {}

func (x *SsEmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsEmptyReq.ProtoReflect.Descriptor instead.
func (*SsEmptyReq) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{7}
}

type SsUpdateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SsUpdateRes) Reset() {
	*x = SsUpdateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SsUpdateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SsUpdateRes) ProtoMessage() {}

func (x *SsUpdateRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SsUpdateRes.ProtoReflect.Descriptor instead.
func (*SsUpdateRes) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{8}
}

func (x *SsUpdateRes) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type SceneryspotsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Sceneryspot `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SceneryspotsRes) Reset() {
	*x = SceneryspotsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneryspotsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneryspotsRes) ProtoMessage() {}

func (x *SceneryspotsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneryspotsRes.ProtoReflect.Descriptor instead.
func (*SceneryspotsRes) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{9}
}

func (x *SceneryspotsRes) GetData() []*Sceneryspot {
	if x != nil {
		return x.Data
	}
	return nil
}

type ServiceItemsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ServiceItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ServiceItemsRes) Reset() {
	*x = ServiceItemsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceItemsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceItemsRes) ProtoMessage() {}

func (x *ServiceItemsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceItemsRes.ProtoReflect.Descriptor instead.
func (*ServiceItemsRes) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{10}
}

func (x *ServiceItemsRes) GetData() []*ServiceItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type StampsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Stamp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *StampsRes) Reset() {
	*x = StampsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StampsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StampsRes) ProtoMessage() {}

func (x *StampsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StampsRes.ProtoReflect.Descriptor instead.
func (*StampsRes) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{11}
}

func (x *StampsRes) GetData() []*Stamp {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserStampsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserStamp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserStampsRes) Reset() {
	*x = UserStampsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStampsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStampsRes) ProtoMessage() {}

func (x *UserStampsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStampsRes.ProtoReflect.Descriptor instead.
func (*UserStampsRes) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{12}
}

func (x *UserStampsRes) GetData() []*UserStamp {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserSceneryspot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId       string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ScenerySpotId string `protobuf:"bytes,3,opt,name=scenery_spot_id,json=scenerySpotId,proto3" json:"scenery_spot_id,omitempty"`
	CreateTime    int32  `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *UserSceneryspot) Reset() {
	*x = UserSceneryspot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSceneryspot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSceneryspot) ProtoMessage() {}

func (x *UserSceneryspot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSceneryspot.ProtoReflect.Descriptor instead.
func (*UserSceneryspot) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{13}
}

func (x *UserSceneryspot) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSceneryspot) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserSceneryspot) GetScenerySpotId() string {
	if x != nil {
		return x.ScenerySpotId
	}
	return ""
}

func (x *UserSceneryspot) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type UserSceneryspotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId       string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,3,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
}

func (x *UserSceneryspotRequest) Reset() {
	*x = UserSceneryspotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSceneryspotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSceneryspotRequest) ProtoMessage() {}

func (x *UserSceneryspotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSceneryspotRequest.ProtoReflect.Descriptor instead.
func (*UserSceneryspotRequest) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{14}
}

func (x *UserSceneryspotRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSceneryspotRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserSceneryspotRequest) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

type UserSceneryspotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Sceneryspot `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserSceneryspotResponse) Reset() {
	*x = UserSceneryspotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSceneryspotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSceneryspotResponse) ProtoMessage() {}

func (x *UserSceneryspotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSceneryspotResponse.ProtoReflect.Descriptor instead.
func (*UserSceneryspotResponse) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{15}
}

func (x *UserSceneryspotResponse) GetData() []*Sceneryspot {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserStampRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId       string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,3,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
}

func (x *UserStampRequest) Reset() {
	*x = UserStampRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStampRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStampRequest) ProtoMessage() {}

func (x *UserStampRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStampRequest.ProtoReflect.Descriptor instead.
func (*UserStampRequest) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{16}
}

func (x *UserStampRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserStampRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserStampRequest) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

type UserStampRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId       string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,4,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	ActionUserId  string `protobuf:"bytes,5,opt,name=action_user_id,json=actionUserId,proto3" json:"action_user_id,omitempty"`
	ActionType    string `protobuf:"bytes,6,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Time          int32  `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UserStampRecord) Reset() {
	*x = UserStampRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStampRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStampRecord) ProtoMessage() {}

func (x *UserStampRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStampRecord.ProtoReflect.Descriptor instead.
func (*UserStampRecord) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{17}
}

func (x *UserStampRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserStampRecord) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserStampRecord) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserStampRecord) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *UserStampRecord) GetActionUserId() string {
	if x != nil {
		return x.ActionUserId
	}
	return ""
}

func (x *UserStampRecord) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *UserStampRecord) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type UserStampRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId       string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,3,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	ActionUserId  string `protobuf:"bytes,4,opt,name=action_user_id,json=actionUserId,proto3" json:"action_user_id,omitempty"`
	ActionType    string `protobuf:"bytes,5,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
}

func (x *UserStampRecordReq) Reset() {
	*x = UserStampRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStampRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStampRecordReq) ProtoMessage() {}

func (x *UserStampRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStampRecordReq.ProtoReflect.Descriptor instead.
func (*UserStampRecordReq) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{18}
}

func (x *UserStampRecordReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserStampRecordReq) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserStampRecordReq) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *UserStampRecordReq) GetActionUserId() string {
	if x != nil {
		return x.ActionUserId
	}
	return ""
}

func (x *UserStampRecordReq) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

type UserStampPointsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId       string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,4,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	ActionUserId  string `protobuf:"bytes,5,opt,name=action_user_id,json=actionUserId,proto3" json:"action_user_id,omitempty"`
	Like          int32  `protobuf:"varint,6,opt,name=like,proto3" json:"like,omitempty"`
	Share         int32  `protobuf:"varint,7,opt,name=share,proto3" json:"share,omitempty"`
	View          int32  `protobuf:"varint,8,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *UserStampPointsRecord) Reset() {
	*x = UserStampPointsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStampPointsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStampPointsRecord) ProtoMessage() {}

func (x *UserStampPointsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStampPointsRecord.ProtoReflect.Descriptor instead.
func (*UserStampPointsRecord) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{19}
}

func (x *UserStampPointsRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserStampPointsRecord) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserStampPointsRecord) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserStampPointsRecord) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *UserStampPointsRecord) GetActionUserId() string {
	if x != nil {
		return x.ActionUserId
	}
	return ""
}

func (x *UserStampPointsRecord) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *UserStampPointsRecord) GetShare() int32 {
	if x != nil {
		return x.Share
	}
	return 0
}

func (x *UserStampPointsRecord) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

type UserStampPointsRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId       string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,3,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	ActionUserId  string `protobuf:"bytes,4,opt,name=action_user_id,json=actionUserId,proto3" json:"action_user_id,omitempty"`
}

func (x *UserStampPointsRecordReq) Reset() {
	*x = UserStampPointsRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStampPointsRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStampPointsRecordReq) ProtoMessage() {}

func (x *UserStampPointsRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStampPointsRecordReq.ProtoReflect.Descriptor instead.
func (*UserStampPointsRecordReq) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{20}
}

func (x *UserStampPointsRecordReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserStampPointsRecordReq) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserStampPointsRecordReq) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *UserStampPointsRecordReq) GetActionUserId() string {
	if x != nil {
		return x.ActionUserId
	}
	return ""
}

type UserStampPointsRecordRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserStampPointsRecord `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserStampPointsRecordRes) Reset() {
	*x = UserStampPointsRecordRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sceneryspot_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStampPointsRecordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStampPointsRecordRes) ProtoMessage() {}

func (x *UserStampPointsRecordRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sceneryspot_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStampPointsRecordRes.ProtoReflect.Descriptor instead.
func (*UserStampPointsRecordRes) Descriptor() ([]byte, []int) {
	return file_proto_sceneryspot_proto_rawDescGZIP(), []int{21}
}

func (x *UserStampPointsRecordRes) GetData() []*UserStampPointsRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_proto_sceneryspot_proto protoreflect.FileDescriptor

var file_proto_sceneryspot_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x22, 0xf5, 0x03, 0x0a, 0x0b, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x22, 0xf7, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72,
	0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x77, 0x78, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x77, 0x78, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xae,
	0x02, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72,
	0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x5b, 0x0a, 0x13, 0x53, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72,
	0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x09,
	0x53, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x22, 0x0a, 0x0a, 0x53, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x0c, 0x0a, 0x0a, 0x53, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x0f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72,
	0x79, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73,
	0x70, 0x6f, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x0f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74,
	0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x6c, 0x69, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x9b,
	0x01, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79,
	0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x18,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0xff, 0x0e, 0x0a, 0x12, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70,
	0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x18,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53,
	0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x1a,
	0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x53, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x73, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x1a, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x42, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72,
	0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x53, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x79, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x53, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x18, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x73,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x73, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70,
	0x6f, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1e,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x61, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x73,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79,
	0x73, 0x70, 0x6f, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72,
	0x79, 0x73, 0x70, 0x6f, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f,
	0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x53, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f,
	0x74, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x53, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1a, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x73, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73,
	0x70, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x42, 0x79, 0x49, 0x44,
	0x73, 0x12, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x53, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x1e, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x21, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x27, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_sceneryspot_proto_rawDescOnce sync.Once
	file_proto_sceneryspot_proto_rawDescData = file_proto_sceneryspot_proto_rawDesc
)

func file_proto_sceneryspot_proto_rawDescGZIP() []byte {
	file_proto_sceneryspot_proto_rawDescOnce.Do(func() {
		file_proto_sceneryspot_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_sceneryspot_proto_rawDescData)
	})
	return file_proto_sceneryspot_proto_rawDescData
}

var file_proto_sceneryspot_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_sceneryspot_proto_goTypes = []interface{}{
	(*Sceneryspot)(nil),              // 0: shenzhouyinji.Sceneryspot
	(*ServiceItem)(nil),              // 1: shenzhouyinji.ServiceItem
	(*Stamp)(nil),                    // 2: shenzhouyinji.Stamp
	(*UserStamp)(nil),                // 3: shenzhouyinji.UserStamp
	(*SsKeywordByCategory)(nil),      // 4: shenzhouyinji.SsKeywordByCategory
	(*SsKeyword)(nil),                // 5: shenzhouyinji.SsKeyword
	(*SsKeywords)(nil),               // 6: shenzhouyinji.SsKeywords
	(*SsEmptyReq)(nil),               // 7: shenzhouyinji.SsEmptyReq
	(*SsUpdateRes)(nil),              // 8: shenzhouyinji.SsUpdateRes
	(*SceneryspotsRes)(nil),          // 9: shenzhouyinji.SceneryspotsRes
	(*ServiceItemsRes)(nil),          // 10: shenzhouyinji.ServiceItemsRes
	(*StampsRes)(nil),                // 11: shenzhouyinji.StampsRes
	(*UserStampsRes)(nil),            // 12: shenzhouyinji.UserStampsRes
	(*UserSceneryspot)(nil),          // 13: shenzhouyinji.UserSceneryspot
	(*UserSceneryspotRequest)(nil),   // 14: shenzhouyinji.UserSceneryspotRequest
	(*UserSceneryspotResponse)(nil),  // 15: shenzhouyinji.UserSceneryspotResponse
	(*UserStampRequest)(nil),         // 16: shenzhouyinji.UserStampRequest
	(*UserStampRecord)(nil),          // 17: shenzhouyinji.UserStampRecord
	(*UserStampRecordReq)(nil),       // 18: shenzhouyinji.UserStampRecordReq
	(*UserStampPointsRecord)(nil),    // 19: shenzhouyinji.UserStampPointsRecord
	(*UserStampPointsRecordReq)(nil), // 20: shenzhouyinji.UserStampPointsRecordReq
	(*UserStampPointsRecordRes)(nil), // 21: shenzhouyinji.UserStampPointsRecordRes
}
var file_proto_sceneryspot_proto_depIdxs = []int32{
	0,  // 0: shenzhouyinji.SceneryspotsRes.data:type_name -> shenzhouyinji.Sceneryspot
	1,  // 1: shenzhouyinji.ServiceItemsRes.data:type_name -> shenzhouyinji.ServiceItem
	2,  // 2: shenzhouyinji.StampsRes.data:type_name -> shenzhouyinji.Stamp
	3,  // 3: shenzhouyinji.UserStampsRes.data:type_name -> shenzhouyinji.UserStamp
	0,  // 4: shenzhouyinji.UserSceneryspotResponse.data:type_name -> shenzhouyinji.Sceneryspot
	19, // 5: shenzhouyinji.UserStampPointsRecordRes.data:type_name -> shenzhouyinji.UserStampPointsRecord
	2,  // 6: shenzhouyinji.SceneryspotService.CreateStamp:input_type -> shenzhouyinji.Stamp
	2,  // 7: shenzhouyinji.SceneryspotService.UpdateStamp:input_type -> shenzhouyinji.Stamp
	5,  // 8: shenzhouyinji.SceneryspotService.GetStamp:input_type -> shenzhouyinji.SsKeyword
	5,  // 9: shenzhouyinji.SceneryspotService.GetStampsBySceneryspotID:input_type -> shenzhouyinji.SsKeyword
	3,  // 10: shenzhouyinji.SceneryspotService.CreateUserStamp:input_type -> shenzhouyinji.UserStamp
	3,  // 11: shenzhouyinji.SceneryspotService.UpdateUserStamp:input_type -> shenzhouyinji.UserStamp
	5,  // 12: shenzhouyinji.SceneryspotService.GetUserStampByUserID:input_type -> shenzhouyinji.SsKeyword
	5,  // 13: shenzhouyinji.SceneryspotService.GetUserStampByStampID:input_type -> shenzhouyinji.SsKeyword
	1,  // 14: shenzhouyinji.SceneryspotService.CreateServiceItem:input_type -> shenzhouyinji.ServiceItem
	1,  // 15: shenzhouyinji.SceneryspotService.UpdateServiceItem:input_type -> shenzhouyinji.ServiceItem
	5,  // 16: shenzhouyinji.SceneryspotService.GetServiceItem:input_type -> shenzhouyinji.SsKeyword
	5,  // 17: shenzhouyinji.SceneryspotService.GetServiceItemsBySceneryspotID:input_type -> shenzhouyinji.SsKeyword
	4,  // 18: shenzhouyinji.SceneryspotService.GetServiceItemsByCategory:input_type -> shenzhouyinji.SsKeywordByCategory
	0,  // 19: shenzhouyinji.SceneryspotService.CreateSceneryspot:input_type -> shenzhouyinji.Sceneryspot
	0,  // 20: shenzhouyinji.SceneryspotService.UpdateSceneryspot:input_type -> shenzhouyinji.Sceneryspot
	5,  // 21: shenzhouyinji.SceneryspotService.GetSceneryspot:input_type -> shenzhouyinji.SsKeyword
	7,  // 22: shenzhouyinji.SceneryspotService.GetSceneryspots:input_type -> shenzhouyinji.SsEmptyReq
	6,  // 23: shenzhouyinji.SceneryspotService.GetSceneryspotsByIDs:input_type -> shenzhouyinji.SsKeywords
	13, // 24: shenzhouyinji.SceneryspotService.CreateUserSceneryspot:input_type -> shenzhouyinji.UserSceneryspot
	14, // 25: shenzhouyinji.SceneryspotService.GetUserSceneryspots:input_type -> shenzhouyinji.UserSceneryspotRequest
	16, // 26: shenzhouyinji.SceneryspotService.GetUserStamp:input_type -> shenzhouyinji.UserStampRequest
	18, // 27: shenzhouyinji.SceneryspotService.UpdateUserStampRecord:input_type -> shenzhouyinji.UserStampRecordReq
	20, // 28: shenzhouyinji.SceneryspotService.GetUserStampPointsRecord:input_type -> shenzhouyinji.UserStampPointsRecordReq
	5,  // 29: shenzhouyinji.SceneryspotService.CreateStamp:output_type -> shenzhouyinji.SsKeyword
	8,  // 30: shenzhouyinji.SceneryspotService.UpdateStamp:output_type -> shenzhouyinji.SsUpdateRes
	2,  // 31: shenzhouyinji.SceneryspotService.GetStamp:output_type -> shenzhouyinji.Stamp
	11, // 32: shenzhouyinji.SceneryspotService.GetStampsBySceneryspotID:output_type -> shenzhouyinji.StampsRes
	12, // 33: shenzhouyinji.SceneryspotService.CreateUserStamp:output_type -> shenzhouyinji.UserStampsRes
	12, // 34: shenzhouyinji.SceneryspotService.UpdateUserStamp:output_type -> shenzhouyinji.UserStampsRes
	12, // 35: shenzhouyinji.SceneryspotService.GetUserStampByUserID:output_type -> shenzhouyinji.UserStampsRes
	12, // 36: shenzhouyinji.SceneryspotService.GetUserStampByStampID:output_type -> shenzhouyinji.UserStampsRes
	5,  // 37: shenzhouyinji.SceneryspotService.CreateServiceItem:output_type -> shenzhouyinji.SsKeyword
	8,  // 38: shenzhouyinji.SceneryspotService.UpdateServiceItem:output_type -> shenzhouyinji.SsUpdateRes
	1,  // 39: shenzhouyinji.SceneryspotService.GetServiceItem:output_type -> shenzhouyinji.ServiceItem
	10, // 40: shenzhouyinji.SceneryspotService.GetServiceItemsBySceneryspotID:output_type -> shenzhouyinji.ServiceItemsRes
	10, // 41: shenzhouyinji.SceneryspotService.GetServiceItemsByCategory:output_type -> shenzhouyinji.ServiceItemsRes
	5,  // 42: shenzhouyinji.SceneryspotService.CreateSceneryspot:output_type -> shenzhouyinji.SsKeyword
	8,  // 43: shenzhouyinji.SceneryspotService.UpdateSceneryspot:output_type -> shenzhouyinji.SsUpdateRes
	0,  // 44: shenzhouyinji.SceneryspotService.GetSceneryspot:output_type -> shenzhouyinji.Sceneryspot
	9,  // 45: shenzhouyinji.SceneryspotService.GetSceneryspots:output_type -> shenzhouyinji.SceneryspotsRes
	9,  // 46: shenzhouyinji.SceneryspotService.GetSceneryspotsByIDs:output_type -> shenzhouyinji.SceneryspotsRes
	15, // 47: shenzhouyinji.SceneryspotService.CreateUserSceneryspot:output_type -> shenzhouyinji.UserSceneryspotResponse
	15, // 48: shenzhouyinji.SceneryspotService.GetUserSceneryspots:output_type -> shenzhouyinji.UserSceneryspotResponse
	12, // 49: shenzhouyinji.SceneryspotService.GetUserStamp:output_type -> shenzhouyinji.UserStampsRes
	8,  // 50: shenzhouyinji.SceneryspotService.UpdateUserStampRecord:output_type -> shenzhouyinji.SsUpdateRes
	21, // 51: shenzhouyinji.SceneryspotService.GetUserStampPointsRecord:output_type -> shenzhouyinji.UserStampPointsRecordRes
	29, // [29:52] is the sub-list for method output_type
	6,  // [6:29] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_proto_sceneryspot_proto_init() }
func file_proto_sceneryspot_proto_init() {
	if File_proto_sceneryspot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_sceneryspot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sceneryspot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsKeywordByCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsKeyword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsKeywords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsEmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SsUpdateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneryspotsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceItemsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StampsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStampsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSceneryspot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSceneryspotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSceneryspotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStampRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStampRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStampRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStampPointsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStampPointsRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sceneryspot_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStampPointsRecordRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_sceneryspot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_sceneryspot_proto_goTypes,
		DependencyIndexes: file_proto_sceneryspot_proto_depIdxs,
		MessageInfos:      file_proto_sceneryspot_proto_msgTypes,
	}.Build()
	File_proto_sceneryspot_proto = out.File
	file_proto_sceneryspot_proto_rawDesc = nil
	file_proto_sceneryspot_proto_goTypes = nil
	file_proto_sceneryspot_proto_depIdxs = nil
}
