// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: proto/event.proto

package shenzhouyinji

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartTime    int32  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int32  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Introduction string `protobuf:"bytes,5,opt,name=introduction,proto3" json:"introduction,omitempty"`
	Images       string `protobuf:"bytes,6,opt,name=images,proto3" json:"images,omitempty"`
	Step         string `protobuf:"bytes,7,opt,name=step,proto3" json:"step,omitempty"`
	Status       int32  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime   int32  `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Code         string `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	EnableAward  bool   `protobuf:"varint,11,opt,name=enable_award,json=enableAward,proto3" json:"enable_award,omitempty"`
	CategoryId   string `protobuf:"bytes,12,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Event) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Event) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Event) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Event) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *Event) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Event) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Event) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Event) GetEnableAward() bool {
	if x != nil {
		return x.EnableAward
	}
	return false
}

func (x *Event) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type EventScenerySpots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ScenerySpotId string `protobuf:"bytes,2,opt,name=scenery_spot_id,json=scenerySpotId,proto3" json:"scenery_spot_id,omitempty"`
}

func (x *EventScenerySpots) Reset() {
	*x = EventScenerySpots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventScenerySpots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventScenerySpots) ProtoMessage() {}

func (x *EventScenerySpots) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventScenerySpots.ProtoReflect.Descriptor instead.
func (*EventScenerySpots) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{1}
}

func (x *EventScenerySpots) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventScenerySpots) GetScenerySpotId() string {
	if x != nil {
		return x.ScenerySpotId
	}
	return ""
}

type Badge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Images  string `protobuf:"bytes,4,opt,name=images,proto3" json:"images,omitempty"`
}

func (x *Badge) Reset() {
	*x = Badge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Badge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Badge) ProtoMessage() {}

func (x *Badge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Badge.ProtoReflect.Descriptor instead.
func (*Badge) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{2}
}

func (x *Badge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Badge) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Badge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Badge) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

type UserBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BadgeId string `protobuf:"bytes,2,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UserBadge) Reset() {
	*x = UserBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBadge) ProtoMessage() {}

func (x *UserBadge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBadge.ProtoReflect.Descriptor instead.
func (*UserBadge) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{3}
}

func (x *UserBadge) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserBadge) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

func (x *UserBadge) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UserBadgeSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BadgeId    string `protobuf:"bytes,2,opt,name=badge_id,json=badgeId,proto3" json:"badge_id,omitempty"`
	From       string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To         string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	PreviousId string `protobuf:"bytes,5,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"`
	City       string `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	Content    string `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	Status     int32  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime int32  `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *UserBadgeSwap) Reset() {
	*x = UserBadgeSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBadgeSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBadgeSwap) ProtoMessage() {}

func (x *UserBadgeSwap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBadgeSwap.ProtoReflect.Descriptor instead.
func (*UserBadgeSwap) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{4}
}

func (x *UserBadgeSwap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserBadgeSwap) GetBadgeId() string {
	if x != nil {
		return x.BadgeId
	}
	return ""
}

func (x *UserBadgeSwap) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *UserBadgeSwap) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *UserBadgeSwap) GetPreviousId() string {
	if x != nil {
		return x.PreviousId
	}
	return ""
}

func (x *UserBadgeSwap) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UserBadgeSwap) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UserBadgeSwap) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserBadgeSwap) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type PassportSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId  string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Status   int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Quantity int32  `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Issued   int32  `protobuf:"varint,6,opt,name=issued,proto3" json:"issued,omitempty"`
}

func (x *PassportSet) Reset() {
	*x = PassportSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassportSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassportSet) ProtoMessage() {}

func (x *PassportSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassportSet.ProtoReflect.Descriptor instead.
func (*PassportSet) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{5}
}

func (x *PassportSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PassportSet) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *PassportSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PassportSet) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PassportSet) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PassportSet) GetIssued() int32 {
	if x != nil {
		return x.Issued
	}
	return 0
}

type Passport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PassportSetId string `protobuf:"bytes,2,opt,name=passport_set_id,json=passportSetId,proto3" json:"passport_set_id,omitempty"`
	Code          string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Status        int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Passport) Reset() {
	*x = Passport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Passport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Passport) ProtoMessage() {}

func (x *Passport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Passport.ProtoReflect.Descriptor instead.
func (*Passport) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{6}
}

func (x *Passport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Passport) GetPassportSetId() string {
	if x != nil {
		return x.PassportSetId
	}
	return ""
}

func (x *Passport) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Passport) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UserPassport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId        string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	PassportCode   string `protobuf:"bytes,4,opt,name=passport_code,json=passportCode,proto3" json:"passport_code,omitempty"`
	RealName       string `protobuf:"bytes,5,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Nric           string `protobuf:"bytes,6,opt,name=nric,proto3" json:"nric,omitempty"`
	Phone          string `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Gender         string `protobuf:"bytes,8,opt,name=gender,proto3" json:"gender,omitempty"`
	Profession     string `protobuf:"bytes,9,opt,name=profession,proto3" json:"profession,omitempty"`
	ClaimCode      string `protobuf:"bytes,10,opt,name=claim_code,json=claimCode,proto3" json:"claim_code,omitempty"`
	Authentication bool   `protobuf:"varint,11,opt,name=authentication,proto3" json:"authentication,omitempty"`
	GuardianName   string `protobuf:"bytes,12,opt,name=guardian_name,json=guardianName,proto3" json:"guardian_name,omitempty"`
	GuardianNric   string `protobuf:"bytes,13,opt,name=guardian_nric,json=guardianNric,proto3" json:"guardian_nric,omitempty"`
	GuardianPhone  string `protobuf:"bytes,15,opt,name=guardian_phone,json=guardianPhone,proto3" json:"guardian_phone,omitempty"`
	ClaimBy        string `protobuf:"bytes,16,opt,name=claim_by,json=claimBy,proto3" json:"claim_by,omitempty"`
	ClaimTime      int32  `protobuf:"varint,17,opt,name=claim_time,json=claimTime,proto3" json:"claim_time,omitempty"`
	Status         int32  `protobuf:"varint,18,opt,name=status,proto3" json:"status,omitempty"`
	UserCampId     string `protobuf:"bytes,19,opt,name=user_camp_id,json=userCampId,proto3" json:"user_camp_id,omitempty"`
	CreateTime     int32  `protobuf:"varint,20,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *UserPassport) Reset() {
	*x = UserPassport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPassport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPassport) ProtoMessage() {}

func (x *UserPassport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPassport.ProtoReflect.Descriptor instead.
func (*UserPassport) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{7}
}

func (x *UserPassport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserPassport) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPassport) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserPassport) GetPassportCode() string {
	if x != nil {
		return x.PassportCode
	}
	return ""
}

func (x *UserPassport) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *UserPassport) GetNric() string {
	if x != nil {
		return x.Nric
	}
	return ""
}

func (x *UserPassport) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserPassport) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserPassport) GetProfession() string {
	if x != nil {
		return x.Profession
	}
	return ""
}

func (x *UserPassport) GetClaimCode() string {
	if x != nil {
		return x.ClaimCode
	}
	return ""
}

func (x *UserPassport) GetAuthentication() bool {
	if x != nil {
		return x.Authentication
	}
	return false
}

func (x *UserPassport) GetGuardianName() string {
	if x != nil {
		return x.GuardianName
	}
	return ""
}

func (x *UserPassport) GetGuardianNric() string {
	if x != nil {
		return x.GuardianNric
	}
	return ""
}

func (x *UserPassport) GetGuardianPhone() string {
	if x != nil {
		return x.GuardianPhone
	}
	return ""
}

func (x *UserPassport) GetClaimBy() string {
	if x != nil {
		return x.ClaimBy
	}
	return ""
}

func (x *UserPassport) GetClaimTime() int32 {
	if x != nil {
		return x.ClaimTime
	}
	return 0
}

func (x *UserPassport) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserPassport) GetUserCampId() string {
	if x != nil {
		return x.UserCampId
	}
	return ""
}

func (x *UserPassport) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type Camp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId      string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Images       string `protobuf:"bytes,4,opt,name=images,proto3" json:"images,omitempty"`
	Introduction string `protobuf:"bytes,5,opt,name=introduction,proto3" json:"introduction,omitempty"`
	Points       int32  `protobuf:"varint,6,opt,name=points,proto3" json:"points,omitempty"`
	Status       int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	CategoryId   string `protobuf:"bytes,8,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *Camp) Reset() {
	*x = Camp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Camp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Camp) ProtoMessage() {}

func (x *Camp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Camp.ProtoReflect.Descriptor instead.
func (*Camp) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{8}
}

func (x *Camp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Camp) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Camp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Camp) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Camp) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Camp) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Camp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Camp) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type Honour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CampId    string `protobuf:"bytes,2,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Images    string `protobuf:"bytes,4,opt,name=images,proto3" json:"images,omitempty"`
	MinPoints int32  `protobuf:"varint,5,opt,name=min_points,json=minPoints,proto3" json:"min_points,omitempty"`
	MaxPoints int32  `protobuf:"varint,6,opt,name=max_points,json=maxPoints,proto3" json:"max_points,omitempty"`
	Status    int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Honour) Reset() {
	*x = Honour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Honour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Honour) ProtoMessage() {}

func (x *Honour) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Honour.ProtoReflect.Descriptor instead.
func (*Honour) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{9}
}

func (x *Honour) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Honour) GetCampId() string {
	if x != nil {
		return x.CampId
	}
	return ""
}

func (x *Honour) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Honour) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Honour) GetMinPoints() int32 {
	if x != nil {
		return x.MinPoints
	}
	return 0
}

func (x *Honour) GetMaxPoints() int32 {
	if x != nil {
		return x.MaxPoints
	}
	return 0
}

func (x *Honour) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UserCamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CampId     string `protobuf:"bytes,3,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	EventId    string `protobuf:"bytes,4,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	PassportId string `protobuf:"bytes,5,opt,name=passport_id,json=passportId,proto3" json:"passport_id,omitempty"`
	Honour     string `protobuf:"bytes,6,opt,name=honour,proto3" json:"honour,omitempty"`
	Points     int32  `protobuf:"varint,7,opt,name=points,proto3" json:"points,omitempty"`
	StampCount int32  `protobuf:"varint,8,opt,name=stamp_count,json=stampCount,proto3" json:"stamp_count,omitempty"`
	Status     int32  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime int32  `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *UserCamp) Reset() {
	*x = UserCamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCamp) ProtoMessage() {}

func (x *UserCamp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCamp.ProtoReflect.Descriptor instead.
func (*UserCamp) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{10}
}

func (x *UserCamp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserCamp) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserCamp) GetCampId() string {
	if x != nil {
		return x.CampId
	}
	return ""
}

func (x *UserCamp) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserCamp) GetPassportId() string {
	if x != nil {
		return x.PassportId
	}
	return ""
}

func (x *UserCamp) GetHonour() string {
	if x != nil {
		return x.Honour
	}
	return ""
}

func (x *UserCamp) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *UserCamp) GetStampCount() int32 {
	if x != nil {
		return x.StampCount
	}
	return 0
}

func (x *UserCamp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserCamp) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type EsEmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EsEmptyReq) Reset() {
	*x = EsEmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsEmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsEmptyReq) ProtoMessage() {}

func (x *EsEmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsEmptyReq.ProtoReflect.Descriptor instead.
func (*EsEmptyReq) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{11}
}

type EsKeyword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EsKeyword) Reset() {
	*x = EsKeyword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsKeyword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsKeyword) ProtoMessage() {}

func (x *EsKeyword) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsKeyword.ProtoReflect.Descriptor instead.
func (*EsKeyword) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{12}
}

func (x *EsKeyword) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type EsUpdateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EsUpdateRes) Reset() {
	*x = EsUpdateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EsUpdateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EsUpdateRes) ProtoMessage() {}

func (x *EsUpdateRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EsUpdateRes.ProtoReflect.Descriptor instead.
func (*EsUpdateRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{13}
}

func (x *EsUpdateRes) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type EventsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Event `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *EventsRes) Reset() {
	*x = EventsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRes) ProtoMessage() {}

func (x *EventsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsRes.ProtoReflect.Descriptor instead.
func (*EventsRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{14}
}

func (x *EventsRes) GetData() []*Event {
	if x != nil {
		return x.Data
	}
	return nil
}

type HonoursRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Honour `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *HonoursRes) Reset() {
	*x = HonoursRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HonoursRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HonoursRes) ProtoMessage() {}

func (x *HonoursRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HonoursRes.ProtoReflect.Descriptor instead.
func (*HonoursRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{15}
}

func (x *HonoursRes) GetData() []*Honour {
	if x != nil {
		return x.Data
	}
	return nil
}

type EventScenerySpotsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*EventScenerySpots `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *EventScenerySpotsRes) Reset() {
	*x = EventScenerySpotsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventScenerySpotsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventScenerySpotsRes) ProtoMessage() {}

func (x *EventScenerySpotsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventScenerySpotsRes.ProtoReflect.Descriptor instead.
func (*EventScenerySpotsRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{16}
}

func (x *EventScenerySpotsRes) GetData() []*EventScenerySpots {
	if x != nil {
		return x.Data
	}
	return nil
}

type CampWithUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *CampWithUserRequest) Reset() {
	*x = CampWithUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampWithUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampWithUserRequest) ProtoMessage() {}

func (x *CampWithUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampWithUserRequest.ProtoReflect.Descriptor instead.
func (*CampWithUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{17}
}

func (x *CampWithUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CampWithUserRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type CampsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Camp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CampsRes) Reset() {
	*x = CampsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampsRes) ProtoMessage() {}

func (x *CampsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampsRes.ProtoReflect.Descriptor instead.
func (*CampsRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{18}
}

func (x *CampsRes) GetData() []*Camp {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserCampsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserCamp `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserCampsRes) Reset() {
	*x = UserCampsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCampsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCampsRes) ProtoMessage() {}

func (x *UserCampsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCampsRes.ProtoReflect.Descriptor instead.
func (*UserCampsRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{19}
}

func (x *UserCampsRes) GetData() []*UserCamp {
	if x != nil {
		return x.Data
	}
	return nil
}

type BadgesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Badge `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BadgesRes) Reset() {
	*x = BadgesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgesRes) ProtoMessage() {}

func (x *BadgesRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgesRes.ProtoReflect.Descriptor instead.
func (*BadgesRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{20}
}

func (x *BadgesRes) GetData() []*Badge {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserBadgesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserBadge `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserBadgesRes) Reset() {
	*x = UserBadgesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBadgesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBadgesRes) ProtoMessage() {}

func (x *UserBadgesRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBadgesRes.ProtoReflect.Descriptor instead.
func (*UserBadgesRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{21}
}

func (x *UserBadgesRes) GetData() []*UserBadge {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserBadgeSwapsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserBadgeSwap `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserBadgeSwapsRes) Reset() {
	*x = UserBadgeSwapsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBadgeSwapsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBadgeSwapsRes) ProtoMessage() {}

func (x *UserBadgeSwapsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBadgeSwapsRes.ProtoReflect.Descriptor instead.
func (*UserBadgeSwapsRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{22}
}

func (x *UserBadgeSwapsRes) GetData() []*UserBadgeSwap {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserPassportsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserPassport `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserPassportsRes) Reset() {
	*x = UserPassportsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPassportsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPassportsRes) ProtoMessage() {}

func (x *UserPassportsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPassportsRes.ProtoReflect.Descriptor instead.
func (*UserPassportsRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{23}
}

func (x *UserPassportsRes) GetData() []*UserPassport {
	if x != nil {
		return x.Data
	}
	return nil
}

type PassportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Offset  int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PassportRequest) Reset() {
	*x = PassportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassportRequest) ProtoMessage() {}

func (x *PassportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassportRequest.ProtoReflect.Descriptor instead.
func (*PassportRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{24}
}

func (x *PassportRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *PassportRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PassportRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PassportRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type PassportResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId       string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Code          string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	RealName      string `protobuf:"bytes,4,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Nric          string `protobuf:"bytes,5,opt,name=nric,proto3" json:"nric,omitempty"`
	Phone         string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	GuardianName  string `protobuf:"bytes,7,opt,name=guardian_name,json=guardianName,proto3" json:"guardian_name,omitempty"`
	GuardianNric  string `protobuf:"bytes,8,opt,name=guardian_nric,json=guardianNric,proto3" json:"guardian_nric,omitempty"`
	GuardianPhone string `protobuf:"bytes,9,opt,name=guardian_phone,json=guardianPhone,proto3" json:"guardian_phone,omitempty"`
}

func (x *PassportResult) Reset() {
	*x = PassportResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassportResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassportResult) ProtoMessage() {}

func (x *PassportResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassportResult.ProtoReflect.Descriptor instead.
func (*PassportResult) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{25}
}

func (x *PassportResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PassportResult) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *PassportResult) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PassportResult) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *PassportResult) GetNric() string {
	if x != nil {
		return x.Nric
	}
	return ""
}

func (x *PassportResult) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PassportResult) GetGuardianName() string {
	if x != nil {
		return x.GuardianName
	}
	return ""
}

func (x *PassportResult) GetGuardianNric() string {
	if x != nil {
		return x.GuardianNric
	}
	return ""
}

func (x *PassportResult) GetGuardianPhone() string {
	if x != nil {
		return x.GuardianPhone
	}
	return ""
}

type SearchPassportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Limit  int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SearchPassportRequest) Reset() {
	*x = SearchPassportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPassportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPassportRequest) ProtoMessage() {}

func (x *SearchPassportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPassportRequest.ProtoReflect.Descriptor instead.
func (*SearchPassportRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{26}
}

func (x *SearchPassportRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *SearchPassportRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SearchPassportRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchPassportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PassportResult `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SearchPassportResponse) Reset() {
	*x = SearchPassportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchPassportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPassportResponse) ProtoMessage() {}

func (x *SearchPassportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPassportResponse.ProtoReflect.Descriptor instead.
func (*SearchPassportResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{27}
}

func (x *SearchPassportResponse) GetData() []*PassportResult {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeletePassportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DeletePassportRequest) Reset() {
	*x = DeletePassportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePassportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePassportRequest) ProtoMessage() {}

func (x *DeletePassportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePassportRequest.ProtoReflect.Descriptor instead.
func (*DeletePassportRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{28}
}

func (x *DeletePassportRequest) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type PassportsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Passport `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PassportsRes) Reset() {
	*x = PassportsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassportsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassportsRes) ProtoMessage() {}

func (x *PassportsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassportsRes.ProtoReflect.Descriptor instead.
func (*PassportsRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{29}
}

func (x *PassportsRes) GetData() []*Passport {
	if x != nil {
		return x.Data
	}
	return nil
}

type PassportSetsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PassportSet `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PassportSetsRes) Reset() {
	*x = PassportSetsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassportSetsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassportSetsRes) ProtoMessage() {}

func (x *PassportSetsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassportSetsRes.ProtoReflect.Descriptor instead.
func (*PassportSetsRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{30}
}

func (x *PassportSetsRes) GetData() []*PassportSet {
	if x != nil {
		return x.Data
	}
	return nil
}

type PickupPassportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId    string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	RealName   string `protobuf:"bytes,3,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Nric       string `protobuf:"bytes,4,opt,name=nric,proto3" json:"nric,omitempty"`
	Phone      string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Gender     string `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"`
	Profession string `protobuf:"bytes,7,opt,name=profession,proto3" json:"profession,omitempty"`
	Age        int32  `protobuf:"varint,8,opt,name=age,proto3" json:"age,omitempty"`
}

func (x *PickupPassportReq) Reset() {
	*x = PickupPassportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickupPassportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickupPassportReq) ProtoMessage() {}

func (x *PickupPassportReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickupPassportReq.ProtoReflect.Descriptor instead.
func (*PickupPassportReq) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{31}
}

func (x *PickupPassportReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PickupPassportReq) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *PickupPassportReq) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *PickupPassportReq) GetNric() string {
	if x != nil {
		return x.Nric
	}
	return ""
}

func (x *PickupPassportReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PickupPassportReq) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *PickupPassportReq) GetProfession() string {
	if x != nil {
		return x.Profession
	}
	return ""
}

func (x *PickupPassportReq) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

type GuardianInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GuardianName  string `protobuf:"bytes,2,opt,name=guardian_name,json=guardianName,proto3" json:"guardian_name,omitempty"`
	GuardianNric  string `protobuf:"bytes,3,opt,name=guardian_nric,json=guardianNric,proto3" json:"guardian_nric,omitempty"`
	GuardianPhone string `protobuf:"bytes,4,opt,name=guardian_phone,json=guardianPhone,proto3" json:"guardian_phone,omitempty"`
}

func (x *GuardianInfoReq) Reset() {
	*x = GuardianInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardianInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardianInfoReq) ProtoMessage() {}

func (x *GuardianInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardianInfoReq.ProtoReflect.Descriptor instead.
func (*GuardianInfoReq) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{32}
}

func (x *GuardianInfoReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GuardianInfoReq) GetGuardianName() string {
	if x != nil {
		return x.GuardianName
	}
	return ""
}

func (x *GuardianInfoReq) GetGuardianNric() string {
	if x != nil {
		return x.GuardianNric
	}
	return ""
}

func (x *GuardianInfoReq) GetGuardianPhone() string {
	if x != nil {
		return x.GuardianPhone
	}
	return ""
}

type VerifyPassportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Verify bool   `protobuf:"varint,2,opt,name=verify,proto3" json:"verify,omitempty"`
}

func (x *VerifyPassportReq) Reset() {
	*x = VerifyPassportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyPassportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPassportReq) ProtoMessage() {}

func (x *VerifyPassportReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPassportReq.ProtoReflect.Descriptor instead.
func (*VerifyPassportReq) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{33}
}

func (x *VerifyPassportReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VerifyPassportReq) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

type PickupCodeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RealName       string `protobuf:"bytes,2,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Nric           string `protobuf:"bytes,3,opt,name=nric,proto3" json:"nric,omitempty"`
	Phone          string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Authentication bool   `protobuf:"varint,5,opt,name=authentication,proto3" json:"authentication,omitempty"`
	Status         int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PickupCodeRes) Reset() {
	*x = PickupCodeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickupCodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickupCodeRes) ProtoMessage() {}

func (x *PickupCodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickupCodeRes.ProtoReflect.Descriptor instead.
func (*PickupCodeRes) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{34}
}

func (x *PickupCodeRes) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PickupCodeRes) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *PickupCodeRes) GetNric() string {
	if x != nil {
		return x.Nric
	}
	return ""
}

func (x *PickupCodeRes) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PickupCodeRes) GetAuthentication() bool {
	if x != nil {
		return x.Authentication
	}
	return false
}

func (x *PickupCodeRes) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ActivatePassportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId      string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	PassportCode string `protobuf:"bytes,3,opt,name=passport_code,json=passportCode,proto3" json:"passport_code,omitempty"`
}

func (x *ActivatePassportReq) Reset() {
	*x = ActivatePassportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivatePassportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatePassportReq) ProtoMessage() {}

func (x *ActivatePassportReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivatePassportReq.ProtoReflect.Descriptor instead.
func (*ActivatePassportReq) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{35}
}

func (x *ActivatePassportReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ActivatePassportReq) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *ActivatePassportReq) GetPassportCode() string {
	if x != nil {
		return x.PassportCode
	}
	return ""
}

type UserEventPassportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID,omitempty"`
	EventID string `protobuf:"bytes,2,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Phone   string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *UserEventPassportRequest) Reset() {
	*x = UserEventPassportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventPassportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventPassportRequest) ProtoMessage() {}

func (x *UserEventPassportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventPassportRequest.ProtoReflect.Descriptor instead.
func (*UserEventPassportRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{36}
}

func (x *UserEventPassportRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserEventPassportRequest) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *UserEventPassportRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type UserEventPassportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserPassport `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserEventPassportResponse) Reset() {
	*x = UserEventPassportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventPassportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventPassportResponse) ProtoMessage() {}

func (x *UserEventPassportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventPassportResponse.ProtoReflect.Descriptor instead.
func (*UserEventPassportResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{37}
}

func (x *UserEventPassportResponse) GetData() []*UserPassport {
	if x != nil {
		return x.Data
	}
	return nil
}

type PassportStock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID        string `protobuf:"bytes,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	EventName      string `protobuf:"bytes,2,opt,name=eventName,proto3" json:"eventName,omitempty"`
	Total          int32  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	IssuedCount    int32  `protobuf:"varint,4,opt,name=issuedCount,proto3" json:"issuedCount,omitempty"`
	UsedCount      int32  `protobuf:"varint,5,opt,name=usedCount,proto3" json:"usedCount,omitempty"`
	AvailableCount int32  `protobuf:"varint,6,opt,name=availableCount,proto3" json:"availableCount,omitempty"`
}

func (x *PassportStock) Reset() {
	*x = PassportStock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassportStock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassportStock) ProtoMessage() {}

func (x *PassportStock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassportStock.ProtoReflect.Descriptor instead.
func (*PassportStock) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{38}
}

func (x *PassportStock) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *PassportStock) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *PassportStock) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PassportStock) GetIssuedCount() int32 {
	if x != nil {
		return x.IssuedCount
	}
	return 0
}

func (x *PassportStock) GetUsedCount() int32 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *PassportStock) GetAvailableCount() int32 {
	if x != nil {
		return x.AvailableCount
	}
	return 0
}

type PassportStocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PassportStocksRequest) Reset() {
	*x = PassportStocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassportStocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassportStocksRequest) ProtoMessage() {}

func (x *PassportStocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassportStocksRequest.ProtoReflect.Descriptor instead.
func (*PassportStocksRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{39}
}

type PassportStocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PassportStock `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PassportStocksResponse) Reset() {
	*x = PassportStocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassportStocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassportStocksResponse) ProtoMessage() {}

func (x *PassportStocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassportStocksResponse.ProtoReflect.Descriptor instead.
func (*PassportStocksResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{40}
}

func (x *PassportStocksResponse) GetData() []*PassportStock {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserPassportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nric  string `protobuf:"bytes,2,opt,name=nric,proto3" json:"nric,omitempty"`
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *UserPassportRequest) Reset() {
	*x = UserPassportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPassportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPassportRequest) ProtoMessage() {}

func (x *UserPassportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPassportRequest.ProtoReflect.Descriptor instead.
func (*UserPassportRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{41}
}

func (x *UserPassportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserPassportRequest) GetNric() string {
	if x != nil {
		return x.Nric
	}
	return ""
}

func (x *UserPassportRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type CreateUserEventPassportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateUserEventPassportResponse) Reset() {
	*x = CreateUserEventPassportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserEventPassportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserEventPassportResponse) ProtoMessage() {}

func (x *CreateUserEventPassportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserEventPassportResponse.ProtoReflect.Descriptor instead.
func (*CreateUserEventPassportResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{42}
}

func (x *CreateUserEventPassportResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateUserEventPassportResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UserEventPassport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId      string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	PassportCode string `protobuf:"bytes,4,opt,name=passport_code,json=passportCode,proto3" json:"passport_code,omitempty"`
	ClaimBy      string `protobuf:"bytes,5,opt,name=claim_by,json=claimBy,proto3" json:"claim_by,omitempty"`
	ClaimTime    int32  `protobuf:"varint,6,opt,name=claim_time,json=claimTime,proto3" json:"claim_time,omitempty"`
	Status       int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UserEventPassport) Reset() {
	*x = UserEventPassport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventPassport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventPassport) ProtoMessage() {}

func (x *UserEventPassport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventPassport.ProtoReflect.Descriptor instead.
func (*UserEventPassport) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{43}
}

func (x *UserEventPassport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserEventPassport) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserEventPassport) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserEventPassport) GetPassportCode() string {
	if x != nil {
		return x.PassportCode
	}
	return ""
}

func (x *UserEventPassport) GetClaimBy() string {
	if x != nil {
		return x.ClaimBy
	}
	return ""
}

func (x *UserEventPassport) GetClaimTime() int32 {
	if x != nil {
		return x.ClaimTime
	}
	return 0
}

func (x *UserEventPassport) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type ActivateUserEventPassportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EvnetId      string `protobuf:"bytes,3,opt,name=evnet_id,json=evnetId,proto3" json:"evnet_id,omitempty"`
	PassportCode string `protobuf:"bytes,4,opt,name=passport_code,json=passportCode,proto3" json:"passport_code,omitempty"`
	ClaimBy      string `protobuf:"bytes,5,opt,name=claim_by,json=claimBy,proto3" json:"claim_by,omitempty"`
	ClaimTime    int32  `protobuf:"varint,6,opt,name=claim_time,json=claimTime,proto3" json:"claim_time,omitempty"`
}

func (x *ActivateUserEventPassportRequest) Reset() {
	*x = ActivateUserEventPassportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateUserEventPassportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateUserEventPassportRequest) ProtoMessage() {}

func (x *ActivateUserEventPassportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateUserEventPassportRequest.ProtoReflect.Descriptor instead.
func (*ActivateUserEventPassportRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{44}
}

func (x *ActivateUserEventPassportRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActivateUserEventPassportRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ActivateUserEventPassportRequest) GetEvnetId() string {
	if x != nil {
		return x.EvnetId
	}
	return ""
}

func (x *ActivateUserEventPassportRequest) GetPassportCode() string {
	if x != nil {
		return x.PassportCode
	}
	return ""
}

func (x *ActivateUserEventPassportRequest) GetClaimBy() string {
	if x != nil {
		return x.ClaimBy
	}
	return ""
}

func (x *ActivateUserEventPassportRequest) GetClaimTime() int32 {
	if x != nil {
		return x.ClaimTime
	}
	return 0
}

type ActivateUserEventPassportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserEventPassport `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ActivateUserEventPassportResponse) Reset() {
	*x = ActivateUserEventPassportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateUserEventPassportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateUserEventPassportResponse) ProtoMessage() {}

func (x *ActivateUserEventPassportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateUserEventPassportResponse.ProtoReflect.Descriptor instead.
func (*ActivateUserEventPassportResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{45}
}

func (x *ActivateUserEventPassportResponse) GetData() []*UserEventPassport {
	if x != nil {
		return x.Data
	}
	return nil
}

type EventUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId    string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	UserId     string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName   string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserWechat string `protobuf:"bytes,5,opt,name=user_wechat,json=userWechat,proto3" json:"user_wechat,omitempty"`
	CampId     string `protobuf:"bytes,6,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	CampName   string `protobuf:"bytes,7,opt,name=camp_name,json=campName,proto3" json:"camp_name,omitempty"`
	Points     int32  `protobuf:"varint,8,opt,name=points,proto3" json:"points,omitempty"`
	StampCount int32  `protobuf:"varint,9,opt,name=stamp_count,json=stampCount,proto3" json:"stamp_count,omitempty"`
	City       string `protobuf:"bytes,10,opt,name=city,proto3" json:"city,omitempty"`
	Email      string `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	Phone      string `protobuf:"bytes,12,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *EventUser) Reset() {
	*x = EventUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUser) ProtoMessage() {}

func (x *EventUser) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUser.ProtoReflect.Descriptor instead.
func (*EventUser) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{46}
}

func (x *EventUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventUser) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *EventUser) GetUserWechat() string {
	if x != nil {
		return x.UserWechat
	}
	return ""
}

func (x *EventUser) GetCampId() string {
	if x != nil {
		return x.CampId
	}
	return ""
}

func (x *EventUser) GetCampName() string {
	if x != nil {
		return x.CampName
	}
	return ""
}

func (x *EventUser) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *EventUser) GetStampCount() int32 {
	if x != nil {
		return x.StampCount
	}
	return 0
}

func (x *EventUser) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *EventUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *EventUser) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type EventUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Camps        []string `protobuf:"bytes,2,rep,name=camps,proto3" json:"camps,omitempty"`
	Sceneryppots []string `protobuf:"bytes,3,rep,name=sceneryppots,proto3" json:"sceneryppots,omitempty"`
}

func (x *EventUserRequest) Reset() {
	*x = EventUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUserRequest) ProtoMessage() {}

func (x *EventUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUserRequest.ProtoReflect.Descriptor instead.
func (*EventUserRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{47}
}

func (x *EventUserRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventUserRequest) GetCamps() []string {
	if x != nil {
		return x.Camps
	}
	return nil
}

func (x *EventUserRequest) GetSceneryppots() []string {
	if x != nil {
		return x.Sceneryppots
	}
	return nil
}

type EventUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*EventUser `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *EventUserResponse) Reset() {
	*x = EventUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUserResponse) ProtoMessage() {}

func (x *EventUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUserResponse.ProtoReflect.Descriptor instead.
func (*EventUserResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{48}
}

func (x *EventUserResponse) GetData() []*EventUser {
	if x != nil {
		return x.Data
	}
	return nil
}

type EventUserPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId    string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Points     int32  `protobuf:"varint,3,opt,name=points,proto3" json:"points,omitempty"`
	CampId     string `protobuf:"bytes,4,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	CampPoints int32  `protobuf:"varint,5,opt,name=camp_points,json=campPoints,proto3" json:"camp_points,omitempty"`
}

func (x *EventUserPoints) Reset() {
	*x = EventUserPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventUserPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUserPoints) ProtoMessage() {}

func (x *EventUserPoints) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUserPoints.ProtoReflect.Descriptor instead.
func (*EventUserPoints) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{49}
}

func (x *EventUserPoints) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventUserPoints) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventUserPoints) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *EventUserPoints) GetCampId() string {
	if x != nil {
		return x.CampId
	}
	return ""
}

func (x *EventUserPoints) GetCampPoints() int32 {
	if x != nil {
		return x.CampPoints
	}
	return 0
}

type EventUserPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *EventUser `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EventUserPointsResponse) Reset() {
	*x = EventUserPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventUserPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUserPointsResponse) ProtoMessage() {}

func (x *EventUserPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUserPointsResponse.ProtoReflect.Descriptor instead.
func (*EventUserPointsResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{50}
}

func (x *EventUserPointsResponse) GetData() *EventUser {
	if x != nil {
		return x.Data
	}
	return nil
}

type EventTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName     string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserWechat   string `protobuf:"bytes,4,opt,name=user_wechat,json=userWechat,proto3" json:"user_wechat,omitempty"`
	CampId       string `protobuf:"bytes,5,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	CampName     string `protobuf:"bytes,6,opt,name=camp_name,json=campName,proto3" json:"camp_name,omitempty"`
	TaskId       string `protobuf:"bytes,7,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskCategory string `protobuf:"bytes,8,opt,name=task_category,json=taskCategory,proto3" json:"task_category,omitempty"`
	Points       int32  `protobuf:"varint,9,opt,name=points,proto3" json:"points,omitempty"`
	Result       string `protobuf:"bytes,10,opt,name=result,proto3" json:"result,omitempty"`
	Status       int32  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	Audit        string `protobuf:"bytes,12,opt,name=audit,proto3" json:"audit,omitempty"`
	CreateTime   int32  `protobuf:"varint,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *EventTask) Reset() {
	*x = EventTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTask) ProtoMessage() {}

func (x *EventTask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTask.ProtoReflect.Descriptor instead.
func (*EventTask) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{51}
}

func (x *EventTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventTask) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventTask) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *EventTask) GetUserWechat() string {
	if x != nil {
		return x.UserWechat
	}
	return ""
}

func (x *EventTask) GetCampId() string {
	if x != nil {
		return x.CampId
	}
	return ""
}

func (x *EventTask) GetCampName() string {
	if x != nil {
		return x.CampName
	}
	return ""
}

func (x *EventTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *EventTask) GetTaskCategory() string {
	if x != nil {
		return x.TaskCategory
	}
	return ""
}

func (x *EventTask) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *EventTask) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *EventTask) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EventTask) GetAudit() string {
	if x != nil {
		return x.Audit
	}
	return ""
}

func (x *EventTask) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type EventTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Camps        []string `protobuf:"bytes,2,rep,name=camps,proto3" json:"camps,omitempty"`
	Sceneryppots []string `protobuf:"bytes,3,rep,name=sceneryppots,proto3" json:"sceneryppots,omitempty"`
}

func (x *EventTaskRequest) Reset() {
	*x = EventTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTaskRequest) ProtoMessage() {}

func (x *EventTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTaskRequest.ProtoReflect.Descriptor instead.
func (*EventTaskRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{52}
}

func (x *EventTaskRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventTaskRequest) GetCamps() []string {
	if x != nil {
		return x.Camps
	}
	return nil
}

func (x *EventTaskRequest) GetSceneryppots() []string {
	if x != nil {
		return x.Sceneryppots
	}
	return nil
}

type EventTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*EventTask `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *EventTaskResponse) Reset() {
	*x = EventTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTaskResponse) ProtoMessage() {}

func (x *EventTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTaskResponse.ProtoReflect.Descriptor instead.
func (*EventTaskResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{53}
}

func (x *EventTaskResponse) GetData() []*EventTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type CampRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Images    string `protobuf:"bytes,3,opt,name=images,proto3" json:"images,omitempty"`
	UserCount int32  `protobuf:"varint,4,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	Points    int32  `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *CampRank) Reset() {
	*x = CampRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampRank) ProtoMessage() {}

func (x *CampRank) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampRank.ProtoReflect.Descriptor instead.
func (*CampRank) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{54}
}

func (x *CampRank) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CampRank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CampRank) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *CampRank) GetUserCount() int32 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *CampRank) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type CampRankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *CampRankRequest) Reset() {
	*x = CampRankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampRankRequest) ProtoMessage() {}

func (x *CampRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampRankRequest.ProtoReflect.Descriptor instead.
func (*CampRankRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{55}
}

func (x *CampRankRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type CampRankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CampRank `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CampRankResponse) Reset() {
	*x = CampRankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CampRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampRankResponse) ProtoMessage() {}

func (x *CampRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampRankResponse.ProtoReflect.Descriptor instead.
func (*CampRankResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{56}
}

func (x *CampRankResponse) GetData() []*CampRank {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TripCount  int32  `protobuf:"varint,3,opt,name=trip_count,json=tripCount,proto3" json:"trip_count,omitempty"`
	HonourId   string `protobuf:"bytes,4,opt,name=honour_id,json=honourId,proto3" json:"honour_id,omitempty"`
	HonourName string `protobuf:"bytes,5,opt,name=honour_name,json=honourName,proto3" json:"honour_name,omitempty"`
	CampId     string `protobuf:"bytes,6,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	CampName   string `protobuf:"bytes,7,opt,name=camp_name,json=campName,proto3" json:"camp_name,omitempty"`
	Points     int32  `protobuf:"varint,8,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *UserRank) Reset() {
	*x = UserRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRank) ProtoMessage() {}

func (x *UserRank) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRank.ProtoReflect.Descriptor instead.
func (*UserRank) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{57}
}

func (x *UserRank) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserRank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserRank) GetTripCount() int32 {
	if x != nil {
		return x.TripCount
	}
	return 0
}

func (x *UserRank) GetHonourId() string {
	if x != nil {
		return x.HonourId
	}
	return ""
}

func (x *UserRank) GetHonourName() string {
	if x != nil {
		return x.HonourName
	}
	return ""
}

func (x *UserRank) GetCampId() string {
	if x != nil {
		return x.CampId
	}
	return ""
}

func (x *UserRank) GetCampName() string {
	if x != nil {
		return x.CampName
	}
	return ""
}

func (x *UserRank) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type UserRankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *UserRankRequest) Reset() {
	*x = UserRankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRankRequest) ProtoMessage() {}

func (x *UserRankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRankRequest.ProtoReflect.Descriptor instead.
func (*UserRankRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{58}
}

func (x *UserRankRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type UserRankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserRank `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserRankResponse) Reset() {
	*x = UserRankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRankResponse) ProtoMessage() {}

func (x *UserRankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRankResponse.ProtoReflect.Descriptor instead.
func (*UserRankResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{59}
}

func (x *UserRankResponse) GetData() []*UserRank {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Images       string `protobuf:"bytes,3,opt,name=images,proto3" json:"images,omitempty"`
	StartTime    int32  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int32  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Status       int32  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	PassportCode string `protobuf:"bytes,7,opt,name=passport_code,json=passportCode,proto3" json:"passport_code,omitempty"`
	CampId       string `protobuf:"bytes,8,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	CampName     string `protobuf:"bytes,9,opt,name=camp_name,json=campName,proto3" json:"camp_name,omitempty"`
	CampPoints   int32  `protobuf:"varint,10,opt,name=camp_points,json=campPoints,proto3" json:"camp_points,omitempty"`
	CampRanking  int32  `protobuf:"varint,11,opt,name=camp_ranking,json=campRanking,proto3" json:"camp_ranking,omitempty"`
	UserPoints   int32  `protobuf:"varint,12,opt,name=user_points,json=userPoints,proto3" json:"user_points,omitempty"`
	UserRanking  int32  `protobuf:"varint,13,opt,name=user_ranking,json=userRanking,proto3" json:"user_ranking,omitempty"`
	UserHonour   string `protobuf:"bytes,14,opt,name=user_honour,json=userHonour,proto3" json:"user_honour,omitempty"`
}

func (x *UserEvent) Reset() {
	*x = UserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEvent) ProtoMessage() {}

func (x *UserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEvent.ProtoReflect.Descriptor instead.
func (*UserEvent) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{60}
}

func (x *UserEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserEvent) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *UserEvent) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UserEvent) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UserEvent) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserEvent) GetPassportCode() string {
	if x != nil {
		return x.PassportCode
	}
	return ""
}

func (x *UserEvent) GetCampId() string {
	if x != nil {
		return x.CampId
	}
	return ""
}

func (x *UserEvent) GetCampName() string {
	if x != nil {
		return x.CampName
	}
	return ""
}

func (x *UserEvent) GetCampPoints() int32 {
	if x != nil {
		return x.CampPoints
	}
	return 0
}

func (x *UserEvent) GetCampRanking() int32 {
	if x != nil {
		return x.CampRanking
	}
	return 0
}

func (x *UserEvent) GetUserPoints() int32 {
	if x != nil {
		return x.UserPoints
	}
	return 0
}

func (x *UserEvent) GetUserRanking() int32 {
	if x != nil {
		return x.UserRanking
	}
	return 0
}

func (x *UserEvent) GetUserHonour() string {
	if x != nil {
		return x.UserHonour
	}
	return ""
}

type UserEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Status  int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UserEventRequest) Reset() {
	*x = UserEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventRequest) ProtoMessage() {}

func (x *UserEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventRequest.ProtoReflect.Descriptor instead.
func (*UserEventRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{61}
}

func (x *UserEventRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserEventRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserEventRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UserEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserEvent `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserEventResponse) Reset() {
	*x = UserEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventResponse) ProtoMessage() {}

func (x *UserEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventResponse.ProtoReflect.Descriptor instead.
func (*UserEventResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{62}
}

func (x *UserEventResponse) GetData() []*UserEvent {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	City           string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
	Status         int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime     int32  `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UserId         string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName       string `protobuf:"bytes,6,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserAvatar     string `protobuf:"bytes,7,opt,name=user_avatar,json=userAvatar,proto3" json:"user_avatar,omitempty"`
	InBadgeId      string `protobuf:"bytes,8,opt,name=in_badge_id,json=inBadgeId,proto3" json:"in_badge_id,omitempty"`
	InBadgeName    string `protobuf:"bytes,9,opt,name=in_badge_name,json=inBadgeName,proto3" json:"in_badge_name,omitempty"`
	InBadgeImages  string `protobuf:"bytes,10,opt,name=in_badge_images,json=inBadgeImages,proto3" json:"in_badge_images,omitempty"`
	OutBadgeId     string `protobuf:"bytes,11,opt,name=out_badge_id,json=outBadgeId,proto3" json:"out_badge_id,omitempty"`
	OutBadgeName   string `protobuf:"bytes,12,opt,name=out_badge_name,json=outBadgeName,proto3" json:"out_badge_name,omitempty"`
	OutBadgeImages string `protobuf:"bytes,13,opt,name=out_badge_images,json=outBadgeImages,proto3" json:"out_badge_images,omitempty"`
	ExpiredTime    int32  `protobuf:"varint,14,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
	Content        string `protobuf:"bytes,15,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UserSwap) Reset() {
	*x = UserSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSwap) ProtoMessage() {}

func (x *UserSwap) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSwap.ProtoReflect.Descriptor instead.
func (*UserSwap) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{63}
}

func (x *UserSwap) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserSwap) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UserSwap) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserSwap) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *UserSwap) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSwap) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserSwap) GetUserAvatar() string {
	if x != nil {
		return x.UserAvatar
	}
	return ""
}

func (x *UserSwap) GetInBadgeId() string {
	if x != nil {
		return x.InBadgeId
	}
	return ""
}

func (x *UserSwap) GetInBadgeName() string {
	if x != nil {
		return x.InBadgeName
	}
	return ""
}

func (x *UserSwap) GetInBadgeImages() string {
	if x != nil {
		return x.InBadgeImages
	}
	return ""
}

func (x *UserSwap) GetOutBadgeId() string {
	if x != nil {
		return x.OutBadgeId
	}
	return ""
}

func (x *UserSwap) GetOutBadgeName() string {
	if x != nil {
		return x.OutBadgeName
	}
	return ""
}

func (x *UserSwap) GetOutBadgeImages() string {
	if x != nil {
		return x.OutBadgeImages
	}
	return ""
}

func (x *UserSwap) GetExpiredTime() int32 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *UserSwap) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type UserSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Status  int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	City    string `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
}

func (x *UserSwapRequest) Reset() {
	*x = UserSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSwapRequest) ProtoMessage() {}

func (x *UserSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSwapRequest.ProtoReflect.Descriptor instead.
func (*UserSwapRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{64}
}

func (x *UserSwapRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserSwapRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserSwapRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserSwapRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserSwapRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type UserSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserSwap `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserSwapResponse) Reset() {
	*x = UserSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSwapResponse) ProtoMessage() {}

func (x *UserSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSwapResponse.ProtoReflect.Descriptor instead.
func (*UserSwapResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{65}
}

func (x *UserSwapResponse) GetData() []*UserSwap {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateUserSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InBadge     string `protobuf:"bytes,2,opt,name=in_badge,json=inBadge,proto3" json:"in_badge,omitempty"`
	OutBadge    string `protobuf:"bytes,3,opt,name=out_badge,json=outBadge,proto3" json:"out_badge,omitempty"`
	From        string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To          string `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	EventId     string `protobuf:"bytes,6,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	PreviousId  string `protobuf:"bytes,7,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"`
	City        string `protobuf:"bytes,8,opt,name=city,proto3" json:"city,omitempty"`
	Content     string `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
	Status      int32  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime  int32  `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpiredTime int32  `protobuf:"varint,12,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
}

func (x *CreateUserSwapRequest) Reset() {
	*x = CreateUserSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserSwapRequest) ProtoMessage() {}

func (x *CreateUserSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserSwapRequest.ProtoReflect.Descriptor instead.
func (*CreateUserSwapRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{66}
}

func (x *CreateUserSwapRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateUserSwapRequest) GetInBadge() string {
	if x != nil {
		return x.InBadge
	}
	return ""
}

func (x *CreateUserSwapRequest) GetOutBadge() string {
	if x != nil {
		return x.OutBadge
	}
	return ""
}

func (x *CreateUserSwapRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CreateUserSwapRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CreateUserSwapRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateUserSwapRequest) GetPreviousId() string {
	if x != nil {
		return x.PreviousId
	}
	return ""
}

func (x *CreateUserSwapRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateUserSwapRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateUserSwapRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateUserSwapRequest) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CreateUserSwapRequest) GetExpiredTime() int32 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

type UpdateUserSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status      int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	ExpiredTime int32  `protobuf:"varint,3,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
}

func (x *UpdateUserSwapRequest) Reset() {
	*x = UpdateUserSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSwapRequest) ProtoMessage() {}

func (x *UpdateUserSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSwapRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserSwapRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateUserSwapRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUserSwapRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateUserSwapRequest) GetExpiredTime() int32 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

type UserSwapStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UserSwapStatusRequest) Reset() {
	*x = UserSwapStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSwapStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSwapStatusRequest) ProtoMessage() {}

func (x *UserSwapStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSwapStatusRequest.ProtoReflect.Descriptor instead.
func (*UserSwapStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{68}
}

func (x *UserSwapStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserSwapStatusRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type EventSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Menus          []string `protobuf:"bytes,1,rep,name=menus,proto3" json:"menus,omitempty"`
	MarkBackgrouds []string `protobuf:"bytes,2,rep,name=mark_backgrouds,json=markBackgrouds,proto3" json:"mark_backgrouds,omitempty"`
}

func (x *EventSettings) Reset() {
	*x = EventSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSettings) ProtoMessage() {}

func (x *EventSettings) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSettings.ProtoReflect.Descriptor instead.
func (*EventSettings) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{69}
}

func (x *EventSettings) GetMenus() []string {
	if x != nil {
		return x.Menus
	}
	return nil
}

func (x *EventSettings) GetMarkBackgrouds() []string {
	if x != nil {
		return x.MarkBackgrouds
	}
	return nil
}

type EventSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EventSettingsRequest) Reset() {
	*x = EventSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSettingsRequest) ProtoMessage() {}

func (x *EventSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSettingsRequest.ProtoReflect.Descriptor instead.
func (*EventSettingsRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{70}
}

func (x *EventSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateEventSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data *EventSettings `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateEventSettingsRequest) Reset() {
	*x = UpdateEventSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventSettingsRequest) ProtoMessage() {}

func (x *UpdateEventSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventSettingsRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateEventSettingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateEventSettingsRequest) GetData() *EventSettings {
	if x != nil {
		return x.Data
	}
	return nil
}

type EventSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *EventSettings `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EventSettingsResponse) Reset() {
	*x = EventSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSettingsResponse) ProtoMessage() {}

func (x *EventSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSettingsResponse.ProtoReflect.Descriptor instead.
func (*EventSettingsResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{72}
}

func (x *EventSettingsResponse) GetData() *EventSettings {
	if x != nil {
		return x.Data
	}
	return nil
}

type EventAward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventId       string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Code          string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	CreateTime    int32  `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UserId        string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,6,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Location      string `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	AwardTime     int32  `protobuf:"varint,8,opt,name=award_time,json=awardTime,proto3" json:"award_time,omitempty"`
}

func (x *EventAward) Reset() {
	*x = EventAward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAward) ProtoMessage() {}

func (x *EventAward) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAward.ProtoReflect.Descriptor instead.
func (*EventAward) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{73}
}

func (x *EventAward) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventAward) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventAward) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *EventAward) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *EventAward) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventAward) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *EventAward) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *EventAward) GetAwardTime() int32 {
	if x != nil {
		return x.AwardTime
	}
	return 0
}

type EventAwardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,3,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Code          string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *EventAwardRequest) Reset() {
	*x = EventAwardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAwardRequest) ProtoMessage() {}

func (x *EventAwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAwardRequest.ProtoReflect.Descriptor instead.
func (*EventAwardRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{74}
}

func (x *EventAwardRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventAwardRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventAwardRequest) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *EventAwardRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type EventAwardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*EventAward `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *EventAwardResponse) Reset() {
	*x = EventAwardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAwardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAwardResponse) ProtoMessage() {}

func (x *EventAwardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAwardResponse.ProtoReflect.Descriptor instead.
func (*EventAwardResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{75}
}

func (x *EventAwardResponse) GetData() []*EventAward {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateEventAwardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SceneryspotId string   `protobuf:"bytes,2,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Codes         []string `protobuf:"bytes,3,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *CreateEventAwardRequest) Reset() {
	*x = CreateEventAwardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventAwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventAwardRequest) ProtoMessage() {}

func (x *CreateEventAwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventAwardRequest.ProtoReflect.Descriptor instead.
func (*CreateEventAwardRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{76}
}

func (x *CreateEventAwardRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CreateEventAwardRequest) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *CreateEventAwardRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

type DeleteEventAwardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DeleteEventAwardRequest) Reset() {
	*x = DeleteEventAwardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEventAwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventAwardRequest) ProtoMessage() {}

func (x *DeleteEventAwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventAwardRequest.ProtoReflect.Descriptor instead.
func (*DeleteEventAwardRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{77}
}

func (x *DeleteEventAwardRequest) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type NewEventAwardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,2,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Count         int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *NewEventAwardRequest) Reset() {
	*x = NewEventAwardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEventAwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEventAwardRequest) ProtoMessage() {}

func (x *NewEventAwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEventAwardRequest.ProtoReflect.Descriptor instead.
func (*NewEventAwardRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{78}
}

func (x *NewEventAwardRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *NewEventAwardRequest) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *NewEventAwardRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UserEventAwardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId       string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,3,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Location      string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *UserEventAwardRequest) Reset() {
	*x = UserEventAwardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEventAwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEventAwardRequest) ProtoMessage() {}

func (x *UserEventAwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEventAwardRequest.ProtoReflect.Descriptor instead.
func (*UserEventAwardRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{79}
}

func (x *UserEventAwardRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserEventAwardRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserEventAwardRequest) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *UserEventAwardRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type UserStampCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Value   int32  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UserStampCountRequest) Reset() {
	*x = UserStampCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStampCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStampCountRequest) ProtoMessage() {}

func (x *UserStampCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStampCountRequest.ProtoReflect.Descriptor instead.
func (*UserStampCountRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{80}
}

func (x *UserStampCountRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserStampCountRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserStampCountRequest) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type UserStampCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data int32 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UserStampCountResponse) Reset() {
	*x = UserStampCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStampCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStampCountResponse) ProtoMessage() {}

func (x *UserStampCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStampCountResponse.ProtoReflect.Descriptor instead.
func (*UserStampCountResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{81}
}

func (x *UserStampCountResponse) GetData() int32 {
	if x != nil {
		return x.Data
	}
	return 0
}

type ExportPassport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Status        int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	RealName      string `protobuf:"bytes,3,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Nric          string `protobuf:"bytes,4,opt,name=nric,proto3" json:"nric,omitempty"`
	Phone         string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Gender        string `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"`
	Profession    string `protobuf:"bytes,7,opt,name=profession,proto3" json:"profession,omitempty"`
	GuardianName  string `protobuf:"bytes,8,opt,name=guardian_name,json=guardianName,proto3" json:"guardian_name,omitempty"`
	GuardianNric  string `protobuf:"bytes,9,opt,name=guardian_nric,json=guardianNric,proto3" json:"guardian_nric,omitempty"`
	GuardianPhone string `protobuf:"bytes,10,opt,name=guardian_phone,json=guardianPhone,proto3" json:"guardian_phone,omitempty"`
	ClaimBy       string `protobuf:"bytes,11,opt,name=claim_by,json=claimBy,proto3" json:"claim_by,omitempty"`
	ClaimTime     int32  `protobuf:"varint,12,opt,name=claim_time,json=claimTime,proto3" json:"claim_time,omitempty"`
}

func (x *ExportPassport) Reset() {
	*x = ExportPassport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportPassport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPassport) ProtoMessage() {}

func (x *ExportPassport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPassport.ProtoReflect.Descriptor instead.
func (*ExportPassport) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{82}
}

func (x *ExportPassport) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ExportPassport) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ExportPassport) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *ExportPassport) GetNric() string {
	if x != nil {
		return x.Nric
	}
	return ""
}

func (x *ExportPassport) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ExportPassport) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ExportPassport) GetProfession() string {
	if x != nil {
		return x.Profession
	}
	return ""
}

func (x *ExportPassport) GetGuardianName() string {
	if x != nil {
		return x.GuardianName
	}
	return ""
}

func (x *ExportPassport) GetGuardianNric() string {
	if x != nil {
		return x.GuardianNric
	}
	return ""
}

func (x *ExportPassport) GetGuardianPhone() string {
	if x != nil {
		return x.GuardianPhone
	}
	return ""
}

func (x *ExportPassport) GetClaimBy() string {
	if x != nil {
		return x.ClaimBy
	}
	return ""
}

func (x *ExportPassport) GetClaimTime() int32 {
	if x != nil {
		return x.ClaimTime
	}
	return 0
}

type ExportPassportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExportPassportRequest) Reset() {
	*x = ExportPassportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportPassportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPassportRequest) ProtoMessage() {}

func (x *ExportPassportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPassportRequest.ProtoReflect.Descriptor instead.
func (*ExportPassportRequest) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{83}
}

type ExportPassportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ExportPassport `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ExportPassportResponse) Reset() {
	*x = ExportPassportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_event_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportPassportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPassportResponse) ProtoMessage() {}

func (x *ExportPassportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_event_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPassportResponse.ProtoReflect.Descriptor instead.
func (*ExportPassportResponse) Descriptor() ([]byte, []int) {
	return file_proto_event_proto_rawDescGZIP(), []int{84}
}

func (x *ExportPassportResponse) GetData() []*ExportPassport {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_proto_event_proto protoreflect.FileDescriptor

var file_proto_event_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x22, 0xc6, 0x02, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x11, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6f, 0x74, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6f,
	0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x05, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe6, 0x01, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x22, 0x6e, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xc3, 0x04, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x72, 0x69, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x5f, 0x6e, 0x72, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4e, 0x72, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x6d, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x06,
	0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x92, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6d, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x70, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f,
	0x6e, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x0c, 0x0a, 0x0a, 0x45, 0x73, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x22, 0x21, 0x0a, 0x09, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x45, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x0a, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x14,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53,
	0x70, 0x6f, 0x74, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x13, 0x43, 0x61,
	0x6d, 0x70, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x43, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x09, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d,
	0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x45, 0x0a,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x0f, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x0e, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x72, 0x69, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x6e, 0x72, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4e, 0x72, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x22, 0x5b, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x4b, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x3b,
	0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x0f, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd8,
	0x01, 0x0a, 0x11, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x47, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6e,
	0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x4e, 0x72, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x3b,
	0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0xaf, 0x01, 0x0a, 0x0d,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6e, 0x0a,
	0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x62, 0x0a,
	0x18, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0x4c, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xc5, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x4a, 0x0a, 0x16, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x13,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x72, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0x49, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xce, 0x01, 0x0a,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc5, 0x01,
	0x0a, 0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x21, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xbc, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6d,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22,
	0x67, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x61, 0x6d, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x70,
	0x70, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x72, 0x79, 0x70, 0x70, 0x6f, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x97, 0x01, 0x0a, 0x0f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61,
	0x6d, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe5,
	0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6d, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x70, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x70, 0x70, 0x6f, 0x74, 0x73, 0x22,
	0x41, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x7d, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0x2c, 0x0a, 0x0f, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x3f, 0x0a, 0x10, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xd9, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9d, 0x03, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x70, 0x52,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x22, 0x5e, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x41, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd9,
	0x03, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x75, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x22, 0x3f,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xc9, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x3f, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x4e, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x73,
	0x22, 0x26, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xe7, 0x01, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x01,
	0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x43, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x6e, 0x0a,
	0x14, 0x4e, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72,
	0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8e, 0x01,
	0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61,
	0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x2c, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xe6, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x72, 0x69, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x6e,
	0x72, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x4e, 0x72, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x4b, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xc1,
	0x3c, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45,
	0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6f, 0x74, 0x73,
	0x12, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6f,
	0x74, 0x73, 0x1a, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53,
	0x70, 0x6f, 0x74, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6f, 0x74,
	0x73, 0x12, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x53, 0x70,
	0x6f, 0x74, 0x73, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6f, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x1a, 0x23, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79,
	0x53, 0x70, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x1a,
	0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x14, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x18, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x1a,
	0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x12, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x1a,
	0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x12, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70,
	0x42, 0x79, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x42, 0x79, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x20, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x61, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x54,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x42, 0x79, 0x54, 0x6f, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x1a, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x77, 0x61, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x65, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x65, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1a, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1a, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x42, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a,
	0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x18, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x73, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x1b,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1b,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45,
	0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1a, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x12, 0x50, 0x69, 0x63,
	0x6b, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x13,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43,
	0x61, 0x6d, 0x70, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x13, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x13, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6d, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61, 0x6d,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x15, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x1a, 0x18,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45,
	0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x15, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x48, 0x6f, 0x6e, 0x6f, 0x75,
	0x72, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x45, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x12, 0x18, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x15, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x22, 0x00, 0x12,
	0x4a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x42, 0x79, 0x43, 0x61,
	0x6d, 0x70, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x19,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x48,
	0x6f, 0x6e, 0x6f, 0x75, 0x72, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x1a, 0x1a, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x42, 0x79,
	0x43, 0x61, 0x6d, 0x70, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x1a, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x22, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x22, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x2e,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x80, 0x01, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2f, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x1a, 0x26, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x18, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x26, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x6d, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77,
	0x61, 0x70, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x12, 0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x77, 0x61, 0x70, 0x12, 0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x77,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x23, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x1a, 0x21, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4e, 0x65, 0x77, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x12, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x73, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x45, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x17, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_event_proto_rawDescOnce sync.Once
	file_proto_event_proto_rawDescData = file_proto_event_proto_rawDesc
)

func file_proto_event_proto_rawDescGZIP() []byte {
	file_proto_event_proto_rawDescOnce.Do(func() {
		file_proto_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_event_proto_rawDescData)
	})
	return file_proto_event_proto_rawDescData
}

var file_proto_event_proto_msgTypes = make([]protoimpl.MessageInfo, 85)
var file_proto_event_proto_goTypes = []interface{}{
	(*Event)(nil),                             // 0: shenzhouyinji.Event
	(*EventScenerySpots)(nil),                 // 1: shenzhouyinji.EventScenerySpots
	(*Badge)(nil),                             // 2: shenzhouyinji.Badge
	(*UserBadge)(nil),                         // 3: shenzhouyinji.UserBadge
	(*UserBadgeSwap)(nil),                     // 4: shenzhouyinji.UserBadgeSwap
	(*PassportSet)(nil),                       // 5: shenzhouyinji.PassportSet
	(*Passport)(nil),                          // 6: shenzhouyinji.Passport
	(*UserPassport)(nil),                      // 7: shenzhouyinji.UserPassport
	(*Camp)(nil),                              // 8: shenzhouyinji.Camp
	(*Honour)(nil),                            // 9: shenzhouyinji.Honour
	(*UserCamp)(nil),                          // 10: shenzhouyinji.UserCamp
	(*EsEmptyReq)(nil),                        // 11: shenzhouyinji.EsEmptyReq
	(*EsKeyword)(nil),                         // 12: shenzhouyinji.EsKeyword
	(*EsUpdateRes)(nil),                       // 13: shenzhouyinji.EsUpdateRes
	(*EventsRes)(nil),                         // 14: shenzhouyinji.EventsRes
	(*HonoursRes)(nil),                        // 15: shenzhouyinji.HonoursRes
	(*EventScenerySpotsRes)(nil),              // 16: shenzhouyinji.EventScenerySpotsRes
	(*CampWithUserRequest)(nil),               // 17: shenzhouyinji.CampWithUserRequest
	(*CampsRes)(nil),                          // 18: shenzhouyinji.CampsRes
	(*UserCampsRes)(nil),                      // 19: shenzhouyinji.UserCampsRes
	(*BadgesRes)(nil),                         // 20: shenzhouyinji.BadgesRes
	(*UserBadgesRes)(nil),                     // 21: shenzhouyinji.UserBadgesRes
	(*UserBadgeSwapsRes)(nil),                 // 22: shenzhouyinji.UserBadgeSwapsRes
	(*UserPassportsRes)(nil),                  // 23: shenzhouyinji.UserPassportsRes
	(*PassportRequest)(nil),                   // 24: shenzhouyinji.PassportRequest
	(*PassportResult)(nil),                    // 25: shenzhouyinji.PassportResult
	(*SearchPassportRequest)(nil),             // 26: shenzhouyinji.SearchPassportRequest
	(*SearchPassportResponse)(nil),            // 27: shenzhouyinji.SearchPassportResponse
	(*DeletePassportRequest)(nil),             // 28: shenzhouyinji.DeletePassportRequest
	(*PassportsRes)(nil),                      // 29: shenzhouyinji.PassportsRes
	(*PassportSetsRes)(nil),                   // 30: shenzhouyinji.PassportSetsRes
	(*PickupPassportReq)(nil),                 // 31: shenzhouyinji.PickupPassportReq
	(*GuardianInfoReq)(nil),                   // 32: shenzhouyinji.GuardianInfoReq
	(*VerifyPassportReq)(nil),                 // 33: shenzhouyinji.VerifyPassportReq
	(*PickupCodeRes)(nil),                     // 34: shenzhouyinji.PickupCodeRes
	(*ActivatePassportReq)(nil),               // 35: shenzhouyinji.ActivatePassportReq
	(*UserEventPassportRequest)(nil),          // 36: shenzhouyinji.UserEventPassportRequest
	(*UserEventPassportResponse)(nil),         // 37: shenzhouyinji.UserEventPassportResponse
	(*PassportStock)(nil),                     // 38: shenzhouyinji.PassportStock
	(*PassportStocksRequest)(nil),             // 39: shenzhouyinji.PassportStocksRequest
	(*PassportStocksResponse)(nil),            // 40: shenzhouyinji.PassportStocksResponse
	(*UserPassportRequest)(nil),               // 41: shenzhouyinji.UserPassportRequest
	(*CreateUserEventPassportResponse)(nil),   // 42: shenzhouyinji.CreateUserEventPassportResponse
	(*UserEventPassport)(nil),                 // 43: shenzhouyinji.UserEventPassport
	(*ActivateUserEventPassportRequest)(nil),  // 44: shenzhouyinji.ActivateUserEventPassportRequest
	(*ActivateUserEventPassportResponse)(nil), // 45: shenzhouyinji.ActivateUserEventPassportResponse
	(*EventUser)(nil),                         // 46: shenzhouyinji.EventUser
	(*EventUserRequest)(nil),                  // 47: shenzhouyinji.EventUserRequest
	(*EventUserResponse)(nil),                 // 48: shenzhouyinji.EventUserResponse
	(*EventUserPoints)(nil),                   // 49: shenzhouyinji.EventUserPoints
	(*EventUserPointsResponse)(nil),           // 50: shenzhouyinji.EventUserPointsResponse
	(*EventTask)(nil),                         // 51: shenzhouyinji.EventTask
	(*EventTaskRequest)(nil),                  // 52: shenzhouyinji.EventTaskRequest
	(*EventTaskResponse)(nil),                 // 53: shenzhouyinji.EventTaskResponse
	(*CampRank)(nil),                          // 54: shenzhouyinji.CampRank
	(*CampRankRequest)(nil),                   // 55: shenzhouyinji.CampRankRequest
	(*CampRankResponse)(nil),                  // 56: shenzhouyinji.CampRankResponse
	(*UserRank)(nil),                          // 57: shenzhouyinji.UserRank
	(*UserRankRequest)(nil),                   // 58: shenzhouyinji.UserRankRequest
	(*UserRankResponse)(nil),                  // 59: shenzhouyinji.UserRankResponse
	(*UserEvent)(nil),                         // 60: shenzhouyinji.UserEvent
	(*UserEventRequest)(nil),                  // 61: shenzhouyinji.UserEventRequest
	(*UserEventResponse)(nil),                 // 62: shenzhouyinji.UserEventResponse
	(*UserSwap)(nil),                          // 63: shenzhouyinji.UserSwap
	(*UserSwapRequest)(nil),                   // 64: shenzhouyinji.UserSwapRequest
	(*UserSwapResponse)(nil),                  // 65: shenzhouyinji.UserSwapResponse
	(*CreateUserSwapRequest)(nil),             // 66: shenzhouyinji.CreateUserSwapRequest
	(*UpdateUserSwapRequest)(nil),             // 67: shenzhouyinji.UpdateUserSwapRequest
	(*UserSwapStatusRequest)(nil),             // 68: shenzhouyinji.UserSwapStatusRequest
	(*EventSettings)(nil),                     // 69: shenzhouyinji.EventSettings
	(*EventSettingsRequest)(nil),              // 70: shenzhouyinji.EventSettingsRequest
	(*UpdateEventSettingsRequest)(nil),        // 71: shenzhouyinji.UpdateEventSettingsRequest
	(*EventSettingsResponse)(nil),             // 72: shenzhouyinji.EventSettingsResponse
	(*EventAward)(nil),                        // 73: shenzhouyinji.EventAward
	(*EventAwardRequest)(nil),                 // 74: shenzhouyinji.EventAwardRequest
	(*EventAwardResponse)(nil),                // 75: shenzhouyinji.EventAwardResponse
	(*CreateEventAwardRequest)(nil),           // 76: shenzhouyinji.CreateEventAwardRequest
	(*DeleteEventAwardRequest)(nil),           // 77: shenzhouyinji.DeleteEventAwardRequest
	(*NewEventAwardRequest)(nil),              // 78: shenzhouyinji.NewEventAwardRequest
	(*UserEventAwardRequest)(nil),             // 79: shenzhouyinji.UserEventAwardRequest
	(*UserStampCountRequest)(nil),             // 80: shenzhouyinji.UserStampCountRequest
	(*UserStampCountResponse)(nil),            // 81: shenzhouyinji.UserStampCountResponse
	(*ExportPassport)(nil),                    // 82: shenzhouyinji.ExportPassport
	(*ExportPassportRequest)(nil),             // 83: shenzhouyinji.ExportPassportRequest
	(*ExportPassportResponse)(nil),            // 84: shenzhouyinji.ExportPassportResponse
}
var file_proto_event_proto_depIdxs = []int32{
	0,   // 0: shenzhouyinji.EventsRes.data:type_name -> shenzhouyinji.Event
	9,   // 1: shenzhouyinji.HonoursRes.data:type_name -> shenzhouyinji.Honour
	1,   // 2: shenzhouyinji.EventScenerySpotsRes.data:type_name -> shenzhouyinji.EventScenerySpots
	8,   // 3: shenzhouyinji.CampsRes.data:type_name -> shenzhouyinji.Camp
	10,  // 4: shenzhouyinji.UserCampsRes.data:type_name -> shenzhouyinji.UserCamp
	2,   // 5: shenzhouyinji.BadgesRes.data:type_name -> shenzhouyinji.Badge
	3,   // 6: shenzhouyinji.UserBadgesRes.data:type_name -> shenzhouyinji.UserBadge
	4,   // 7: shenzhouyinji.UserBadgeSwapsRes.data:type_name -> shenzhouyinji.UserBadgeSwap
	7,   // 8: shenzhouyinji.UserPassportsRes.data:type_name -> shenzhouyinji.UserPassport
	25,  // 9: shenzhouyinji.SearchPassportResponse.data:type_name -> shenzhouyinji.PassportResult
	6,   // 10: shenzhouyinji.PassportsRes.data:type_name -> shenzhouyinji.Passport
	5,   // 11: shenzhouyinji.PassportSetsRes.data:type_name -> shenzhouyinji.PassportSet
	7,   // 12: shenzhouyinji.UserEventPassportResponse.data:type_name -> shenzhouyinji.UserPassport
	38,  // 13: shenzhouyinji.PassportStocksResponse.data:type_name -> shenzhouyinji.PassportStock
	43,  // 14: shenzhouyinji.ActivateUserEventPassportResponse.data:type_name -> shenzhouyinji.UserEventPassport
	46,  // 15: shenzhouyinji.EventUserResponse.data:type_name -> shenzhouyinji.EventUser
	46,  // 16: shenzhouyinji.EventUserPointsResponse.data:type_name -> shenzhouyinji.EventUser
	51,  // 17: shenzhouyinji.EventTaskResponse.data:type_name -> shenzhouyinji.EventTask
	54,  // 18: shenzhouyinji.CampRankResponse.data:type_name -> shenzhouyinji.CampRank
	57,  // 19: shenzhouyinji.UserRankResponse.data:type_name -> shenzhouyinji.UserRank
	60,  // 20: shenzhouyinji.UserEventResponse.data:type_name -> shenzhouyinji.UserEvent
	63,  // 21: shenzhouyinji.UserSwapResponse.data:type_name -> shenzhouyinji.UserSwap
	69,  // 22: shenzhouyinji.UpdateEventSettingsRequest.data:type_name -> shenzhouyinji.EventSettings
	69,  // 23: shenzhouyinji.EventSettingsResponse.data:type_name -> shenzhouyinji.EventSettings
	73,  // 24: shenzhouyinji.EventAwardResponse.data:type_name -> shenzhouyinji.EventAward
	82,  // 25: shenzhouyinji.ExportPassportResponse.data:type_name -> shenzhouyinji.ExportPassport
	0,   // 26: shenzhouyinji.EventService.CreateEvent:input_type -> shenzhouyinji.Event
	0,   // 27: shenzhouyinji.EventService.UpdateEvent:input_type -> shenzhouyinji.Event
	12,  // 28: shenzhouyinji.EventService.GetEvent:input_type -> shenzhouyinji.EsKeyword
	11,  // 29: shenzhouyinji.EventService.GetEvents:input_type -> shenzhouyinji.EsEmptyReq
	1,   // 30: shenzhouyinji.EventService.CreateEventScenerySpots:input_type -> shenzhouyinji.EventScenerySpots
	1,   // 31: shenzhouyinji.EventService.RemoveEventScenerySpots:input_type -> shenzhouyinji.EventScenerySpots
	12,  // 32: shenzhouyinji.EventService.GetEventScenerySpots:input_type -> shenzhouyinji.EsKeyword
	2,   // 33: shenzhouyinji.EventService.CreateBadge:input_type -> shenzhouyinji.Badge
	2,   // 34: shenzhouyinji.EventService.UpdateBadge:input_type -> shenzhouyinji.Badge
	2,   // 35: shenzhouyinji.EventService.DeleteBadge:input_type -> shenzhouyinji.Badge
	12,  // 36: shenzhouyinji.EventService.GetBadge:input_type -> shenzhouyinji.EsKeyword
	12,  // 37: shenzhouyinji.EventService.GetBadgesByEventID:input_type -> shenzhouyinji.EsKeyword
	3,   // 38: shenzhouyinji.EventService.CreateUserBadge:input_type -> shenzhouyinji.UserBadge
	3,   // 39: shenzhouyinji.EventService.UpdateUserBadge:input_type -> shenzhouyinji.UserBadge
	3,   // 40: shenzhouyinji.EventService.RemoveUserBadge:input_type -> shenzhouyinji.UserBadge
	12,  // 41: shenzhouyinji.EventService.GetUserBadgeByUserID:input_type -> shenzhouyinji.EsKeyword
	4,   // 42: shenzhouyinji.EventService.CreateUserBadgeSwap:input_type -> shenzhouyinji.UserBadgeSwap
	4,   // 43: shenzhouyinji.EventService.UpdateUserBadgeSwap:input_type -> shenzhouyinji.UserBadgeSwap
	12,  // 44: shenzhouyinji.EventService.GetUserBadgeSwap:input_type -> shenzhouyinji.EsKeyword
	12,  // 45: shenzhouyinji.EventService.GetUserBadgeSwapByPreviousID:input_type -> shenzhouyinji.EsKeyword
	12,  // 46: shenzhouyinji.EventService.GetUserBadgeSwapByFrom:input_type -> shenzhouyinji.EsKeyword
	12,  // 47: shenzhouyinji.EventService.GetUserBadgeSwapByTo:input_type -> shenzhouyinji.EsKeyword
	5,   // 48: shenzhouyinji.EventService.CreatePassportSet:input_type -> shenzhouyinji.PassportSet
	5,   // 49: shenzhouyinji.EventService.UpdatePassportSet:input_type -> shenzhouyinji.PassportSet
	12,  // 50: shenzhouyinji.EventService.GetPassportSet:input_type -> shenzhouyinji.EsKeyword
	12,  // 51: shenzhouyinji.EventService.GetPassportSetByName:input_type -> shenzhouyinji.EsKeyword
	12,  // 52: shenzhouyinji.EventService.GetPassportSetByEventID:input_type -> shenzhouyinji.EsKeyword
	6,   // 53: shenzhouyinji.EventService.CreatePassport:input_type -> shenzhouyinji.Passport
	6,   // 54: shenzhouyinji.EventService.UpdatePassport:input_type -> shenzhouyinji.Passport
	12,  // 55: shenzhouyinji.EventService.GetPassport:input_type -> shenzhouyinji.EsKeyword
	12,  // 56: shenzhouyinji.EventService.GetPassportByCode:input_type -> shenzhouyinji.EsKeyword
	12,  // 57: shenzhouyinji.EventService.GetPassportByPassportSetID:input_type -> shenzhouyinji.EsKeyword
	24,  // 58: shenzhouyinji.EventService.GetPassports:input_type -> shenzhouyinji.PassportRequest
	28,  // 59: shenzhouyinji.EventService.DeletePassport:input_type -> shenzhouyinji.DeletePassportRequest
	26,  // 60: shenzhouyinji.EventService.SearchPassports:input_type -> shenzhouyinji.SearchPassportRequest
	7,   // 61: shenzhouyinji.EventService.CreateUserPassport:input_type -> shenzhouyinji.UserPassport
	7,   // 62: shenzhouyinji.EventService.UpdateUserPassport:input_type -> shenzhouyinji.UserPassport
	7,   // 63: shenzhouyinji.EventService.GetUserPassport:input_type -> shenzhouyinji.UserPassport
	12,  // 64: shenzhouyinji.EventService.GetUserPassportByUserID:input_type -> shenzhouyinji.EsKeyword
	12,  // 65: shenzhouyinji.EventService.GetUserPassportByPassportID:input_type -> shenzhouyinji.EsKeyword
	12,  // 66: shenzhouyinji.EventService.GetUserPassportByGuardianName:input_type -> shenzhouyinji.EsKeyword
	12,  // 67: shenzhouyinji.EventService.RemoveUserPassport:input_type -> shenzhouyinji.EsKeyword
	31,  // 68: shenzhouyinji.EventService.PickupUserPassport:input_type -> shenzhouyinji.PickupPassportReq
	32,  // 69: shenzhouyinji.EventService.UpdateGuardianInfo:input_type -> shenzhouyinji.GuardianInfoReq
	33,  // 70: shenzhouyinji.EventService.VerifyUserPassport:input_type -> shenzhouyinji.VerifyPassportReq
	12,  // 71: shenzhouyinji.EventService.GetPickupCodeInfo:input_type -> shenzhouyinji.EsKeyword
	35,  // 72: shenzhouyinji.EventService.ActivateUserPassport:input_type -> shenzhouyinji.ActivatePassportReq
	8,   // 73: shenzhouyinji.EventService.CreateCamp:input_type -> shenzhouyinji.Camp
	8,   // 74: shenzhouyinji.EventService.UpdateCamp:input_type -> shenzhouyinji.Camp
	12,  // 75: shenzhouyinji.EventService.GetCamp:input_type -> shenzhouyinji.EsKeyword
	12,  // 76: shenzhouyinji.EventService.GetCampByEventID:input_type -> shenzhouyinji.EsKeyword
	17,  // 77: shenzhouyinji.EventService.GetCampWithUser:input_type -> shenzhouyinji.CampWithUserRequest
	9,   // 78: shenzhouyinji.EventService.CreateHonour:input_type -> shenzhouyinji.Honour
	9,   // 79: shenzhouyinji.EventService.UpdateHonour:input_type -> shenzhouyinji.Honour
	12,  // 80: shenzhouyinji.EventService.GetHonour:input_type -> shenzhouyinji.EsKeyword
	12,  // 81: shenzhouyinji.EventService.GetHonourByCampID:input_type -> shenzhouyinji.EsKeyword
	10,  // 82: shenzhouyinji.EventService.CreateUserCamp:input_type -> shenzhouyinji.UserCamp
	10,  // 83: shenzhouyinji.EventService.UpdateUserCamp:input_type -> shenzhouyinji.UserCamp
	12,  // 84: shenzhouyinji.EventService.GetUserCamp:input_type -> shenzhouyinji.EsKeyword
	12,  // 85: shenzhouyinji.EventService.GetUserCampByCampID:input_type -> shenzhouyinji.EsKeyword
	39,  // 86: shenzhouyinji.EventService.GetPassportStocks:input_type -> shenzhouyinji.PassportStocksRequest
	41,  // 87: shenzhouyinji.EventService.GetIssuedUserPassports:input_type -> shenzhouyinji.UserPassportRequest
	41,  // 88: shenzhouyinji.EventService.GetUsedUserPassports:input_type -> shenzhouyinji.UserPassportRequest
	41,  // 89: shenzhouyinji.EventService.GetInactiveUserPassports:input_type -> shenzhouyinji.UserPassportRequest
	36,  // 90: shenzhouyinji.EventService.GetUserEventPassport:input_type -> shenzhouyinji.UserEventPassportRequest
	7,   // 91: shenzhouyinji.EventService.CheckUserEventPassport:input_type -> shenzhouyinji.UserPassport
	7,   // 92: shenzhouyinji.EventService.CreateUserEventPassport:input_type -> shenzhouyinji.UserPassport
	44,  // 93: shenzhouyinji.EventService.ActivateUserEventPassport:input_type -> shenzhouyinji.ActivateUserEventPassportRequest
	44,  // 94: shenzhouyinji.EventService.GetClaimEventPassports:input_type -> shenzhouyinji.ActivateUserEventPassportRequest
	47,  // 95: shenzhouyinji.EventService.GetEventUsers:input_type -> shenzhouyinji.EventUserRequest
	49,  // 96: shenzhouyinji.EventService.UpdateEventUserPoints:input_type -> shenzhouyinji.EventUserPoints
	49,  // 97: shenzhouyinji.EventService.IncrementEventUserPoints:input_type -> shenzhouyinji.EventUserPoints
	52,  // 98: shenzhouyinji.EventService.GetEventTasks:input_type -> shenzhouyinji.EventTaskRequest
	55,  // 99: shenzhouyinji.EventService.GetCampRanks:input_type -> shenzhouyinji.CampRankRequest
	58,  // 100: shenzhouyinji.EventService.GetUserRanks:input_type -> shenzhouyinji.UserRankRequest
	61,  // 101: shenzhouyinji.EventService.GetUserEvents:input_type -> shenzhouyinji.UserEventRequest
	64,  // 102: shenzhouyinji.EventService.GetUserSwaps:input_type -> shenzhouyinji.UserSwapRequest
	66,  // 103: shenzhouyinji.EventService.CreateUserSwap:input_type -> shenzhouyinji.CreateUserSwapRequest
	67,  // 104: shenzhouyinji.EventService.UpdateUserSwap:input_type -> shenzhouyinji.UpdateUserSwapRequest
	70,  // 105: shenzhouyinji.EventService.GetEventSettings:input_type -> shenzhouyinji.EventSettingsRequest
	71,  // 106: shenzhouyinji.EventService.UpdateEventSettings:input_type -> shenzhouyinji.UpdateEventSettingsRequest
	76,  // 107: shenzhouyinji.EventService.CreateEventAward:input_type -> shenzhouyinji.CreateEventAwardRequest
	74,  // 108: shenzhouyinji.EventService.GetEventAwards:input_type -> shenzhouyinji.EventAwardRequest
	73,  // 109: shenzhouyinji.EventService.UpdateEventAward:input_type -> shenzhouyinji.EventAward
	77,  // 110: shenzhouyinji.EventService.DeleteEventAward:input_type -> shenzhouyinji.DeleteEventAwardRequest
	78,  // 111: shenzhouyinji.EventService.GetNewEventAwards:input_type -> shenzhouyinji.NewEventAwardRequest
	79,  // 112: shenzhouyinji.EventService.GetUserEventAwards:input_type -> shenzhouyinji.UserEventAwardRequest
	12,  // 113: shenzhouyinji.EventService.UnbindUserPassport:input_type -> shenzhouyinji.EsKeyword
	12,  // 114: shenzhouyinji.EventService.DeleteUserPassport:input_type -> shenzhouyinji.EsKeyword
	80,  // 115: shenzhouyinji.EventService.UpdateUserStampCount:input_type -> shenzhouyinji.UserStampCountRequest
	80,  // 116: shenzhouyinji.EventService.IncrementUserStampCount:input_type -> shenzhouyinji.UserStampCountRequest
	83,  // 117: shenzhouyinji.EventService.GetExportPassports:input_type -> shenzhouyinji.ExportPassportRequest
	12,  // 118: shenzhouyinji.EventService.CreateEvent:output_type -> shenzhouyinji.EsKeyword
	13,  // 119: shenzhouyinji.EventService.UpdateEvent:output_type -> shenzhouyinji.EsUpdateRes
	0,   // 120: shenzhouyinji.EventService.GetEvent:output_type -> shenzhouyinji.Event
	14,  // 121: shenzhouyinji.EventService.GetEvents:output_type -> shenzhouyinji.EventsRes
	1,   // 122: shenzhouyinji.EventService.CreateEventScenerySpots:output_type -> shenzhouyinji.EventScenerySpots
	13,  // 123: shenzhouyinji.EventService.RemoveEventScenerySpots:output_type -> shenzhouyinji.EsUpdateRes
	16,  // 124: shenzhouyinji.EventService.GetEventScenerySpots:output_type -> shenzhouyinji.EventScenerySpotsRes
	12,  // 125: shenzhouyinji.EventService.CreateBadge:output_type -> shenzhouyinji.EsKeyword
	13,  // 126: shenzhouyinji.EventService.UpdateBadge:output_type -> shenzhouyinji.EsUpdateRes
	20,  // 127: shenzhouyinji.EventService.DeleteBadge:output_type -> shenzhouyinji.BadgesRes
	2,   // 128: shenzhouyinji.EventService.GetBadge:output_type -> shenzhouyinji.Badge
	20,  // 129: shenzhouyinji.EventService.GetBadgesByEventID:output_type -> shenzhouyinji.BadgesRes
	3,   // 130: shenzhouyinji.EventService.CreateUserBadge:output_type -> shenzhouyinji.UserBadge
	13,  // 131: shenzhouyinji.EventService.UpdateUserBadge:output_type -> shenzhouyinji.EsUpdateRes
	13,  // 132: shenzhouyinji.EventService.RemoveUserBadge:output_type -> shenzhouyinji.EsUpdateRes
	21,  // 133: shenzhouyinji.EventService.GetUserBadgeByUserID:output_type -> shenzhouyinji.UserBadgesRes
	12,  // 134: shenzhouyinji.EventService.CreateUserBadgeSwap:output_type -> shenzhouyinji.EsKeyword
	13,  // 135: shenzhouyinji.EventService.UpdateUserBadgeSwap:output_type -> shenzhouyinji.EsUpdateRes
	4,   // 136: shenzhouyinji.EventService.GetUserBadgeSwap:output_type -> shenzhouyinji.UserBadgeSwap
	4,   // 137: shenzhouyinji.EventService.GetUserBadgeSwapByPreviousID:output_type -> shenzhouyinji.UserBadgeSwap
	22,  // 138: shenzhouyinji.EventService.GetUserBadgeSwapByFrom:output_type -> shenzhouyinji.UserBadgeSwapsRes
	22,  // 139: shenzhouyinji.EventService.GetUserBadgeSwapByTo:output_type -> shenzhouyinji.UserBadgeSwapsRes
	12,  // 140: shenzhouyinji.EventService.CreatePassportSet:output_type -> shenzhouyinji.EsKeyword
	13,  // 141: shenzhouyinji.EventService.UpdatePassportSet:output_type -> shenzhouyinji.EsUpdateRes
	5,   // 142: shenzhouyinji.EventService.GetPassportSet:output_type -> shenzhouyinji.PassportSet
	5,   // 143: shenzhouyinji.EventService.GetPassportSetByName:output_type -> shenzhouyinji.PassportSet
	30,  // 144: shenzhouyinji.EventService.GetPassportSetByEventID:output_type -> shenzhouyinji.PassportSetsRes
	12,  // 145: shenzhouyinji.EventService.CreatePassport:output_type -> shenzhouyinji.EsKeyword
	13,  // 146: shenzhouyinji.EventService.UpdatePassport:output_type -> shenzhouyinji.EsUpdateRes
	6,   // 147: shenzhouyinji.EventService.GetPassport:output_type -> shenzhouyinji.Passport
	6,   // 148: shenzhouyinji.EventService.GetPassportByCode:output_type -> shenzhouyinji.Passport
	29,  // 149: shenzhouyinji.EventService.GetPassportByPassportSetID:output_type -> shenzhouyinji.PassportsRes
	29,  // 150: shenzhouyinji.EventService.GetPassports:output_type -> shenzhouyinji.PassportsRes
	29,  // 151: shenzhouyinji.EventService.DeletePassport:output_type -> shenzhouyinji.PassportsRes
	27,  // 152: shenzhouyinji.EventService.SearchPassports:output_type -> shenzhouyinji.SearchPassportResponse
	12,  // 153: shenzhouyinji.EventService.CreateUserPassport:output_type -> shenzhouyinji.EsKeyword
	13,  // 154: shenzhouyinji.EventService.UpdateUserPassport:output_type -> shenzhouyinji.EsUpdateRes
	7,   // 155: shenzhouyinji.EventService.GetUserPassport:output_type -> shenzhouyinji.UserPassport
	23,  // 156: shenzhouyinji.EventService.GetUserPassportByUserID:output_type -> shenzhouyinji.UserPassportsRes
	7,   // 157: shenzhouyinji.EventService.GetUserPassportByPassportID:output_type -> shenzhouyinji.UserPassport
	23,  // 158: shenzhouyinji.EventService.GetUserPassportByGuardianName:output_type -> shenzhouyinji.UserPassportsRes
	13,  // 159: shenzhouyinji.EventService.RemoveUserPassport:output_type -> shenzhouyinji.EsUpdateRes
	12,  // 160: shenzhouyinji.EventService.PickupUserPassport:output_type -> shenzhouyinji.EsKeyword
	13,  // 161: shenzhouyinji.EventService.UpdateGuardianInfo:output_type -> shenzhouyinji.EsUpdateRes
	13,  // 162: shenzhouyinji.EventService.VerifyUserPassport:output_type -> shenzhouyinji.EsUpdateRes
	34,  // 163: shenzhouyinji.EventService.GetPickupCodeInfo:output_type -> shenzhouyinji.PickupCodeRes
	13,  // 164: shenzhouyinji.EventService.ActivateUserPassport:output_type -> shenzhouyinji.EsUpdateRes
	12,  // 165: shenzhouyinji.EventService.CreateCamp:output_type -> shenzhouyinji.EsKeyword
	13,  // 166: shenzhouyinji.EventService.UpdateCamp:output_type -> shenzhouyinji.EsUpdateRes
	8,   // 167: shenzhouyinji.EventService.GetCamp:output_type -> shenzhouyinji.Camp
	18,  // 168: shenzhouyinji.EventService.GetCampByEventID:output_type -> shenzhouyinji.CampsRes
	18,  // 169: shenzhouyinji.EventService.GetCampWithUser:output_type -> shenzhouyinji.CampsRes
	12,  // 170: shenzhouyinji.EventService.CreateHonour:output_type -> shenzhouyinji.EsKeyword
	13,  // 171: shenzhouyinji.EventService.UpdateHonour:output_type -> shenzhouyinji.EsUpdateRes
	9,   // 172: shenzhouyinji.EventService.GetHonour:output_type -> shenzhouyinji.Honour
	15,  // 173: shenzhouyinji.EventService.GetHonourByCampID:output_type -> shenzhouyinji.HonoursRes
	12,  // 174: shenzhouyinji.EventService.CreateUserCamp:output_type -> shenzhouyinji.EsKeyword
	13,  // 175: shenzhouyinji.EventService.UpdateUserCamp:output_type -> shenzhouyinji.EsUpdateRes
	10,  // 176: shenzhouyinji.EventService.GetUserCamp:output_type -> shenzhouyinji.UserCamp
	19,  // 177: shenzhouyinji.EventService.GetUserCampByCampID:output_type -> shenzhouyinji.UserCampsRes
	40,  // 178: shenzhouyinji.EventService.GetPassportStocks:output_type -> shenzhouyinji.PassportStocksResponse
	23,  // 179: shenzhouyinji.EventService.GetIssuedUserPassports:output_type -> shenzhouyinji.UserPassportsRes
	23,  // 180: shenzhouyinji.EventService.GetUsedUserPassports:output_type -> shenzhouyinji.UserPassportsRes
	23,  // 181: shenzhouyinji.EventService.GetInactiveUserPassports:output_type -> shenzhouyinji.UserPassportsRes
	37,  // 182: shenzhouyinji.EventService.GetUserEventPassport:output_type -> shenzhouyinji.UserEventPassportResponse
	37,  // 183: shenzhouyinji.EventService.CheckUserEventPassport:output_type -> shenzhouyinji.UserEventPassportResponse
	42,  // 184: shenzhouyinji.EventService.CreateUserEventPassport:output_type -> shenzhouyinji.CreateUserEventPassportResponse
	45,  // 185: shenzhouyinji.EventService.ActivateUserEventPassport:output_type -> shenzhouyinji.ActivateUserEventPassportResponse
	45,  // 186: shenzhouyinji.EventService.GetClaimEventPassports:output_type -> shenzhouyinji.ActivateUserEventPassportResponse
	48,  // 187: shenzhouyinji.EventService.GetEventUsers:output_type -> shenzhouyinji.EventUserResponse
	50,  // 188: shenzhouyinji.EventService.UpdateEventUserPoints:output_type -> shenzhouyinji.EventUserPointsResponse
	50,  // 189: shenzhouyinji.EventService.IncrementEventUserPoints:output_type -> shenzhouyinji.EventUserPointsResponse
	53,  // 190: shenzhouyinji.EventService.GetEventTasks:output_type -> shenzhouyinji.EventTaskResponse
	56,  // 191: shenzhouyinji.EventService.GetCampRanks:output_type -> shenzhouyinji.CampRankResponse
	59,  // 192: shenzhouyinji.EventService.GetUserRanks:output_type -> shenzhouyinji.UserRankResponse
	62,  // 193: shenzhouyinji.EventService.GetUserEvents:output_type -> shenzhouyinji.UserEventResponse
	65,  // 194: shenzhouyinji.EventService.GetUserSwaps:output_type -> shenzhouyinji.UserSwapResponse
	65,  // 195: shenzhouyinji.EventService.CreateUserSwap:output_type -> shenzhouyinji.UserSwapResponse
	65,  // 196: shenzhouyinji.EventService.UpdateUserSwap:output_type -> shenzhouyinji.UserSwapResponse
	72,  // 197: shenzhouyinji.EventService.GetEventSettings:output_type -> shenzhouyinji.EventSettingsResponse
	72,  // 198: shenzhouyinji.EventService.UpdateEventSettings:output_type -> shenzhouyinji.EventSettingsResponse
	75,  // 199: shenzhouyinji.EventService.CreateEventAward:output_type -> shenzhouyinji.EventAwardResponse
	75,  // 200: shenzhouyinji.EventService.GetEventAwards:output_type -> shenzhouyinji.EventAwardResponse
	75,  // 201: shenzhouyinji.EventService.UpdateEventAward:output_type -> shenzhouyinji.EventAwardResponse
	75,  // 202: shenzhouyinji.EventService.DeleteEventAward:output_type -> shenzhouyinji.EventAwardResponse
	75,  // 203: shenzhouyinji.EventService.GetNewEventAwards:output_type -> shenzhouyinji.EventAwardResponse
	75,  // 204: shenzhouyinji.EventService.GetUserEventAwards:output_type -> shenzhouyinji.EventAwardResponse
	23,  // 205: shenzhouyinji.EventService.UnbindUserPassport:output_type -> shenzhouyinji.UserPassportsRes
	23,  // 206: shenzhouyinji.EventService.DeleteUserPassport:output_type -> shenzhouyinji.UserPassportsRes
	81,  // 207: shenzhouyinji.EventService.UpdateUserStampCount:output_type -> shenzhouyinji.UserStampCountResponse
	81,  // 208: shenzhouyinji.EventService.IncrementUserStampCount:output_type -> shenzhouyinji.UserStampCountResponse
	84,  // 209: shenzhouyinji.EventService.GetExportPassports:output_type -> shenzhouyinji.ExportPassportResponse
	118, // [118:210] is the sub-list for method output_type
	26,  // [26:118] is the sub-list for method input_type
	26,  // [26:26] is the sub-list for extension type_name
	26,  // [26:26] is the sub-list for extension extendee
	0,   // [0:26] is the sub-list for field type_name
}

func init() { file_proto_event_proto_init() }
func file_proto_event_proto_init() {
	if File_proto_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventScenerySpots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Badge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBadgeSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassportSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Passport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPassport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Camp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Honour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsEmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsKeyword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EsUpdateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HonoursRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventScenerySpotsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampWithUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCampsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBadgesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBadgeSwapsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPassportsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassportResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPassportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchPassportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePassportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassportsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassportSetsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickupPassportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardianInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyPassportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickupCodeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivatePassportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventPassportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventPassportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassportStock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassportStocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassportStocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPassportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserEventPassportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventPassport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateUserEventPassportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateUserEventPassportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventUserPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventUserPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampRankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CampRankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSwapStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAwardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAwardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventAwardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEventAwardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEventAwardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEventAwardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStampCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStampCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportPassport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportPassportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_event_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportPassportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   85,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_event_proto_goTypes,
		DependencyIndexes: file_proto_event_proto_depIdxs,
		MessageInfos:      file_proto_event_proto_msgTypes,
	}.Build()
	File_proto_event_proto = out.File
	file_proto_event_proto_rawDesc = nil
	file_proto_event_proto_goTypes = nil
	file_proto_event_proto_depIdxs = nil
}
