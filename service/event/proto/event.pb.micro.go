// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/event.proto

package shenzhouyinji

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EventService service

func NewEventServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EventService service

type EventService interface {
	CreateEvent(ctx context.Context, in *Event, opts ...client.CallOption) (*EsKeyword, error)
	UpdateEvent(ctx context.Context, in *Event, opts ...client.CallOption) (*EsUpdateRes, error)
	GetEvent(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Event, error)
	GetEvents(ctx context.Context, in *EsEmptyReq, opts ...client.CallOption) (*EventsRes, error)
	CreateEventScenerySpots(ctx context.Context, in *EventScenerySpots, opts ...client.CallOption) (*EventScenerySpots, error)
	RemoveEventScenerySpots(ctx context.Context, in *EventScenerySpots, opts ...client.CallOption) (*EsUpdateRes, error)
	GetEventScenerySpots(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*EventScenerySpotsRes, error)
	CreateBadge(ctx context.Context, in *Badge, opts ...client.CallOption) (*EsKeyword, error)
	UpdateBadge(ctx context.Context, in *Badge, opts ...client.CallOption) (*EsUpdateRes, error)
	DeleteBadge(ctx context.Context, in *Badge, opts ...client.CallOption) (*BadgesRes, error)
	GetBadge(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Badge, error)
	GetBadgesByEventID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*BadgesRes, error)
	CreateUserBadge(ctx context.Context, in *UserBadge, opts ...client.CallOption) (*UserBadge, error)
	UpdateUserBadge(ctx context.Context, in *UserBadge, opts ...client.CallOption) (*EsUpdateRes, error)
	RemoveUserBadge(ctx context.Context, in *UserBadge, opts ...client.CallOption) (*EsUpdateRes, error)
	GetUserBadgeByUserID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserBadgesRes, error)
	CreateUserBadgeSwap(ctx context.Context, in *UserBadgeSwap, opts ...client.CallOption) (*EsKeyword, error)
	UpdateUserBadgeSwap(ctx context.Context, in *UserBadgeSwap, opts ...client.CallOption) (*EsUpdateRes, error)
	GetUserBadgeSwap(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserBadgeSwap, error)
	GetUserBadgeSwapByPreviousID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserBadgeSwap, error)
	GetUserBadgeSwapByFrom(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserBadgeSwapsRes, error)
	GetUserBadgeSwapByTo(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserBadgeSwapsRes, error)
	CreatePassportSet(ctx context.Context, in *PassportSet, opts ...client.CallOption) (*EsKeyword, error)
	UpdatePassportSet(ctx context.Context, in *PassportSet, opts ...client.CallOption) (*EsUpdateRes, error)
	GetPassportSet(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*PassportSet, error)
	GetPassportSetByName(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*PassportSet, error)
	GetPassportSetByEventID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*PassportSetsRes, error)
	CreatePassport(ctx context.Context, in *Passport, opts ...client.CallOption) (*EsKeyword, error)
	UpdatePassport(ctx context.Context, in *Passport, opts ...client.CallOption) (*EsUpdateRes, error)
	GetPassport(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Passport, error)
	GetPassportByCode(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Passport, error)
	GetPassportByPassportSetID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*PassportsRes, error)
	GetPassports(ctx context.Context, in *PassportRequest, opts ...client.CallOption) (*PassportsRes, error)
	DeletePassport(ctx context.Context, in *DeletePassportRequest, opts ...client.CallOption) (*PassportsRes, error)
	SearchPassports(ctx context.Context, in *SearchPassportRequest, opts ...client.CallOption) (*SearchPassportResponse, error)
	CreateUserPassport(ctx context.Context, in *UserPassport, opts ...client.CallOption) (*EsKeyword, error)
	UpdateUserPassport(ctx context.Context, in *UserPassport, opts ...client.CallOption) (*EsUpdateRes, error)
	GetUserPassport(ctx context.Context, in *UserPassport, opts ...client.CallOption) (*UserPassport, error)
	GetUserPassportByUserID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserPassportsRes, error)
	GetUserPassportByPassportID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserPassport, error)
	GetUserPassportByGuardianName(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserPassportsRes, error)
	RemoveUserPassport(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*EsUpdateRes, error)
	PickupUserPassport(ctx context.Context, in *PickupPassportReq, opts ...client.CallOption) (*EsKeyword, error)
	UpdateGuardianInfo(ctx context.Context, in *GuardianInfoReq, opts ...client.CallOption) (*EsUpdateRes, error)
	VerifyUserPassport(ctx context.Context, in *VerifyPassportReq, opts ...client.CallOption) (*EsUpdateRes, error)
	GetPickupCodeInfo(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*PickupCodeRes, error)
	ActivateUserPassport(ctx context.Context, in *ActivatePassportReq, opts ...client.CallOption) (*EsUpdateRes, error)
	CreateCamp(ctx context.Context, in *Camp, opts ...client.CallOption) (*EsKeyword, error)
	UpdateCamp(ctx context.Context, in *Camp, opts ...client.CallOption) (*EsUpdateRes, error)
	GetCamp(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Camp, error)
	GetCampByEventID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*CampsRes, error)
	GetCampWithUser(ctx context.Context, in *CampWithUserRequest, opts ...client.CallOption) (*CampsRes, error)
	CreateHonour(ctx context.Context, in *Honour, opts ...client.CallOption) (*EsKeyword, error)
	UpdateHonour(ctx context.Context, in *Honour, opts ...client.CallOption) (*EsUpdateRes, error)
	GetHonour(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Honour, error)
	GetHonourByCampID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*HonoursRes, error)
	CreateUserCamp(ctx context.Context, in *UserCamp, opts ...client.CallOption) (*EsKeyword, error)
	UpdateUserCamp(ctx context.Context, in *UserCamp, opts ...client.CallOption) (*EsUpdateRes, error)
	GetUserCamp(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserCamp, error)
	GetUserCampByCampID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserCampsRes, error)
	GetPassportStocks(ctx context.Context, in *PassportStocksRequest, opts ...client.CallOption) (*PassportStocksResponse, error)
	GetIssuedUserPassports(ctx context.Context, in *UserPassportRequest, opts ...client.CallOption) (*UserPassportsRes, error)
	GetUsedUserPassports(ctx context.Context, in *UserPassportRequest, opts ...client.CallOption) (*UserPassportsRes, error)
	GetInactiveUserPassports(ctx context.Context, in *UserPassportRequest, opts ...client.CallOption) (*UserPassportsRes, error)
	GetUserEventPassport(ctx context.Context, in *UserEventPassportRequest, opts ...client.CallOption) (*UserEventPassportResponse, error)
	CheckUserEventPassport(ctx context.Context, in *UserPassport, opts ...client.CallOption) (*UserEventPassportResponse, error)
	CreateUserEventPassport(ctx context.Context, in *UserPassport, opts ...client.CallOption) (*CreateUserEventPassportResponse, error)
	ActivateUserEventPassport(ctx context.Context, in *ActivateUserEventPassportRequest, opts ...client.CallOption) (*ActivateUserEventPassportResponse, error)
	GetClaimEventPassports(ctx context.Context, in *ActivateUserEventPassportRequest, opts ...client.CallOption) (*ActivateUserEventPassportResponse, error)
	GetEventUsers(ctx context.Context, in *EventUserRequest, opts ...client.CallOption) (*EventUserResponse, error)
	UpdateEventUserPoints(ctx context.Context, in *EventUserPoints, opts ...client.CallOption) (*EventUserPointsResponse, error)
	IncrementEventUserPoints(ctx context.Context, in *EventUserPoints, opts ...client.CallOption) (*EventUserPointsResponse, error)
	GetEventTasks(ctx context.Context, in *EventTaskRequest, opts ...client.CallOption) (*EventTaskResponse, error)
	GetCampRanks(ctx context.Context, in *CampRankRequest, opts ...client.CallOption) (*CampRankResponse, error)
	GetUserRanks(ctx context.Context, in *UserRankRequest, opts ...client.CallOption) (*UserRankResponse, error)
	GetUserEvents(ctx context.Context, in *UserEventRequest, opts ...client.CallOption) (*UserEventResponse, error)
	GetUserSwaps(ctx context.Context, in *UserSwapRequest, opts ...client.CallOption) (*UserSwapResponse, error)
	CreateUserSwap(ctx context.Context, in *CreateUserSwapRequest, opts ...client.CallOption) (*UserSwapResponse, error)
	UpdateUserSwap(ctx context.Context, in *UpdateUserSwapRequest, opts ...client.CallOption) (*UserSwapResponse, error)
	GetEventSettings(ctx context.Context, in *EventSettingsRequest, opts ...client.CallOption) (*EventSettingsResponse, error)
	UpdateEventSettings(ctx context.Context, in *UpdateEventSettingsRequest, opts ...client.CallOption) (*EventSettingsResponse, error)
	CreateEventAward(ctx context.Context, in *CreateEventAwardRequest, opts ...client.CallOption) (*EventAwardResponse, error)
	GetEventAwards(ctx context.Context, in *EventAwardRequest, opts ...client.CallOption) (*EventAwardResponse, error)
	UpdateEventAward(ctx context.Context, in *EventAward, opts ...client.CallOption) (*EventAwardResponse, error)
	DeleteEventAward(ctx context.Context, in *DeleteEventAwardRequest, opts ...client.CallOption) (*EventAwardResponse, error)
	GetNewEventAwards(ctx context.Context, in *NewEventAwardRequest, opts ...client.CallOption) (*EventAwardResponse, error)
	GetUserEventAwards(ctx context.Context, in *UserEventAwardRequest, opts ...client.CallOption) (*EventAwardResponse, error)
	UnbindUserPassport(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserPassportsRes, error)
	DeleteUserPassport(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserPassportsRes, error)
	UpdateUserStampCount(ctx context.Context, in *UserStampCountRequest, opts ...client.CallOption) (*UserStampCountResponse, error)
	IncrementUserStampCount(ctx context.Context, in *UserStampCountRequest, opts ...client.CallOption) (*UserStampCountResponse, error)
	GetExportPassports(ctx context.Context, in *ExportPassportRequest, opts ...client.CallOption) (*ExportPassportResponse, error)
}

type eventService struct {
	c    client.Client
	name string
}

func NewEventService(name string, c client.Client) EventService {
	return &eventService{
		c:    c,
		name: name,
	}
}

func (c *eventService) CreateEvent(ctx context.Context, in *Event, opts ...client.CallOption) (*EsKeyword, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateEvent", in)
	out := new(EsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateEvent(ctx context.Context, in *Event, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateEvent", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetEvent(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Event, error) {
	req := c.c.NewRequest(c.name, "EventService.GetEvent", in)
	out := new(Event)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetEvents(ctx context.Context, in *EsEmptyReq, opts ...client.CallOption) (*EventsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetEvents", in)
	out := new(EventsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreateEventScenerySpots(ctx context.Context, in *EventScenerySpots, opts ...client.CallOption) (*EventScenerySpots, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateEventScenerySpots", in)
	out := new(EventScenerySpots)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) RemoveEventScenerySpots(ctx context.Context, in *EventScenerySpots, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.RemoveEventScenerySpots", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetEventScenerySpots(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*EventScenerySpotsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetEventScenerySpots", in)
	out := new(EventScenerySpotsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreateBadge(ctx context.Context, in *Badge, opts ...client.CallOption) (*EsKeyword, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateBadge", in)
	out := new(EsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateBadge(ctx context.Context, in *Badge, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateBadge", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) DeleteBadge(ctx context.Context, in *Badge, opts ...client.CallOption) (*BadgesRes, error) {
	req := c.c.NewRequest(c.name, "EventService.DeleteBadge", in)
	out := new(BadgesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetBadge(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Badge, error) {
	req := c.c.NewRequest(c.name, "EventService.GetBadge", in)
	out := new(Badge)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetBadgesByEventID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*BadgesRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetBadgesByEventID", in)
	out := new(BadgesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreateUserBadge(ctx context.Context, in *UserBadge, opts ...client.CallOption) (*UserBadge, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateUserBadge", in)
	out := new(UserBadge)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateUserBadge(ctx context.Context, in *UserBadge, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateUserBadge", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) RemoveUserBadge(ctx context.Context, in *UserBadge, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.RemoveUserBadge", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserBadgeByUserID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserBadgesRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserBadgeByUserID", in)
	out := new(UserBadgesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreateUserBadgeSwap(ctx context.Context, in *UserBadgeSwap, opts ...client.CallOption) (*EsKeyword, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateUserBadgeSwap", in)
	out := new(EsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateUserBadgeSwap(ctx context.Context, in *UserBadgeSwap, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateUserBadgeSwap", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserBadgeSwap(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserBadgeSwap, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserBadgeSwap", in)
	out := new(UserBadgeSwap)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserBadgeSwapByPreviousID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserBadgeSwap, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserBadgeSwapByPreviousID", in)
	out := new(UserBadgeSwap)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserBadgeSwapByFrom(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserBadgeSwapsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserBadgeSwapByFrom", in)
	out := new(UserBadgeSwapsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserBadgeSwapByTo(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserBadgeSwapsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserBadgeSwapByTo", in)
	out := new(UserBadgeSwapsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreatePassportSet(ctx context.Context, in *PassportSet, opts ...client.CallOption) (*EsKeyword, error) {
	req := c.c.NewRequest(c.name, "EventService.CreatePassportSet", in)
	out := new(EsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdatePassportSet(ctx context.Context, in *PassportSet, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdatePassportSet", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetPassportSet(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*PassportSet, error) {
	req := c.c.NewRequest(c.name, "EventService.GetPassportSet", in)
	out := new(PassportSet)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetPassportSetByName(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*PassportSet, error) {
	req := c.c.NewRequest(c.name, "EventService.GetPassportSetByName", in)
	out := new(PassportSet)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetPassportSetByEventID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*PassportSetsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetPassportSetByEventID", in)
	out := new(PassportSetsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreatePassport(ctx context.Context, in *Passport, opts ...client.CallOption) (*EsKeyword, error) {
	req := c.c.NewRequest(c.name, "EventService.CreatePassport", in)
	out := new(EsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdatePassport(ctx context.Context, in *Passport, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdatePassport", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetPassport(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Passport, error) {
	req := c.c.NewRequest(c.name, "EventService.GetPassport", in)
	out := new(Passport)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetPassportByCode(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Passport, error) {
	req := c.c.NewRequest(c.name, "EventService.GetPassportByCode", in)
	out := new(Passport)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetPassportByPassportSetID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*PassportsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetPassportByPassportSetID", in)
	out := new(PassportsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetPassports(ctx context.Context, in *PassportRequest, opts ...client.CallOption) (*PassportsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetPassports", in)
	out := new(PassportsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) DeletePassport(ctx context.Context, in *DeletePassportRequest, opts ...client.CallOption) (*PassportsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.DeletePassport", in)
	out := new(PassportsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) SearchPassports(ctx context.Context, in *SearchPassportRequest, opts ...client.CallOption) (*SearchPassportResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.SearchPassports", in)
	out := new(SearchPassportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreateUserPassport(ctx context.Context, in *UserPassport, opts ...client.CallOption) (*EsKeyword, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateUserPassport", in)
	out := new(EsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateUserPassport(ctx context.Context, in *UserPassport, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateUserPassport", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserPassport(ctx context.Context, in *UserPassport, opts ...client.CallOption) (*UserPassport, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserPassport", in)
	out := new(UserPassport)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserPassportByUserID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserPassportsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserPassportByUserID", in)
	out := new(UserPassportsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserPassportByPassportID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserPassport, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserPassportByPassportID", in)
	out := new(UserPassport)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserPassportByGuardianName(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserPassportsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserPassportByGuardianName", in)
	out := new(UserPassportsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) RemoveUserPassport(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.RemoveUserPassport", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) PickupUserPassport(ctx context.Context, in *PickupPassportReq, opts ...client.CallOption) (*EsKeyword, error) {
	req := c.c.NewRequest(c.name, "EventService.PickupUserPassport", in)
	out := new(EsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateGuardianInfo(ctx context.Context, in *GuardianInfoReq, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateGuardianInfo", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) VerifyUserPassport(ctx context.Context, in *VerifyPassportReq, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.VerifyUserPassport", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetPickupCodeInfo(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*PickupCodeRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetPickupCodeInfo", in)
	out := new(PickupCodeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) ActivateUserPassport(ctx context.Context, in *ActivatePassportReq, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.ActivateUserPassport", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreateCamp(ctx context.Context, in *Camp, opts ...client.CallOption) (*EsKeyword, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateCamp", in)
	out := new(EsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateCamp(ctx context.Context, in *Camp, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateCamp", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetCamp(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Camp, error) {
	req := c.c.NewRequest(c.name, "EventService.GetCamp", in)
	out := new(Camp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetCampByEventID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*CampsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetCampByEventID", in)
	out := new(CampsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetCampWithUser(ctx context.Context, in *CampWithUserRequest, opts ...client.CallOption) (*CampsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetCampWithUser", in)
	out := new(CampsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreateHonour(ctx context.Context, in *Honour, opts ...client.CallOption) (*EsKeyword, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateHonour", in)
	out := new(EsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateHonour(ctx context.Context, in *Honour, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateHonour", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetHonour(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*Honour, error) {
	req := c.c.NewRequest(c.name, "EventService.GetHonour", in)
	out := new(Honour)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetHonourByCampID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*HonoursRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetHonourByCampID", in)
	out := new(HonoursRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreateUserCamp(ctx context.Context, in *UserCamp, opts ...client.CallOption) (*EsKeyword, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateUserCamp", in)
	out := new(EsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateUserCamp(ctx context.Context, in *UserCamp, opts ...client.CallOption) (*EsUpdateRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateUserCamp", in)
	out := new(EsUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserCamp(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserCamp, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserCamp", in)
	out := new(UserCamp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserCampByCampID(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserCampsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserCampByCampID", in)
	out := new(UserCampsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetPassportStocks(ctx context.Context, in *PassportStocksRequest, opts ...client.CallOption) (*PassportStocksResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetPassportStocks", in)
	out := new(PassportStocksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetIssuedUserPassports(ctx context.Context, in *UserPassportRequest, opts ...client.CallOption) (*UserPassportsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetIssuedUserPassports", in)
	out := new(UserPassportsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUsedUserPassports(ctx context.Context, in *UserPassportRequest, opts ...client.CallOption) (*UserPassportsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUsedUserPassports", in)
	out := new(UserPassportsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetInactiveUserPassports(ctx context.Context, in *UserPassportRequest, opts ...client.CallOption) (*UserPassportsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.GetInactiveUserPassports", in)
	out := new(UserPassportsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserEventPassport(ctx context.Context, in *UserEventPassportRequest, opts ...client.CallOption) (*UserEventPassportResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserEventPassport", in)
	out := new(UserEventPassportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CheckUserEventPassport(ctx context.Context, in *UserPassport, opts ...client.CallOption) (*UserEventPassportResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.CheckUserEventPassport", in)
	out := new(UserEventPassportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreateUserEventPassport(ctx context.Context, in *UserPassport, opts ...client.CallOption) (*CreateUserEventPassportResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateUserEventPassport", in)
	out := new(CreateUserEventPassportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) ActivateUserEventPassport(ctx context.Context, in *ActivateUserEventPassportRequest, opts ...client.CallOption) (*ActivateUserEventPassportResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.ActivateUserEventPassport", in)
	out := new(ActivateUserEventPassportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetClaimEventPassports(ctx context.Context, in *ActivateUserEventPassportRequest, opts ...client.CallOption) (*ActivateUserEventPassportResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetClaimEventPassports", in)
	out := new(ActivateUserEventPassportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetEventUsers(ctx context.Context, in *EventUserRequest, opts ...client.CallOption) (*EventUserResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetEventUsers", in)
	out := new(EventUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateEventUserPoints(ctx context.Context, in *EventUserPoints, opts ...client.CallOption) (*EventUserPointsResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateEventUserPoints", in)
	out := new(EventUserPointsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) IncrementEventUserPoints(ctx context.Context, in *EventUserPoints, opts ...client.CallOption) (*EventUserPointsResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.IncrementEventUserPoints", in)
	out := new(EventUserPointsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetEventTasks(ctx context.Context, in *EventTaskRequest, opts ...client.CallOption) (*EventTaskResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetEventTasks", in)
	out := new(EventTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetCampRanks(ctx context.Context, in *CampRankRequest, opts ...client.CallOption) (*CampRankResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetCampRanks", in)
	out := new(CampRankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserRanks(ctx context.Context, in *UserRankRequest, opts ...client.CallOption) (*UserRankResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserRanks", in)
	out := new(UserRankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserEvents(ctx context.Context, in *UserEventRequest, opts ...client.CallOption) (*UserEventResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserEvents", in)
	out := new(UserEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserSwaps(ctx context.Context, in *UserSwapRequest, opts ...client.CallOption) (*UserSwapResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserSwaps", in)
	out := new(UserSwapResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreateUserSwap(ctx context.Context, in *CreateUserSwapRequest, opts ...client.CallOption) (*UserSwapResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateUserSwap", in)
	out := new(UserSwapResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateUserSwap(ctx context.Context, in *UpdateUserSwapRequest, opts ...client.CallOption) (*UserSwapResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateUserSwap", in)
	out := new(UserSwapResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetEventSettings(ctx context.Context, in *EventSettingsRequest, opts ...client.CallOption) (*EventSettingsResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetEventSettings", in)
	out := new(EventSettingsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateEventSettings(ctx context.Context, in *UpdateEventSettingsRequest, opts ...client.CallOption) (*EventSettingsResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateEventSettings", in)
	out := new(EventSettingsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) CreateEventAward(ctx context.Context, in *CreateEventAwardRequest, opts ...client.CallOption) (*EventAwardResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.CreateEventAward", in)
	out := new(EventAwardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetEventAwards(ctx context.Context, in *EventAwardRequest, opts ...client.CallOption) (*EventAwardResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetEventAwards", in)
	out := new(EventAwardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateEventAward(ctx context.Context, in *EventAward, opts ...client.CallOption) (*EventAwardResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateEventAward", in)
	out := new(EventAwardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) DeleteEventAward(ctx context.Context, in *DeleteEventAwardRequest, opts ...client.CallOption) (*EventAwardResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.DeleteEventAward", in)
	out := new(EventAwardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetNewEventAwards(ctx context.Context, in *NewEventAwardRequest, opts ...client.CallOption) (*EventAwardResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetNewEventAwards", in)
	out := new(EventAwardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetUserEventAwards(ctx context.Context, in *UserEventAwardRequest, opts ...client.CallOption) (*EventAwardResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetUserEventAwards", in)
	out := new(EventAwardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UnbindUserPassport(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserPassportsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.UnbindUserPassport", in)
	out := new(UserPassportsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) DeleteUserPassport(ctx context.Context, in *EsKeyword, opts ...client.CallOption) (*UserPassportsRes, error) {
	req := c.c.NewRequest(c.name, "EventService.DeleteUserPassport", in)
	out := new(UserPassportsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) UpdateUserStampCount(ctx context.Context, in *UserStampCountRequest, opts ...client.CallOption) (*UserStampCountResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.UpdateUserStampCount", in)
	out := new(UserStampCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) IncrementUserStampCount(ctx context.Context, in *UserStampCountRequest, opts ...client.CallOption) (*UserStampCountResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.IncrementUserStampCount", in)
	out := new(UserStampCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetExportPassports(ctx context.Context, in *ExportPassportRequest, opts ...client.CallOption) (*ExportPassportResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetExportPassports", in)
	out := new(ExportPassportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventService service

type EventServiceHandler interface {
	CreateEvent(context.Context, *Event, *EsKeyword) error
	UpdateEvent(context.Context, *Event, *EsUpdateRes) error
	GetEvent(context.Context, *EsKeyword, *Event) error
	GetEvents(context.Context, *EsEmptyReq, *EventsRes) error
	CreateEventScenerySpots(context.Context, *EventScenerySpots, *EventScenerySpots) error
	RemoveEventScenerySpots(context.Context, *EventScenerySpots, *EsUpdateRes) error
	GetEventScenerySpots(context.Context, *EsKeyword, *EventScenerySpotsRes) error
	CreateBadge(context.Context, *Badge, *EsKeyword) error
	UpdateBadge(context.Context, *Badge, *EsUpdateRes) error
	DeleteBadge(context.Context, *Badge, *BadgesRes) error
	GetBadge(context.Context, *EsKeyword, *Badge) error
	GetBadgesByEventID(context.Context, *EsKeyword, *BadgesRes) error
	CreateUserBadge(context.Context, *UserBadge, *UserBadge) error
	UpdateUserBadge(context.Context, *UserBadge, *EsUpdateRes) error
	RemoveUserBadge(context.Context, *UserBadge, *EsUpdateRes) error
	GetUserBadgeByUserID(context.Context, *EsKeyword, *UserBadgesRes) error
	CreateUserBadgeSwap(context.Context, *UserBadgeSwap, *EsKeyword) error
	UpdateUserBadgeSwap(context.Context, *UserBadgeSwap, *EsUpdateRes) error
	GetUserBadgeSwap(context.Context, *EsKeyword, *UserBadgeSwap) error
	GetUserBadgeSwapByPreviousID(context.Context, *EsKeyword, *UserBadgeSwap) error
	GetUserBadgeSwapByFrom(context.Context, *EsKeyword, *UserBadgeSwapsRes) error
	GetUserBadgeSwapByTo(context.Context, *EsKeyword, *UserBadgeSwapsRes) error
	CreatePassportSet(context.Context, *PassportSet, *EsKeyword) error
	UpdatePassportSet(context.Context, *PassportSet, *EsUpdateRes) error
	GetPassportSet(context.Context, *EsKeyword, *PassportSet) error
	GetPassportSetByName(context.Context, *EsKeyword, *PassportSet) error
	GetPassportSetByEventID(context.Context, *EsKeyword, *PassportSetsRes) error
	CreatePassport(context.Context, *Passport, *EsKeyword) error
	UpdatePassport(context.Context, *Passport, *EsUpdateRes) error
	GetPassport(context.Context, *EsKeyword, *Passport) error
	GetPassportByCode(context.Context, *EsKeyword, *Passport) error
	GetPassportByPassportSetID(context.Context, *EsKeyword, *PassportsRes) error
	GetPassports(context.Context, *PassportRequest, *PassportsRes) error
	DeletePassport(context.Context, *DeletePassportRequest, *PassportsRes) error
	SearchPassports(context.Context, *SearchPassportRequest, *SearchPassportResponse) error
	CreateUserPassport(context.Context, *UserPassport, *EsKeyword) error
	UpdateUserPassport(context.Context, *UserPassport, *EsUpdateRes) error
	GetUserPassport(context.Context, *UserPassport, *UserPassport) error
	GetUserPassportByUserID(context.Context, *EsKeyword, *UserPassportsRes) error
	GetUserPassportByPassportID(context.Context, *EsKeyword, *UserPassport) error
	GetUserPassportByGuardianName(context.Context, *EsKeyword, *UserPassportsRes) error
	RemoveUserPassport(context.Context, *EsKeyword, *EsUpdateRes) error
	PickupUserPassport(context.Context, *PickupPassportReq, *EsKeyword) error
	UpdateGuardianInfo(context.Context, *GuardianInfoReq, *EsUpdateRes) error
	VerifyUserPassport(context.Context, *VerifyPassportReq, *EsUpdateRes) error
	GetPickupCodeInfo(context.Context, *EsKeyword, *PickupCodeRes) error
	ActivateUserPassport(context.Context, *ActivatePassportReq, *EsUpdateRes) error
	CreateCamp(context.Context, *Camp, *EsKeyword) error
	UpdateCamp(context.Context, *Camp, *EsUpdateRes) error
	GetCamp(context.Context, *EsKeyword, *Camp) error
	GetCampByEventID(context.Context, *EsKeyword, *CampsRes) error
	GetCampWithUser(context.Context, *CampWithUserRequest, *CampsRes) error
	CreateHonour(context.Context, *Honour, *EsKeyword) error
	UpdateHonour(context.Context, *Honour, *EsUpdateRes) error
	GetHonour(context.Context, *EsKeyword, *Honour) error
	GetHonourByCampID(context.Context, *EsKeyword, *HonoursRes) error
	CreateUserCamp(context.Context, *UserCamp, *EsKeyword) error
	UpdateUserCamp(context.Context, *UserCamp, *EsUpdateRes) error
	GetUserCamp(context.Context, *EsKeyword, *UserCamp) error
	GetUserCampByCampID(context.Context, *EsKeyword, *UserCampsRes) error
	GetPassportStocks(context.Context, *PassportStocksRequest, *PassportStocksResponse) error
	GetIssuedUserPassports(context.Context, *UserPassportRequest, *UserPassportsRes) error
	GetUsedUserPassports(context.Context, *UserPassportRequest, *UserPassportsRes) error
	GetInactiveUserPassports(context.Context, *UserPassportRequest, *UserPassportsRes) error
	GetUserEventPassport(context.Context, *UserEventPassportRequest, *UserEventPassportResponse) error
	CheckUserEventPassport(context.Context, *UserPassport, *UserEventPassportResponse) error
	CreateUserEventPassport(context.Context, *UserPassport, *CreateUserEventPassportResponse) error
	ActivateUserEventPassport(context.Context, *ActivateUserEventPassportRequest, *ActivateUserEventPassportResponse) error
	GetClaimEventPassports(context.Context, *ActivateUserEventPassportRequest, *ActivateUserEventPassportResponse) error
	GetEventUsers(context.Context, *EventUserRequest, *EventUserResponse) error
	UpdateEventUserPoints(context.Context, *EventUserPoints, *EventUserPointsResponse) error
	IncrementEventUserPoints(context.Context, *EventUserPoints, *EventUserPointsResponse) error
	GetEventTasks(context.Context, *EventTaskRequest, *EventTaskResponse) error
	GetCampRanks(context.Context, *CampRankRequest, *CampRankResponse) error
	GetUserRanks(context.Context, *UserRankRequest, *UserRankResponse) error
	GetUserEvents(context.Context, *UserEventRequest, *UserEventResponse) error
	GetUserSwaps(context.Context, *UserSwapRequest, *UserSwapResponse) error
	CreateUserSwap(context.Context, *CreateUserSwapRequest, *UserSwapResponse) error
	UpdateUserSwap(context.Context, *UpdateUserSwapRequest, *UserSwapResponse) error
	GetEventSettings(context.Context, *EventSettingsRequest, *EventSettingsResponse) error
	UpdateEventSettings(context.Context, *UpdateEventSettingsRequest, *EventSettingsResponse) error
	CreateEventAward(context.Context, *CreateEventAwardRequest, *EventAwardResponse) error
	GetEventAwards(context.Context, *EventAwardRequest, *EventAwardResponse) error
	UpdateEventAward(context.Context, *EventAward, *EventAwardResponse) error
	DeleteEventAward(context.Context, *DeleteEventAwardRequest, *EventAwardResponse) error
	GetNewEventAwards(context.Context, *NewEventAwardRequest, *EventAwardResponse) error
	GetUserEventAwards(context.Context, *UserEventAwardRequest, *EventAwardResponse) error
	UnbindUserPassport(context.Context, *EsKeyword, *UserPassportsRes) error
	DeleteUserPassport(context.Context, *EsKeyword, *UserPassportsRes) error
	UpdateUserStampCount(context.Context, *UserStampCountRequest, *UserStampCountResponse) error
	IncrementUserStampCount(context.Context, *UserStampCountRequest, *UserStampCountResponse) error
	GetExportPassports(context.Context, *ExportPassportRequest, *ExportPassportResponse) error
}

func RegisterEventServiceHandler(s server.Server, hdlr EventServiceHandler, opts ...server.HandlerOption) error {
	type eventService interface {
		CreateEvent(ctx context.Context, in *Event, out *EsKeyword) error
		UpdateEvent(ctx context.Context, in *Event, out *EsUpdateRes) error
		GetEvent(ctx context.Context, in *EsKeyword, out *Event) error
		GetEvents(ctx context.Context, in *EsEmptyReq, out *EventsRes) error
		CreateEventScenerySpots(ctx context.Context, in *EventScenerySpots, out *EventScenerySpots) error
		RemoveEventScenerySpots(ctx context.Context, in *EventScenerySpots, out *EsUpdateRes) error
		GetEventScenerySpots(ctx context.Context, in *EsKeyword, out *EventScenerySpotsRes) error
		CreateBadge(ctx context.Context, in *Badge, out *EsKeyword) error
		UpdateBadge(ctx context.Context, in *Badge, out *EsUpdateRes) error
		DeleteBadge(ctx context.Context, in *Badge, out *BadgesRes) error
		GetBadge(ctx context.Context, in *EsKeyword, out *Badge) error
		GetBadgesByEventID(ctx context.Context, in *EsKeyword, out *BadgesRes) error
		CreateUserBadge(ctx context.Context, in *UserBadge, out *UserBadge) error
		UpdateUserBadge(ctx context.Context, in *UserBadge, out *EsUpdateRes) error
		RemoveUserBadge(ctx context.Context, in *UserBadge, out *EsUpdateRes) error
		GetUserBadgeByUserID(ctx context.Context, in *EsKeyword, out *UserBadgesRes) error
		CreateUserBadgeSwap(ctx context.Context, in *UserBadgeSwap, out *EsKeyword) error
		UpdateUserBadgeSwap(ctx context.Context, in *UserBadgeSwap, out *EsUpdateRes) error
		GetUserBadgeSwap(ctx context.Context, in *EsKeyword, out *UserBadgeSwap) error
		GetUserBadgeSwapByPreviousID(ctx context.Context, in *EsKeyword, out *UserBadgeSwap) error
		GetUserBadgeSwapByFrom(ctx context.Context, in *EsKeyword, out *UserBadgeSwapsRes) error
		GetUserBadgeSwapByTo(ctx context.Context, in *EsKeyword, out *UserBadgeSwapsRes) error
		CreatePassportSet(ctx context.Context, in *PassportSet, out *EsKeyword) error
		UpdatePassportSet(ctx context.Context, in *PassportSet, out *EsUpdateRes) error
		GetPassportSet(ctx context.Context, in *EsKeyword, out *PassportSet) error
		GetPassportSetByName(ctx context.Context, in *EsKeyword, out *PassportSet) error
		GetPassportSetByEventID(ctx context.Context, in *EsKeyword, out *PassportSetsRes) error
		CreatePassport(ctx context.Context, in *Passport, out *EsKeyword) error
		UpdatePassport(ctx context.Context, in *Passport, out *EsUpdateRes) error
		GetPassport(ctx context.Context, in *EsKeyword, out *Passport) error
		GetPassportByCode(ctx context.Context, in *EsKeyword, out *Passport) error
		GetPassportByPassportSetID(ctx context.Context, in *EsKeyword, out *PassportsRes) error
		GetPassports(ctx context.Context, in *PassportRequest, out *PassportsRes) error
		DeletePassport(ctx context.Context, in *DeletePassportRequest, out *PassportsRes) error
		SearchPassports(ctx context.Context, in *SearchPassportRequest, out *SearchPassportResponse) error
		CreateUserPassport(ctx context.Context, in *UserPassport, out *EsKeyword) error
		UpdateUserPassport(ctx context.Context, in *UserPassport, out *EsUpdateRes) error
		GetUserPassport(ctx context.Context, in *UserPassport, out *UserPassport) error
		GetUserPassportByUserID(ctx context.Context, in *EsKeyword, out *UserPassportsRes) error
		GetUserPassportByPassportID(ctx context.Context, in *EsKeyword, out *UserPassport) error
		GetUserPassportByGuardianName(ctx context.Context, in *EsKeyword, out *UserPassportsRes) error
		RemoveUserPassport(ctx context.Context, in *EsKeyword, out *EsUpdateRes) error
		PickupUserPassport(ctx context.Context, in *PickupPassportReq, out *EsKeyword) error
		UpdateGuardianInfo(ctx context.Context, in *GuardianInfoReq, out *EsUpdateRes) error
		VerifyUserPassport(ctx context.Context, in *VerifyPassportReq, out *EsUpdateRes) error
		GetPickupCodeInfo(ctx context.Context, in *EsKeyword, out *PickupCodeRes) error
		ActivateUserPassport(ctx context.Context, in *ActivatePassportReq, out *EsUpdateRes) error
		CreateCamp(ctx context.Context, in *Camp, out *EsKeyword) error
		UpdateCamp(ctx context.Context, in *Camp, out *EsUpdateRes) error
		GetCamp(ctx context.Context, in *EsKeyword, out *Camp) error
		GetCampByEventID(ctx context.Context, in *EsKeyword, out *CampsRes) error
		GetCampWithUser(ctx context.Context, in *CampWithUserRequest, out *CampsRes) error
		CreateHonour(ctx context.Context, in *Honour, out *EsKeyword) error
		UpdateHonour(ctx context.Context, in *Honour, out *EsUpdateRes) error
		GetHonour(ctx context.Context, in *EsKeyword, out *Honour) error
		GetHonourByCampID(ctx context.Context, in *EsKeyword, out *HonoursRes) error
		CreateUserCamp(ctx context.Context, in *UserCamp, out *EsKeyword) error
		UpdateUserCamp(ctx context.Context, in *UserCamp, out *EsUpdateRes) error
		GetUserCamp(ctx context.Context, in *EsKeyword, out *UserCamp) error
		GetUserCampByCampID(ctx context.Context, in *EsKeyword, out *UserCampsRes) error
		GetPassportStocks(ctx context.Context, in *PassportStocksRequest, out *PassportStocksResponse) error
		GetIssuedUserPassports(ctx context.Context, in *UserPassportRequest, out *UserPassportsRes) error
		GetUsedUserPassports(ctx context.Context, in *UserPassportRequest, out *UserPassportsRes) error
		GetInactiveUserPassports(ctx context.Context, in *UserPassportRequest, out *UserPassportsRes) error
		GetUserEventPassport(ctx context.Context, in *UserEventPassportRequest, out *UserEventPassportResponse) error
		CheckUserEventPassport(ctx context.Context, in *UserPassport, out *UserEventPassportResponse) error
		CreateUserEventPassport(ctx context.Context, in *UserPassport, out *CreateUserEventPassportResponse) error
		ActivateUserEventPassport(ctx context.Context, in *ActivateUserEventPassportRequest, out *ActivateUserEventPassportResponse) error
		GetClaimEventPassports(ctx context.Context, in *ActivateUserEventPassportRequest, out *ActivateUserEventPassportResponse) error
		GetEventUsers(ctx context.Context, in *EventUserRequest, out *EventUserResponse) error
		UpdateEventUserPoints(ctx context.Context, in *EventUserPoints, out *EventUserPointsResponse) error
		IncrementEventUserPoints(ctx context.Context, in *EventUserPoints, out *EventUserPointsResponse) error
		GetEventTasks(ctx context.Context, in *EventTaskRequest, out *EventTaskResponse) error
		GetCampRanks(ctx context.Context, in *CampRankRequest, out *CampRankResponse) error
		GetUserRanks(ctx context.Context, in *UserRankRequest, out *UserRankResponse) error
		GetUserEvents(ctx context.Context, in *UserEventRequest, out *UserEventResponse) error
		GetUserSwaps(ctx context.Context, in *UserSwapRequest, out *UserSwapResponse) error
		CreateUserSwap(ctx context.Context, in *CreateUserSwapRequest, out *UserSwapResponse) error
		UpdateUserSwap(ctx context.Context, in *UpdateUserSwapRequest, out *UserSwapResponse) error
		GetEventSettings(ctx context.Context, in *EventSettingsRequest, out *EventSettingsResponse) error
		UpdateEventSettings(ctx context.Context, in *UpdateEventSettingsRequest, out *EventSettingsResponse) error
		CreateEventAward(ctx context.Context, in *CreateEventAwardRequest, out *EventAwardResponse) error
		GetEventAwards(ctx context.Context, in *EventAwardRequest, out *EventAwardResponse) error
		UpdateEventAward(ctx context.Context, in *EventAward, out *EventAwardResponse) error
		DeleteEventAward(ctx context.Context, in *DeleteEventAwardRequest, out *EventAwardResponse) error
		GetNewEventAwards(ctx context.Context, in *NewEventAwardRequest, out *EventAwardResponse) error
		GetUserEventAwards(ctx context.Context, in *UserEventAwardRequest, out *EventAwardResponse) error
		UnbindUserPassport(ctx context.Context, in *EsKeyword, out *UserPassportsRes) error
		DeleteUserPassport(ctx context.Context, in *EsKeyword, out *UserPassportsRes) error
		UpdateUserStampCount(ctx context.Context, in *UserStampCountRequest, out *UserStampCountResponse) error
		IncrementUserStampCount(ctx context.Context, in *UserStampCountRequest, out *UserStampCountResponse) error
		GetExportPassports(ctx context.Context, in *ExportPassportRequest, out *ExportPassportResponse) error
	}
	type EventService struct {
		eventService
	}
	h := &eventServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EventService{h}, opts...))
}

type eventServiceHandler struct {
	EventServiceHandler
}

func (h *eventServiceHandler) CreateEvent(ctx context.Context, in *Event, out *EsKeyword) error {
	return h.EventServiceHandler.CreateEvent(ctx, in, out)
}

func (h *eventServiceHandler) UpdateEvent(ctx context.Context, in *Event, out *EsUpdateRes) error {
	return h.EventServiceHandler.UpdateEvent(ctx, in, out)
}

func (h *eventServiceHandler) GetEvent(ctx context.Context, in *EsKeyword, out *Event) error {
	return h.EventServiceHandler.GetEvent(ctx, in, out)
}

func (h *eventServiceHandler) GetEvents(ctx context.Context, in *EsEmptyReq, out *EventsRes) error {
	return h.EventServiceHandler.GetEvents(ctx, in, out)
}

func (h *eventServiceHandler) CreateEventScenerySpots(ctx context.Context, in *EventScenerySpots, out *EventScenerySpots) error {
	return h.EventServiceHandler.CreateEventScenerySpots(ctx, in, out)
}

func (h *eventServiceHandler) RemoveEventScenerySpots(ctx context.Context, in *EventScenerySpots, out *EsUpdateRes) error {
	return h.EventServiceHandler.RemoveEventScenerySpots(ctx, in, out)
}

func (h *eventServiceHandler) GetEventScenerySpots(ctx context.Context, in *EsKeyword, out *EventScenerySpotsRes) error {
	return h.EventServiceHandler.GetEventScenerySpots(ctx, in, out)
}

func (h *eventServiceHandler) CreateBadge(ctx context.Context, in *Badge, out *EsKeyword) error {
	return h.EventServiceHandler.CreateBadge(ctx, in, out)
}

func (h *eventServiceHandler) UpdateBadge(ctx context.Context, in *Badge, out *EsUpdateRes) error {
	return h.EventServiceHandler.UpdateBadge(ctx, in, out)
}

func (h *eventServiceHandler) DeleteBadge(ctx context.Context, in *Badge, out *BadgesRes) error {
	return h.EventServiceHandler.DeleteBadge(ctx, in, out)
}

func (h *eventServiceHandler) GetBadge(ctx context.Context, in *EsKeyword, out *Badge) error {
	return h.EventServiceHandler.GetBadge(ctx, in, out)
}

func (h *eventServiceHandler) GetBadgesByEventID(ctx context.Context, in *EsKeyword, out *BadgesRes) error {
	return h.EventServiceHandler.GetBadgesByEventID(ctx, in, out)
}

func (h *eventServiceHandler) CreateUserBadge(ctx context.Context, in *UserBadge, out *UserBadge) error {
	return h.EventServiceHandler.CreateUserBadge(ctx, in, out)
}

func (h *eventServiceHandler) UpdateUserBadge(ctx context.Context, in *UserBadge, out *EsUpdateRes) error {
	return h.EventServiceHandler.UpdateUserBadge(ctx, in, out)
}

func (h *eventServiceHandler) RemoveUserBadge(ctx context.Context, in *UserBadge, out *EsUpdateRes) error {
	return h.EventServiceHandler.RemoveUserBadge(ctx, in, out)
}

func (h *eventServiceHandler) GetUserBadgeByUserID(ctx context.Context, in *EsKeyword, out *UserBadgesRes) error {
	return h.EventServiceHandler.GetUserBadgeByUserID(ctx, in, out)
}

func (h *eventServiceHandler) CreateUserBadgeSwap(ctx context.Context, in *UserBadgeSwap, out *EsKeyword) error {
	return h.EventServiceHandler.CreateUserBadgeSwap(ctx, in, out)
}

func (h *eventServiceHandler) UpdateUserBadgeSwap(ctx context.Context, in *UserBadgeSwap, out *EsUpdateRes) error {
	return h.EventServiceHandler.UpdateUserBadgeSwap(ctx, in, out)
}

func (h *eventServiceHandler) GetUserBadgeSwap(ctx context.Context, in *EsKeyword, out *UserBadgeSwap) error {
	return h.EventServiceHandler.GetUserBadgeSwap(ctx, in, out)
}

func (h *eventServiceHandler) GetUserBadgeSwapByPreviousID(ctx context.Context, in *EsKeyword, out *UserBadgeSwap) error {
	return h.EventServiceHandler.GetUserBadgeSwapByPreviousID(ctx, in, out)
}

func (h *eventServiceHandler) GetUserBadgeSwapByFrom(ctx context.Context, in *EsKeyword, out *UserBadgeSwapsRes) error {
	return h.EventServiceHandler.GetUserBadgeSwapByFrom(ctx, in, out)
}

func (h *eventServiceHandler) GetUserBadgeSwapByTo(ctx context.Context, in *EsKeyword, out *UserBadgeSwapsRes) error {
	return h.EventServiceHandler.GetUserBadgeSwapByTo(ctx, in, out)
}

func (h *eventServiceHandler) CreatePassportSet(ctx context.Context, in *PassportSet, out *EsKeyword) error {
	return h.EventServiceHandler.CreatePassportSet(ctx, in, out)
}

func (h *eventServiceHandler) UpdatePassportSet(ctx context.Context, in *PassportSet, out *EsUpdateRes) error {
	return h.EventServiceHandler.UpdatePassportSet(ctx, in, out)
}

func (h *eventServiceHandler) GetPassportSet(ctx context.Context, in *EsKeyword, out *PassportSet) error {
	return h.EventServiceHandler.GetPassportSet(ctx, in, out)
}

func (h *eventServiceHandler) GetPassportSetByName(ctx context.Context, in *EsKeyword, out *PassportSet) error {
	return h.EventServiceHandler.GetPassportSetByName(ctx, in, out)
}

func (h *eventServiceHandler) GetPassportSetByEventID(ctx context.Context, in *EsKeyword, out *PassportSetsRes) error {
	return h.EventServiceHandler.GetPassportSetByEventID(ctx, in, out)
}

func (h *eventServiceHandler) CreatePassport(ctx context.Context, in *Passport, out *EsKeyword) error {
	return h.EventServiceHandler.CreatePassport(ctx, in, out)
}

func (h *eventServiceHandler) UpdatePassport(ctx context.Context, in *Passport, out *EsUpdateRes) error {
	return h.EventServiceHandler.UpdatePassport(ctx, in, out)
}

func (h *eventServiceHandler) GetPassport(ctx context.Context, in *EsKeyword, out *Passport) error {
	return h.EventServiceHandler.GetPassport(ctx, in, out)
}

func (h *eventServiceHandler) GetPassportByCode(ctx context.Context, in *EsKeyword, out *Passport) error {
	return h.EventServiceHandler.GetPassportByCode(ctx, in, out)
}

func (h *eventServiceHandler) GetPassportByPassportSetID(ctx context.Context, in *EsKeyword, out *PassportsRes) error {
	return h.EventServiceHandler.GetPassportByPassportSetID(ctx, in, out)
}

func (h *eventServiceHandler) GetPassports(ctx context.Context, in *PassportRequest, out *PassportsRes) error {
	return h.EventServiceHandler.GetPassports(ctx, in, out)
}

func (h *eventServiceHandler) DeletePassport(ctx context.Context, in *DeletePassportRequest, out *PassportsRes) error {
	return h.EventServiceHandler.DeletePassport(ctx, in, out)
}

func (h *eventServiceHandler) SearchPassports(ctx context.Context, in *SearchPassportRequest, out *SearchPassportResponse) error {
	return h.EventServiceHandler.SearchPassports(ctx, in, out)
}

func (h *eventServiceHandler) CreateUserPassport(ctx context.Context, in *UserPassport, out *EsKeyword) error {
	return h.EventServiceHandler.CreateUserPassport(ctx, in, out)
}

func (h *eventServiceHandler) UpdateUserPassport(ctx context.Context, in *UserPassport, out *EsUpdateRes) error {
	return h.EventServiceHandler.UpdateUserPassport(ctx, in, out)
}

func (h *eventServiceHandler) GetUserPassport(ctx context.Context, in *UserPassport, out *UserPassport) error {
	return h.EventServiceHandler.GetUserPassport(ctx, in, out)
}

func (h *eventServiceHandler) GetUserPassportByUserID(ctx context.Context, in *EsKeyword, out *UserPassportsRes) error {
	return h.EventServiceHandler.GetUserPassportByUserID(ctx, in, out)
}

func (h *eventServiceHandler) GetUserPassportByPassportID(ctx context.Context, in *EsKeyword, out *UserPassport) error {
	return h.EventServiceHandler.GetUserPassportByPassportID(ctx, in, out)
}

func (h *eventServiceHandler) GetUserPassportByGuardianName(ctx context.Context, in *EsKeyword, out *UserPassportsRes) error {
	return h.EventServiceHandler.GetUserPassportByGuardianName(ctx, in, out)
}

func (h *eventServiceHandler) RemoveUserPassport(ctx context.Context, in *EsKeyword, out *EsUpdateRes) error {
	return h.EventServiceHandler.RemoveUserPassport(ctx, in, out)
}

func (h *eventServiceHandler) PickupUserPassport(ctx context.Context, in *PickupPassportReq, out *EsKeyword) error {
	return h.EventServiceHandler.PickupUserPassport(ctx, in, out)
}

func (h *eventServiceHandler) UpdateGuardianInfo(ctx context.Context, in *GuardianInfoReq, out *EsUpdateRes) error {
	return h.EventServiceHandler.UpdateGuardianInfo(ctx, in, out)
}

func (h *eventServiceHandler) VerifyUserPassport(ctx context.Context, in *VerifyPassportReq, out *EsUpdateRes) error {
	return h.EventServiceHandler.VerifyUserPassport(ctx, in, out)
}

func (h *eventServiceHandler) GetPickupCodeInfo(ctx context.Context, in *EsKeyword, out *PickupCodeRes) error {
	return h.EventServiceHandler.GetPickupCodeInfo(ctx, in, out)
}

func (h *eventServiceHandler) ActivateUserPassport(ctx context.Context, in *ActivatePassportReq, out *EsUpdateRes) error {
	return h.EventServiceHandler.ActivateUserPassport(ctx, in, out)
}

func (h *eventServiceHandler) CreateCamp(ctx context.Context, in *Camp, out *EsKeyword) error {
	return h.EventServiceHandler.CreateCamp(ctx, in, out)
}

func (h *eventServiceHandler) UpdateCamp(ctx context.Context, in *Camp, out *EsUpdateRes) error {
	return h.EventServiceHandler.UpdateCamp(ctx, in, out)
}

func (h *eventServiceHandler) GetCamp(ctx context.Context, in *EsKeyword, out *Camp) error {
	return h.EventServiceHandler.GetCamp(ctx, in, out)
}

func (h *eventServiceHandler) GetCampByEventID(ctx context.Context, in *EsKeyword, out *CampsRes) error {
	return h.EventServiceHandler.GetCampByEventID(ctx, in, out)
}

func (h *eventServiceHandler) GetCampWithUser(ctx context.Context, in *CampWithUserRequest, out *CampsRes) error {
	return h.EventServiceHandler.GetCampWithUser(ctx, in, out)
}

func (h *eventServiceHandler) CreateHonour(ctx context.Context, in *Honour, out *EsKeyword) error {
	return h.EventServiceHandler.CreateHonour(ctx, in, out)
}

func (h *eventServiceHandler) UpdateHonour(ctx context.Context, in *Honour, out *EsUpdateRes) error {
	return h.EventServiceHandler.UpdateHonour(ctx, in, out)
}

func (h *eventServiceHandler) GetHonour(ctx context.Context, in *EsKeyword, out *Honour) error {
	return h.EventServiceHandler.GetHonour(ctx, in, out)
}

func (h *eventServiceHandler) GetHonourByCampID(ctx context.Context, in *EsKeyword, out *HonoursRes) error {
	return h.EventServiceHandler.GetHonourByCampID(ctx, in, out)
}

func (h *eventServiceHandler) CreateUserCamp(ctx context.Context, in *UserCamp, out *EsKeyword) error {
	return h.EventServiceHandler.CreateUserCamp(ctx, in, out)
}

func (h *eventServiceHandler) UpdateUserCamp(ctx context.Context, in *UserCamp, out *EsUpdateRes) error {
	return h.EventServiceHandler.UpdateUserCamp(ctx, in, out)
}

func (h *eventServiceHandler) GetUserCamp(ctx context.Context, in *EsKeyword, out *UserCamp) error {
	return h.EventServiceHandler.GetUserCamp(ctx, in, out)
}

func (h *eventServiceHandler) GetUserCampByCampID(ctx context.Context, in *EsKeyword, out *UserCampsRes) error {
	return h.EventServiceHandler.GetUserCampByCampID(ctx, in, out)
}

func (h *eventServiceHandler) GetPassportStocks(ctx context.Context, in *PassportStocksRequest, out *PassportStocksResponse) error {
	return h.EventServiceHandler.GetPassportStocks(ctx, in, out)
}

func (h *eventServiceHandler) GetIssuedUserPassports(ctx context.Context, in *UserPassportRequest, out *UserPassportsRes) error {
	return h.EventServiceHandler.GetIssuedUserPassports(ctx, in, out)
}

func (h *eventServiceHandler) GetUsedUserPassports(ctx context.Context, in *UserPassportRequest, out *UserPassportsRes) error {
	return h.EventServiceHandler.GetUsedUserPassports(ctx, in, out)
}

func (h *eventServiceHandler) GetInactiveUserPassports(ctx context.Context, in *UserPassportRequest, out *UserPassportsRes) error {
	return h.EventServiceHandler.GetInactiveUserPassports(ctx, in, out)
}

func (h *eventServiceHandler) GetUserEventPassport(ctx context.Context, in *UserEventPassportRequest, out *UserEventPassportResponse) error {
	return h.EventServiceHandler.GetUserEventPassport(ctx, in, out)
}

func (h *eventServiceHandler) CheckUserEventPassport(ctx context.Context, in *UserPassport, out *UserEventPassportResponse) error {
	return h.EventServiceHandler.CheckUserEventPassport(ctx, in, out)
}

func (h *eventServiceHandler) CreateUserEventPassport(ctx context.Context, in *UserPassport, out *CreateUserEventPassportResponse) error {
	return h.EventServiceHandler.CreateUserEventPassport(ctx, in, out)
}

func (h *eventServiceHandler) ActivateUserEventPassport(ctx context.Context, in *ActivateUserEventPassportRequest, out *ActivateUserEventPassportResponse) error {
	return h.EventServiceHandler.ActivateUserEventPassport(ctx, in, out)
}

func (h *eventServiceHandler) GetClaimEventPassports(ctx context.Context, in *ActivateUserEventPassportRequest, out *ActivateUserEventPassportResponse) error {
	return h.EventServiceHandler.GetClaimEventPassports(ctx, in, out)
}

func (h *eventServiceHandler) GetEventUsers(ctx context.Context, in *EventUserRequest, out *EventUserResponse) error {
	return h.EventServiceHandler.GetEventUsers(ctx, in, out)
}

func (h *eventServiceHandler) UpdateEventUserPoints(ctx context.Context, in *EventUserPoints, out *EventUserPointsResponse) error {
	return h.EventServiceHandler.UpdateEventUserPoints(ctx, in, out)
}

func (h *eventServiceHandler) IncrementEventUserPoints(ctx context.Context, in *EventUserPoints, out *EventUserPointsResponse) error {
	return h.EventServiceHandler.IncrementEventUserPoints(ctx, in, out)
}

func (h *eventServiceHandler) GetEventTasks(ctx context.Context, in *EventTaskRequest, out *EventTaskResponse) error {
	return h.EventServiceHandler.GetEventTasks(ctx, in, out)
}

func (h *eventServiceHandler) GetCampRanks(ctx context.Context, in *CampRankRequest, out *CampRankResponse) error {
	return h.EventServiceHandler.GetCampRanks(ctx, in, out)
}

func (h *eventServiceHandler) GetUserRanks(ctx context.Context, in *UserRankRequest, out *UserRankResponse) error {
	return h.EventServiceHandler.GetUserRanks(ctx, in, out)
}

func (h *eventServiceHandler) GetUserEvents(ctx context.Context, in *UserEventRequest, out *UserEventResponse) error {
	return h.EventServiceHandler.GetUserEvents(ctx, in, out)
}

func (h *eventServiceHandler) GetUserSwaps(ctx context.Context, in *UserSwapRequest, out *UserSwapResponse) error {
	return h.EventServiceHandler.GetUserSwaps(ctx, in, out)
}

func (h *eventServiceHandler) CreateUserSwap(ctx context.Context, in *CreateUserSwapRequest, out *UserSwapResponse) error {
	return h.EventServiceHandler.CreateUserSwap(ctx, in, out)
}

func (h *eventServiceHandler) UpdateUserSwap(ctx context.Context, in *UpdateUserSwapRequest, out *UserSwapResponse) error {
	return h.EventServiceHandler.UpdateUserSwap(ctx, in, out)
}

func (h *eventServiceHandler) GetEventSettings(ctx context.Context, in *EventSettingsRequest, out *EventSettingsResponse) error {
	return h.EventServiceHandler.GetEventSettings(ctx, in, out)
}

func (h *eventServiceHandler) UpdateEventSettings(ctx context.Context, in *UpdateEventSettingsRequest, out *EventSettingsResponse) error {
	return h.EventServiceHandler.UpdateEventSettings(ctx, in, out)
}

func (h *eventServiceHandler) CreateEventAward(ctx context.Context, in *CreateEventAwardRequest, out *EventAwardResponse) error {
	return h.EventServiceHandler.CreateEventAward(ctx, in, out)
}

func (h *eventServiceHandler) GetEventAwards(ctx context.Context, in *EventAwardRequest, out *EventAwardResponse) error {
	return h.EventServiceHandler.GetEventAwards(ctx, in, out)
}

func (h *eventServiceHandler) UpdateEventAward(ctx context.Context, in *EventAward, out *EventAwardResponse) error {
	return h.EventServiceHandler.UpdateEventAward(ctx, in, out)
}

func (h *eventServiceHandler) DeleteEventAward(ctx context.Context, in *DeleteEventAwardRequest, out *EventAwardResponse) error {
	return h.EventServiceHandler.DeleteEventAward(ctx, in, out)
}

func (h *eventServiceHandler) GetNewEventAwards(ctx context.Context, in *NewEventAwardRequest, out *EventAwardResponse) error {
	return h.EventServiceHandler.GetNewEventAwards(ctx, in, out)
}

func (h *eventServiceHandler) GetUserEventAwards(ctx context.Context, in *UserEventAwardRequest, out *EventAwardResponse) error {
	return h.EventServiceHandler.GetUserEventAwards(ctx, in, out)
}

func (h *eventServiceHandler) UnbindUserPassport(ctx context.Context, in *EsKeyword, out *UserPassportsRes) error {
	return h.EventServiceHandler.UnbindUserPassport(ctx, in, out)
}

func (h *eventServiceHandler) DeleteUserPassport(ctx context.Context, in *EsKeyword, out *UserPassportsRes) error {
	return h.EventServiceHandler.DeleteUserPassport(ctx, in, out)
}

func (h *eventServiceHandler) UpdateUserStampCount(ctx context.Context, in *UserStampCountRequest, out *UserStampCountResponse) error {
	return h.EventServiceHandler.UpdateUserStampCount(ctx, in, out)
}

func (h *eventServiceHandler) IncrementUserStampCount(ctx context.Context, in *UserStampCountRequest, out *UserStampCountResponse) error {
	return h.EventServiceHandler.IncrementUserStampCount(ctx, in, out)
}

func (h *eventServiceHandler) GetExportPassports(ctx context.Context, in *ExportPassportRequest, out *ExportPassportResponse) error {
	return h.EventServiceHandler.GetExportPassports(ctx, in, out)
}
