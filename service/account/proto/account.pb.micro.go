// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: account.proto

package shenzhouyinji

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AccountService service

func NewAccountServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AccountService service

type AccountService interface {
	CreateAccount(ctx context.Context, in *Account, opts ...client.CallOption) (*AsKeyword, error)
	UpdateAccount(ctx context.Context, in *Account, opts ...client.CallOption) (*AsRes, error)
	GetAccount(ctx context.Context, in *AsKeyword, opts ...client.CallOption) (*Account, error)
	GetAccounts(ctx context.Context, in *AccountRequest, opts ...client.CallOption) (*AccountResponse, error)
	DeleteAccount(ctx context.Context, in *AsKeyword, opts ...client.CallOption) (*AccountResponse, error)
	UpdateProfile(ctx context.Context, in *Profile, opts ...client.CallOption) (*AsRes, error)
	GetProfileByUserID(ctx context.Context, in *AsKeyword, opts ...client.CallOption) (*Profile, error)
	GetProfileByName(ctx context.Context, in *AsKeyword, opts ...client.CallOption) (*Profile, error)
	CreateClaimCode(ctx context.Context, in *ClaimCode, opts ...client.CallOption) (*AsKeyword, error)
	UpdateClaimCode(ctx context.Context, in *ClaimCode, opts ...client.CallOption) (*AsRes, error)
	GetClaimCodeByUserID(ctx context.Context, in *AsKeyword, opts ...client.CallOption) (*ClaimCode, error)
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRes, error)
	LoginWithWechat(ctx context.Context, in *WechatReq, opts ...client.CallOption) (*LoginRes, error)
	UpdatePassword(ctx context.Context, in *PasswordReq, opts ...client.CallOption) (*AsRes, error)
	CreateIndivIdentity(ctx context.Context, in *IndivIdentity, opts ...client.CallOption) (*IndivIdentityResponse, error)
	GetIndivIdentity(ctx context.Context, in *IndivIdentityRequest, opts ...client.CallOption) (*IndivIdentityResponse, error)
	GetIndivIdentityAccount(ctx context.Context, in *IndivIdentityAccountRequest, opts ...client.CallOption) (*IndivIdentityAccountResponse, error)
	DeleteIndivIdentity(ctx context.Context, in *IndivIdentityRequest, opts ...client.CallOption) (*IndivIdentityResponse, error)
	GetUserPoints(ctx context.Context, in *UserPointsRequest, opts ...client.CallOption) (*UserPointsResponse, error)
	AddUserPoints(ctx context.Context, in *UserPoints, opts ...client.CallOption) (*UserPointsResponse, error)
	GetExportUsers(ctx context.Context, in *ExportUserRequest, opts ...client.CallOption) (*ExportUserResponse, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) CreateAccount(ctx context.Context, in *Account, opts ...client.CallOption) (*AsKeyword, error) {
	req := c.c.NewRequest(c.name, "AccountService.CreateAccount", in)
	out := new(AsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateAccount(ctx context.Context, in *Account, opts ...client.CallOption) (*AsRes, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateAccount", in)
	out := new(AsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetAccount(ctx context.Context, in *AsKeyword, opts ...client.CallOption) (*Account, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetAccount", in)
	out := new(Account)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetAccounts(ctx context.Context, in *AccountRequest, opts ...client.CallOption) (*AccountResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetAccounts", in)
	out := new(AccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DeleteAccount(ctx context.Context, in *AsKeyword, opts ...client.CallOption) (*AccountResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.DeleteAccount", in)
	out := new(AccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateProfile(ctx context.Context, in *Profile, opts ...client.CallOption) (*AsRes, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateProfile", in)
	out := new(AsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetProfileByUserID(ctx context.Context, in *AsKeyword, opts ...client.CallOption) (*Profile, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetProfileByUserID", in)
	out := new(Profile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetProfileByName(ctx context.Context, in *AsKeyword, opts ...client.CallOption) (*Profile, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetProfileByName", in)
	out := new(Profile)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) CreateClaimCode(ctx context.Context, in *ClaimCode, opts ...client.CallOption) (*AsKeyword, error) {
	req := c.c.NewRequest(c.name, "AccountService.CreateClaimCode", in)
	out := new(AsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateClaimCode(ctx context.Context, in *ClaimCode, opts ...client.CallOption) (*AsRes, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdateClaimCode", in)
	out := new(AsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetClaimCodeByUserID(ctx context.Context, in *AsKeyword, opts ...client.CallOption) (*ClaimCode, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetClaimCodeByUserID", in)
	out := new(ClaimCode)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRes, error) {
	req := c.c.NewRequest(c.name, "AccountService.Login", in)
	out := new(LoginRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) LoginWithWechat(ctx context.Context, in *WechatReq, opts ...client.CallOption) (*LoginRes, error) {
	req := c.c.NewRequest(c.name, "AccountService.LoginWithWechat", in)
	out := new(LoginRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdatePassword(ctx context.Context, in *PasswordReq, opts ...client.CallOption) (*AsRes, error) {
	req := c.c.NewRequest(c.name, "AccountService.UpdatePassword", in)
	out := new(AsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) CreateIndivIdentity(ctx context.Context, in *IndivIdentity, opts ...client.CallOption) (*IndivIdentityResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.CreateIndivIdentity", in)
	out := new(IndivIdentityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetIndivIdentity(ctx context.Context, in *IndivIdentityRequest, opts ...client.CallOption) (*IndivIdentityResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetIndivIdentity", in)
	out := new(IndivIdentityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetIndivIdentityAccount(ctx context.Context, in *IndivIdentityAccountRequest, opts ...client.CallOption) (*IndivIdentityAccountResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetIndivIdentityAccount", in)
	out := new(IndivIdentityAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) DeleteIndivIdentity(ctx context.Context, in *IndivIdentityRequest, opts ...client.CallOption) (*IndivIdentityResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.DeleteIndivIdentity", in)
	out := new(IndivIdentityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetUserPoints(ctx context.Context, in *UserPointsRequest, opts ...client.CallOption) (*UserPointsResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetUserPoints", in)
	out := new(UserPointsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) AddUserPoints(ctx context.Context, in *UserPoints, opts ...client.CallOption) (*UserPointsResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.AddUserPoints", in)
	out := new(UserPointsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) GetExportUsers(ctx context.Context, in *ExportUserRequest, opts ...client.CallOption) (*ExportUserResponse, error) {
	req := c.c.NewRequest(c.name, "AccountService.GetExportUsers", in)
	out := new(ExportUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountService service

type AccountServiceHandler interface {
	CreateAccount(context.Context, *Account, *AsKeyword) error
	UpdateAccount(context.Context, *Account, *AsRes) error
	GetAccount(context.Context, *AsKeyword, *Account) error
	GetAccounts(context.Context, *AccountRequest, *AccountResponse) error
	DeleteAccount(context.Context, *AsKeyword, *AccountResponse) error
	UpdateProfile(context.Context, *Profile, *AsRes) error
	GetProfileByUserID(context.Context, *AsKeyword, *Profile) error
	GetProfileByName(context.Context, *AsKeyword, *Profile) error
	CreateClaimCode(context.Context, *ClaimCode, *AsKeyword) error
	UpdateClaimCode(context.Context, *ClaimCode, *AsRes) error
	GetClaimCodeByUserID(context.Context, *AsKeyword, *ClaimCode) error
	Login(context.Context, *LoginReq, *LoginRes) error
	LoginWithWechat(context.Context, *WechatReq, *LoginRes) error
	UpdatePassword(context.Context, *PasswordReq, *AsRes) error
	CreateIndivIdentity(context.Context, *IndivIdentity, *IndivIdentityResponse) error
	GetIndivIdentity(context.Context, *IndivIdentityRequest, *IndivIdentityResponse) error
	GetIndivIdentityAccount(context.Context, *IndivIdentityAccountRequest, *IndivIdentityAccountResponse) error
	DeleteIndivIdentity(context.Context, *IndivIdentityRequest, *IndivIdentityResponse) error
	GetUserPoints(context.Context, *UserPointsRequest, *UserPointsResponse) error
	AddUserPoints(context.Context, *UserPoints, *UserPointsResponse) error
	GetExportUsers(context.Context, *ExportUserRequest, *ExportUserResponse) error
}

func RegisterAccountServiceHandler(s server.Server, hdlr AccountServiceHandler, opts ...server.HandlerOption) error {
	type accountService interface {
		CreateAccount(ctx context.Context, in *Account, out *AsKeyword) error
		UpdateAccount(ctx context.Context, in *Account, out *AsRes) error
		GetAccount(ctx context.Context, in *AsKeyword, out *Account) error
		GetAccounts(ctx context.Context, in *AccountRequest, out *AccountResponse) error
		DeleteAccount(ctx context.Context, in *AsKeyword, out *AccountResponse) error
		UpdateProfile(ctx context.Context, in *Profile, out *AsRes) error
		GetProfileByUserID(ctx context.Context, in *AsKeyword, out *Profile) error
		GetProfileByName(ctx context.Context, in *AsKeyword, out *Profile) error
		CreateClaimCode(ctx context.Context, in *ClaimCode, out *AsKeyword) error
		UpdateClaimCode(ctx context.Context, in *ClaimCode, out *AsRes) error
		GetClaimCodeByUserID(ctx context.Context, in *AsKeyword, out *ClaimCode) error
		Login(ctx context.Context, in *LoginReq, out *LoginRes) error
		LoginWithWechat(ctx context.Context, in *WechatReq, out *LoginRes) error
		UpdatePassword(ctx context.Context, in *PasswordReq, out *AsRes) error
		CreateIndivIdentity(ctx context.Context, in *IndivIdentity, out *IndivIdentityResponse) error
		GetIndivIdentity(ctx context.Context, in *IndivIdentityRequest, out *IndivIdentityResponse) error
		GetIndivIdentityAccount(ctx context.Context, in *IndivIdentityAccountRequest, out *IndivIdentityAccountResponse) error
		DeleteIndivIdentity(ctx context.Context, in *IndivIdentityRequest, out *IndivIdentityResponse) error
		GetUserPoints(ctx context.Context, in *UserPointsRequest, out *UserPointsResponse) error
		AddUserPoints(ctx context.Context, in *UserPoints, out *UserPointsResponse) error
		GetExportUsers(ctx context.Context, in *ExportUserRequest, out *ExportUserResponse) error
	}
	type AccountService struct {
		accountService
	}
	h := &accountServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AccountService{h}, opts...))
}

type accountServiceHandler struct {
	AccountServiceHandler
}

func (h *accountServiceHandler) CreateAccount(ctx context.Context, in *Account, out *AsKeyword) error {
	return h.AccountServiceHandler.CreateAccount(ctx, in, out)
}

func (h *accountServiceHandler) UpdateAccount(ctx context.Context, in *Account, out *AsRes) error {
	return h.AccountServiceHandler.UpdateAccount(ctx, in, out)
}

func (h *accountServiceHandler) GetAccount(ctx context.Context, in *AsKeyword, out *Account) error {
	return h.AccountServiceHandler.GetAccount(ctx, in, out)
}

func (h *accountServiceHandler) GetAccounts(ctx context.Context, in *AccountRequest, out *AccountResponse) error {
	return h.AccountServiceHandler.GetAccounts(ctx, in, out)
}

func (h *accountServiceHandler) DeleteAccount(ctx context.Context, in *AsKeyword, out *AccountResponse) error {
	return h.AccountServiceHandler.DeleteAccount(ctx, in, out)
}

func (h *accountServiceHandler) UpdateProfile(ctx context.Context, in *Profile, out *AsRes) error {
	return h.AccountServiceHandler.UpdateProfile(ctx, in, out)
}

func (h *accountServiceHandler) GetProfileByUserID(ctx context.Context, in *AsKeyword, out *Profile) error {
	return h.AccountServiceHandler.GetProfileByUserID(ctx, in, out)
}

func (h *accountServiceHandler) GetProfileByName(ctx context.Context, in *AsKeyword, out *Profile) error {
	return h.AccountServiceHandler.GetProfileByName(ctx, in, out)
}

func (h *accountServiceHandler) CreateClaimCode(ctx context.Context, in *ClaimCode, out *AsKeyword) error {
	return h.AccountServiceHandler.CreateClaimCode(ctx, in, out)
}

func (h *accountServiceHandler) UpdateClaimCode(ctx context.Context, in *ClaimCode, out *AsRes) error {
	return h.AccountServiceHandler.UpdateClaimCode(ctx, in, out)
}

func (h *accountServiceHandler) GetClaimCodeByUserID(ctx context.Context, in *AsKeyword, out *ClaimCode) error {
	return h.AccountServiceHandler.GetClaimCodeByUserID(ctx, in, out)
}

func (h *accountServiceHandler) Login(ctx context.Context, in *LoginReq, out *LoginRes) error {
	return h.AccountServiceHandler.Login(ctx, in, out)
}

func (h *accountServiceHandler) LoginWithWechat(ctx context.Context, in *WechatReq, out *LoginRes) error {
	return h.AccountServiceHandler.LoginWithWechat(ctx, in, out)
}

func (h *accountServiceHandler) UpdatePassword(ctx context.Context, in *PasswordReq, out *AsRes) error {
	return h.AccountServiceHandler.UpdatePassword(ctx, in, out)
}

func (h *accountServiceHandler) CreateIndivIdentity(ctx context.Context, in *IndivIdentity, out *IndivIdentityResponse) error {
	return h.AccountServiceHandler.CreateIndivIdentity(ctx, in, out)
}

func (h *accountServiceHandler) GetIndivIdentity(ctx context.Context, in *IndivIdentityRequest, out *IndivIdentityResponse) error {
	return h.AccountServiceHandler.GetIndivIdentity(ctx, in, out)
}

func (h *accountServiceHandler) GetIndivIdentityAccount(ctx context.Context, in *IndivIdentityAccountRequest, out *IndivIdentityAccountResponse) error {
	return h.AccountServiceHandler.GetIndivIdentityAccount(ctx, in, out)
}

func (h *accountServiceHandler) DeleteIndivIdentity(ctx context.Context, in *IndivIdentityRequest, out *IndivIdentityResponse) error {
	return h.AccountServiceHandler.DeleteIndivIdentity(ctx, in, out)
}

func (h *accountServiceHandler) GetUserPoints(ctx context.Context, in *UserPointsRequest, out *UserPointsResponse) error {
	return h.AccountServiceHandler.GetUserPoints(ctx, in, out)
}

func (h *accountServiceHandler) AddUserPoints(ctx context.Context, in *UserPoints, out *UserPointsResponse) error {
	return h.AccountServiceHandler.AddUserPoints(ctx, in, out)
}

func (h *accountServiceHandler) GetExportUsers(ctx context.Context, in *ExportUserRequest, out *ExportUserResponse) error {
	return h.AccountServiceHandler.GetExportUsers(ctx, in, out)
}
