// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type Rank interface {
	IsRank()
	GetRank() int
	GetID() string
	GetName() string
	GetPoints() int
}

type Task interface {
	IsTask()
	GetID() string
	GetName() string
	GetCategoryID() string
	GetCategoryName() string
	GetPoints() int
	GetOptional() bool
	GetStatus() int
	GetTimestamp() int
	GetRedone() *bool
	GetCompleted() *bool
	GetElectricFence() *string
}

type AccountConnection struct {
	TotalCount int            `json:"totalCount"`
	Edges      []*AccountEdge `json:"edges"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type AccountEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Account `json:"node,omitempty"`
}

type ActivateUserPassport struct {
	UserID       string `json:"user_id"`
	EventID      string `json:"event_id"`
	PassportCode string `json:"passport_code"`
}

type AreaInfo struct {
	ID       string  `json:"id"`
	Name     string  `json:"name"`
	ParentID *string `json:"parent_id,omitempty"`
	Type     string  `json:"type"`
	Status   int     `json:"status"`
	Sort     int     `json:"sort"`
}

type Auditing struct {
	ID          string         `json:"id"`
	Code        string         `json:"code"`
	Message     string         `json:"message"`
	Data        map[string]any `json:"data,omitempty"`
	CreatedBy   string         `json:"createdBy"`
	CreatedTime int            `json:"createdTime"`
}

type AuditingConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*AuditingEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type AuditingEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Auditing `json:"node,omitempty"`
}

type AuditingFilter struct {
	Code      *string `json:"code,omitempty"`
	CreatedBy *string `json:"createdBy,omitempty"`
	StartTime *int    `json:"startTime,omitempty"`
	EndTime   *int    `json:"endTime,omitempty"`
}

type Badge struct {
	ID      string  `json:"id"`
	EventID string  `json:"event_id"`
	Name    string  `json:"name"`
	Images  *string `json:"images,omitempty"`
}

type Camp struct {
	ID           string  `json:"id"`
	EventID      string  `json:"event_id"`
	Name         string  `json:"name"`
	Images       *string `json:"images,omitempty"`
	Introduction *string `json:"introduction,omitempty"`
	Points       int     `json:"points"`
	Status       int     `json:"status"`
	CategoryID   *string `json:"category_id,omitempty"`
}

type CampRank struct {
	Rank      int    `json:"rank"`
	ID        string `json:"id"`
	Name      string `json:"name"`
	Points    int    `json:"points"`
	Logo      string `json:"logo"`
	UserCount int    `json:"user_count"`
}

func (CampRank) IsRank()              {}
func (this CampRank) GetRank() int    { return this.Rank }
func (this CampRank) GetID() string   { return this.ID }
func (this CampRank) GetName() string { return this.Name }
func (this CampRank) GetPoints() int  { return this.Points }

type Category struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	ParentID    *string `json:"parent_id,omitempty"`
	HasSubclass *bool   `json:"has_subclass,omitempty"`
	Status      int     `json:"status"`
	Sort        int     `json:"sort"`
}

type ClaimCode struct {
	ID         string `json:"id"`
	UserID     string `json:"user_id"`
	Code       string `json:"code"`
	Status     int    `json:"status"`
	CreateTime int    `json:"create_time"`
}

type ClaimPassport struct {
	ID           string `json:"id"`
	UserID       string `json:"userId"`
	UserName     string `json:"userName"`
	UserAvatar   string `json:"userAvatar"`
	EventID      string `json:"eventId"`
	PassportCode string `json:"passportCode"`
	ClaimBy      string `json:"claimBy"`
	ClaimTime    int    `json:"claimTime"`
	Status       int    `json:"status"`
}

type ClaimPassportConnection struct {
	TotalCount int                  `json:"totalCount"`
	Edges      []*ClaimPassportEdge `json:"edges"`
	PageInfo   *PageInfo            `json:"pageInfo"`
}

type ClaimPassportEdge struct {
	Cursor string         `json:"cursor"`
	Node   *ClaimPassport `json:"node,omitempty"`
}

type Conversation struct {
	ID          string `json:"id"`
	Participant string `json:"participant"`
	From        string `json:"from"`
	UserID      string `json:"user_id"`
	UserName    string `json:"user_name"`
	UserAvatar  string `json:"user_avatar"`
	Content     string `json:"content"`
	SendTime    int    `json:"send_time"`
	ReadTime    int    `json:"read_time"`
	HasNew      bool   `json:"has_new"`
}

type Event struct {
	ID           string              `json:"id"`
	Code         string              `json:"code"`
	Name         string              `json:"name"`
	StartTime    int                 `json:"start_time"`
	EndTime      int                 `json:"end_time"`
	Introduction *string             `json:"introduction,omitempty"`
	Images       *string             `json:"images,omitempty"`
	Step         *string             `json:"step,omitempty"`
	Status       int                 `json:"status"`
	CreateTime   *int                `json:"create_time,omitempty"`
	EnableAward  bool                `json:"enable_award"`
	ScenerySpots []*EventSceneryspot `json:"scenerySpots,omitempty"`
	CategoryID   *string             `json:"category_id,omitempty"`
}

type EventAward struct {
	ID            string  `json:"id"`
	EventID       *string `json:"eventId,omitempty"`
	SceneryspotID *string `json:"sceneryspotId,omitempty"`
	Code          string  `json:"code"`
	CreateTime    int     `json:"createTime"`
	UserID        *string `json:"userId,omitempty"`
	UserName      *string `json:"userName,omitempty"`
	UserAvatar    *string `json:"userAvatar,omitempty"`
	Location      *string `json:"location,omitempty"`
	AwardTime     *int    `json:"awardTime,omitempty"`
}

type EventAwardConnection struct {
	TotalCount int               `json:"totalCount"`
	Edges      []*EventAwardEdge `json:"edges"`
	PageInfo   *PageInfo         `json:"pageInfo"`
}

type EventAwardEdge struct {
	Cursor string      `json:"cursor"`
	Node   *EventAward `json:"node,omitempty"`
}

type EventAwardInput struct {
	UserID        string `json:"userId"`
	EventID       string `json:"eventId"`
	SceneryspotID string `json:"sceneryspotId"`
	Location      string `json:"location"`
}

type EventSceneryspot struct {
	EventID       string `json:"event_id"`
	ScenerySpotID string `json:"scenery_spot_id"`
}

type EventTaskConnection struct {
	TotalCount int              `json:"totalCount"`
	Edges      []*EventTaskEdge `json:"edges"`
	PageInfo   *PageInfo        `json:"pageInfo"`
}

type EventTaskEdge struct {
	Cursor string     `json:"cursor"`
	Node   *EventTask `json:"node,omitempty"`
}

type EventUser struct {
	ID         string `json:"id"`
	UserID     string `json:"user_id"`
	UserName   string `json:"user_name"`
	UserWechat string `json:"user_wechat"`
	CampID     string `json:"camp_id"`
	CampName   string `json:"camp_name"`
	Points     int    `json:"points"`
	Trips      int    `json:"trips"`
	City       string `json:"city"`
	Email      string `json:"email"`
	Phone      string `json:"phone"`
}

type EventUserConnection struct {
	TotalCount int              `json:"totalCount"`
	Edges      []*EventUserEdge `json:"edges"`
	PageInfo   *PageInfo        `json:"pageInfo"`
}

type EventUserEdge struct {
	Cursor string     `json:"cursor"`
	Node   *EventUser `json:"node,omitempty"`
}

type File struct {
	ID          int     `json:"id"`
	Name        string  `json:"name"`
	Content     string  `json:"content"`
	ContentType string  `json:"contentType"`
	RawURI      string  `json:"rawURI"`
	PreviewURI  *string `json:"previewURI,omitempty"`
}

type Followers struct {
	UserID       string `json:"user_id"`
	Follower     string `json:"follower"`
	FollowerTime *int   `json:"follower_time,omitempty"`
}

type Following struct {
	UserID        string `json:"user_id"`
	Following     string `json:"following"`
	FollowingTime *int   `json:"following_time,omitempty"`
}

type Geocaching struct {
	ID            string  `json:"id"`
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Name          string  `json:"name"`
	Points        int     `json:"points"`
	Images        string  `json:"images"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Necessary     bool    `json:"necessary"`
	Status        int     `json:"status"`
	CreateTime    int     `json:"create_time"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type GeocachingTask struct {
	ID            string  `json:"id"`
	Name          string  `json:"name"`
	CategoryID    string  `json:"category_id"`
	CategoryName  string  `json:"category_name"`
	Points        int     `json:"points"`
	Optional      bool    `json:"optional"`
	Status        int     `json:"status"`
	Timestamp     int     `json:"timestamp"`
	Redone        *bool   `json:"redone,omitempty"`
	Completed     *bool   `json:"completed,omitempty"`
	Images        string  `json:"images"`
	Introduction  string  `json:"introduction"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

func (GeocachingTask) IsTask()                        {}
func (this GeocachingTask) GetID() string             { return this.ID }
func (this GeocachingTask) GetName() string           { return this.Name }
func (this GeocachingTask) GetCategoryID() string     { return this.CategoryID }
func (this GeocachingTask) GetCategoryName() string   { return this.CategoryName }
func (this GeocachingTask) GetPoints() int            { return this.Points }
func (this GeocachingTask) GetOptional() bool         { return this.Optional }
func (this GeocachingTask) GetStatus() int            { return this.Status }
func (this GeocachingTask) GetTimestamp() int         { return this.Timestamp }
func (this GeocachingTask) GetRedone() *bool          { return this.Redone }
func (this GeocachingTask) GetCompleted() *bool       { return this.Completed }
func (this GeocachingTask) GetElectricFence() *string { return this.ElectricFence }

type Guardian struct {
	Name  string `json:"name"`
	Nric  string `json:"nric"`
	Phone string `json:"phone"`
}

type Honour struct {
	ID        string  `json:"id"`
	CampID    string  `json:"camp_id"`
	CampName  string  `json:"camp_name"`
	Name      string  `json:"name"`
	Images    *string `json:"images,omitempty"`
	MinPoints int     `json:"min_points"`
	MaxPoints int     `json:"max_points"`
	Status    int     `json:"status"`
}

type ID struct {
	ID string `json:"id"`
}

type IndivIdentity struct {
	AccountID string `json:"accountId"`
	FlowID    string `json:"flowId"`
	ShortLink string `json:"shortLink"`
	URL       string `json:"url"`
}

type InputEventSceneryspot struct {
	EventID       string `json:"event_id"`
	ScenerySpotID string `json:"scenery_spot_id"`
}

type InputFollowers struct {
	UserID   string `json:"user_id"`
	Follower string `json:"follower"`
}

type InputFollowing struct {
	UserID    string `json:"user_id"`
	Following string `json:"following"`
}

type InputUserBadge struct {
	UserID  string `json:"user_id"`
	BadgeID string `json:"badge_id"`
	Status  int    `json:"status"`
}

type Login struct {
	ID          string `json:"id"`
	LoginID     string `json:"loginId"`
	Role        Role   `json:"role"`
	Status      int    `json:"status"`
	AccessToken string `json:"accessToken"`
}

type Mutation struct {
}

type NewAccount struct {
	LoginID  string `json:"loginId"`
	Password string `json:"password"`
	Role     Role   `json:"role"`
}

type NewActivateUserEventPassport struct {
	ID           string `json:"id"`
	UserID       string `json:"userId"`
	EventID      string `json:"eventId"`
	PassportCode string `json:"passportCode"`
}

type NewBadge struct {
	EventID string  `json:"event_id"`
	Name    string  `json:"name"`
	Images  *string `json:"images,omitempty"`
}

type NewCamp struct {
	EventID      string  `json:"event_id"`
	Name         string  `json:"name"`
	Images       *string `json:"images,omitempty"`
	Introduction *string `json:"introduction,omitempty"`
	Points       int     `json:"points"`
	Status       int     `json:"status"`
	CategoryID   *string `json:"category_id,omitempty"`
}

type NewCategory struct {
	Name        string  `json:"name"`
	ParentID    *string `json:"parent_id,omitempty"`
	HasSubclass *bool   `json:"has_subclass,omitempty"`
	Status      int     `json:"status"`
	Sort        int     `json:"sort"`
}

type NewClaimCode struct {
	UserID string `json:"user_id"`
	Code   string `json:"code"`
	Status int    `json:"status"`
}

type NewConversation struct {
	Participant string `json:"participant"`
	To          string `json:"to"`
	Content     string `json:"content"`
}

type NewEvent struct {
	Code         string  `json:"code"`
	Name         string  `json:"name"`
	StartTime    int     `json:"start_time"`
	EndTime      int     `json:"end_time"`
	Introduction *string `json:"introduction,omitempty"`
	Images       *string `json:"images,omitempty"`
	Step         *string `json:"step,omitempty"`
	Status       int     `json:"status"`
	EnableAward  *bool   `json:"enable_award,omitempty"`
	CategoryID   *string `json:"category_id,omitempty"`
}

type NewEventAwardUploadFile struct {
	EventID       *string `json:"eventId,omitempty"`
	SceneryspotID *string `json:"sceneryspotId,omitempty"`
	File          string  `json:"file"`
}

type NewGeocaching struct {
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Name          string  `json:"name"`
	Points        int     `json:"points"`
	Images        string  `json:"images"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Necessary     bool    `json:"necessary"`
	Status        int     `json:"status"`
	CreateTime    int     `json:"create_time"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type NewHonour struct {
	CampID    string  `json:"camp_id"`
	Name      string  `json:"name"`
	Images    *string `json:"images,omitempty"`
	MinPoints int     `json:"min_points"`
	MaxPoints int     `json:"max_points"`
	Status    int     `json:"status"`
}

type NewLogin struct {
	LoginID   string `json:"loginId"`
	Password  string `json:"password"`
	Timestamp int    `json:"timestamp"`
}

type NewNotification struct {
	Name         string `json:"name"`
	CategoryID   string `json:"category_id"`
	Content      string `json:"content"`
	Sender       string `json:"sender"`
	ReleaseTime  int    `json:"release_time"`
	BlockingTime int    `json:"blocking_time"`
}

type NewPassport struct {
	PassportSetID string `json:"passport_set_id"`
	Code          string `json:"code"`
	Status        int    `json:"status"`
}

type NewPassportSet struct {
	EventID  string `json:"event_id"`
	Name     string `json:"name"`
	Status   int    `json:"status"`
	Quantity int    `json:"quantity"`
	Issued   int    `json:"issued"`
}

type NewPassportStock struct {
	EventID     string  `json:"eventId"`
	File        string  `json:"file"`
	Description *string `json:"description,omitempty"`
}

type NewPassports struct {
	PassportSetID string    `json:"passport_set_id"`
	PassportCode  []*string `json:"passport_code,omitempty"`
}

type NewPhotoStatus struct {
	ID     string `json:"id"`
	Status int    `json:"status"`
}

type NewPuzzle struct {
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Name          string  `json:"name"`
	Points        int     `json:"points"`
	Images        string  `json:"images"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Necessary     bool    `json:"necessary"`
	Status        int     `json:"status"`
	Countdown     int     `json:"countdown"`
	CreateTime    int     `json:"create_time"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type NewQuestion struct {
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Questions     string  `json:"questions"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Points        int     `json:"points"`
	Status        int     `json:"status"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type NewQuestionBank struct {
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Question      string  `json:"question"`
	Options       string  `json:"options"`
	Answer        string  `json:"answer"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Necessary     bool    `json:"necessary"`
	Points        int     `json:"points"`
	Status        int     `json:"status"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type NewRefreshToken struct {
	Token string `json:"token"`
}

type NewSceneryspot struct {
	Code              string  `json:"code"`
	Name              string  `json:"name"`
	Address           *string `json:"address,omitempty"`
	Points            *int    `json:"points,omitempty"`
	Images            *string `json:"images,omitempty"`
	Coordinate        *string `json:"coordinate,omitempty"`
	ElectricFence     *string `json:"electric_fence,omitempty"`
	Introduction      *string `json:"introduction,omitempty"`
	CategoryID        *string `json:"category_id,omitempty"`
	PositionTolerance *string `json:"position_tolerance,omitempty"`
	PassportLink      *string `json:"passport_link,omitempty"`
	HealthCodeLink    *string `json:"health_code_link,omitempty"`
	Status            *int    `json:"status,omitempty"`
	EnableAward       *bool   `json:"enable_award,omitempty"`
}

type NewScreenshot struct {
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Name          string  `json:"name"`
	Points        int     `json:"points"`
	Images        string  `json:"images"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Necessary     bool    `json:"necessary"`
	Status        int     `json:"status"`
	CreateTime    int     `json:"create_time"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type NewServiceItem struct {
	SceneryspotID      string  `json:"sceneryspot_id"`
	Name               string  `json:"name"`
	CategoryID         *string `json:"category_id,omitempty"`
	Address            *string `json:"address,omitempty"`
	Images             *string `json:"images,omitempty"`
	Coordinate         *string `json:"coordinate,omitempty"`
	Wxappid            *string `json:"wxappid,omitempty"`
	DisplayOrder       *int    `json:"display_order,omitempty"`
	Introduction       *string `json:"introduction,omitempty"`
	ExpenseInstruction *string `json:"expense_instruction,omitempty"`
	Status             *int    `json:"status,omitempty"`
}

type NewStamp struct {
	SceneryspotID string  `json:"sceneryspot_id"`
	Name          string  `json:"name"`
	Address       *string `json:"address,omitempty"`
	Coordinate    *string `json:"coordinate,omitempty"`
	Code          *string `json:"code,omitempty"`
	Images        *string `json:"images,omitempty"`
	Status        *int    `json:"status,omitempty"`
}

type NewTag struct {
	Name       string `json:"name"`
	CategoryID string `json:"category_id"`
	Status     int    `json:"status"`
}

type NewTrek struct {
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Name          string  `json:"name"`
	Step          int     `json:"step"`
	Points        int     `json:"points"`
	Images        string  `json:"images"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Necessary     bool    `json:"necessary"`
	Status        int     `json:"status"`
	CreateTime    int     `json:"create_time"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type NewTweet struct {
	UserID        string  `json:"user_id"`
	Content       string  `json:"content"`
	EventID       string  `json:"event_id"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Location      *string `json:"location,omitempty"`
	Region        *string `json:"region,omitempty"`
}

type NewUserBadgeSwap struct {
	BadgeID    string  `json:"badge_id"`
	From       string  `json:"from"`
	To         *string `json:"to,omitempty"`
	PreviousID *string `json:"previous_id,omitempty"`
	City       *string `json:"city,omitempty"`
	Content    *string `json:"content,omitempty"`
	Status     int     `json:"status"`
	CreateTime int     `json:"create_time"`
}

type NewUserCamp struct {
	UserID     string  `json:"user_id"`
	CampID     string  `json:"camp_id"`
	Honour     *string `json:"honour,omitempty"`
	Points     int     `json:"points"`
	Status     int     `json:"status"`
	CreateTime int     `json:"create_time"`
	EventID    string  `json:"event_id"`
	PassportID string  `json:"passport_id"`
}

type NewUserEventPassport struct {
	UserID       *string   `json:"userId,omitempty"`
	EventID      string    `json:"eventId"`
	PassportCode *string   `json:"passportCode,omitempty"`
	RealName     string    `json:"realName"`
	Nric         string    `json:"nric"`
	Phone        string    `json:"phone"`
	Gender       *string   `json:"gender,omitempty"`
	Profession   *string   `json:"profession,omitempty"`
	Guardian     *Guardian `json:"guardian,omitempty"`
}

type NewUserPassport struct {
	UserID         string  `json:"user_id"`
	EventID        string  `json:"event_id"`
	PassportCode   *string `json:"passport_code,omitempty"`
	RealName       *string `json:"real_name,omitempty"`
	Nric           *string `json:"nric,omitempty"`
	Phone          *string `json:"phone,omitempty"`
	Gender         *string `json:"gender,omitempty"`
	Profession     *string `json:"profession,omitempty"`
	ClaimCode      *string `json:"claim_code,omitempty"`
	Authentication *bool   `json:"authentication,omitempty"`
	GuardianName   *string `json:"guardian_name,omitempty"`
	GuardianNric   *string `json:"guardian_nric,omitempty"`
	GuardianPhone  *string `json:"guardian_phone,omitempty"`
	ClaimTime      int     `json:"claim_time"`
	Status         int     `json:"status"`
}

type NewUserPoints struct {
	UserID  string `json:"userId"`
	EventID string `json:"eventId"`
	CampID  string `json:"campId"`
	Points  int    `json:"points"`
}

type NewUserSceneryspot struct {
	UserID        string `json:"user_id"`
	EventID       string `json:"event_id"`
	SceneryspotID string `json:"sceneryspot_id"`
}

type NewUserStamp struct {
	UserID        string `json:"user_id"`
	EventID       string `json:"event_id"`
	SceneryspotID string `json:"sceneryspot_id"`
	Code          string `json:"code"`
	Location      string `json:"location"`
}

type NewUserStampPointsRecord struct {
	UserID        string `json:"user_id"`
	EventID       string `json:"event_id"`
	SceneryspotID string `json:"sceneryspot_id"`
	ActionUserID  string `json:"action_user_id"`
}

type NewUserStampRecord struct {
	UserID        string `json:"user_id"`
	EventID       string `json:"event_id"`
	SceneryspotID string `json:"sceneryspot_id"`
	ActionUserID  string `json:"action_user_id"`
	ActionType    string `json:"action_type"`
}

type NewUserSwap struct {
	UserID  string   `json:"userId"`
	EventID string   `json:"eventId"`
	Badges  []string `json:"badges,omitempty"`
	City    string   `json:"city"`
}

type NewUserTask struct {
	UserID        string `json:"user_id"`
	EventID       string `json:"event_id"`
	CampID        string `json:"camp_id"`
	SceneryspotID string `json:"sceneryspot_id"`
	TaskID        string `json:"task_id"`
	TaskCategory  string `json:"task_category"`
	Result        string `json:"result"`
	Points        int    `json:"points"`
}

type Notification struct {
	ID           string `json:"id"`
	Name         string `json:"name"`
	CategoryID   string `json:"category_id"`
	Content      string `json:"content"`
	Sender       string `json:"sender"`
	ReleaseTime  int    `json:"release_time"`
	BlockingTime int    `json:"blocking_time"`
	CreateTime   int    `json:"create_time"`
}

type NotificationInput struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Content string `json:"content"`
}

type PageInfo struct {
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
	HasPreviousPage *bool  `json:"hasPreviousPage,omitempty"`
	HasNextPage     *bool  `json:"hasNextPage,omitempty"`
}

type PassportConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*PassportEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type PassportEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Passport `json:"node,omitempty"`
}

type PassportInput struct {
	EventID string   `json:"eventId"`
	Codes   []string `json:"codes,omitempty"`
}

type PassportSearchInput struct {
	Search PassportSearch `json:"search"`
	Value  string         `json:"value"`
}

type PassportSearchResult struct {
	ID            string  `json:"id"`
	Code          string  `json:"code"`
	Event         *Event  `json:"event"`
	Name          *string `json:"name,omitempty"`
	Nric          *string `json:"nric,omitempty"`
	Phone         *string `json:"phone,omitempty"`
	GuardianName  *string `json:"guardianName,omitempty"`
	GuardianNric  *string `json:"guardianNric,omitempty"`
	GuardianPhone *string `json:"guardianPhone,omitempty"`
}

type PassportSet struct {
	ID       string `json:"id"`
	EventID  string `json:"event_id"`
	Name     string `json:"name"`
	Status   int    `json:"status"`
	Quantity int    `json:"quantity"`
	Issued   int    `json:"issued"`
}

type PassportStock struct {
	EventID        string `json:"eventId"`
	EventName      string `json:"eventName"`
	Total          int    `json:"total"`
	IssuedCount    int    `json:"issuedCount"`
	UsedCount      int    `json:"usedCount"`
	AvailableCount int    `json:"availableCount"`
}

type PhoneInfo struct {
	PhoneNumber string `json:"phoneNumber"`
	CountryCode string `json:"countryCode"`
}

type Photo struct {
	ID          string       `json:"id"`
	Author      string       `json:"author"`
	Avatar      string       `json:"avatar"`
	Pics        []string     `json:"pics,omitempty"`
	Content     string       `json:"content"`
	Timestamp   int          `json:"timestamp"`
	Location    *string      `json:"location,omitempty"`
	Region      *string      `json:"region,omitempty"`
	Sceneryspot *Sceneryspot `json:"sceneryspot,omitempty"`
}

type PhotoConnection struct {
	TotalCount int          `json:"totalCount"`
	Edges      []*PhotoEdge `json:"edges"`
	PageInfo   *PageInfo    `json:"pageInfo"`
}

type PhotoEdge struct {
	Cursor string `json:"cursor"`
	Node   *Photo `json:"node,omitempty"`
}

type PickupCodeRes struct {
	UserID         string `json:"user_id"`
	RealName       string `json:"real_name"`
	Nric           string `json:"nric"`
	Phone          string `json:"phone"`
	Authentication bool   `json:"authentication"`
	Status         int    `json:"status"`
}

type PickupUserPassport struct {
	UserID     string  `json:"user_id"`
	EventID    string  `json:"event_id"`
	RealName   *string `json:"real_name,omitempty"`
	Nric       string  `json:"nric"`
	Phone      string  `json:"phone"`
	Gender     string  `json:"gender"`
	Profession string  `json:"profession"`
	Age        int     `json:"age"`
}

type Profile struct {
	ID             string  `json:"id"`
	Name           *string `json:"name,omitempty"`
	Gender         *string `json:"gender,omitempty"`
	Age            *int    `json:"age,omitempty"`
	Birthday       *int    `json:"birthday,omitempty"`
	Email          *string `json:"email,omitempty"`
	Phone          *string `json:"phone,omitempty"`
	City           *string `json:"city,omitempty"`
	Tags           *string `json:"tags,omitempty"`
	Nric           *string `json:"nric,omitempty"`
	Authentication *bool   `json:"authentication,omitempty"`
	Profession     *string `json:"profession,omitempty"`
	GuardianName   *string `json:"guardian_name,omitempty"`
	GuardianNric   *string `json:"guardian_nric,omitempty"`
	GuardianPhone  *string `json:"guardian_phone,omitempty"`
	CreateTime     int     `json:"create_time"`
}

type Puzzle struct {
	ID            string  `json:"id"`
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Name          string  `json:"name"`
	Points        int     `json:"points"`
	Images        string  `json:"images"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Necessary     bool    `json:"necessary"`
	Status        int     `json:"status"`
	Countdown     int     `json:"countdown"`
	CreateTime    int     `json:"create_time"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type PuzzleTask struct {
	ID            string   `json:"id"`
	Name          string   `json:"name"`
	CategoryID    string   `json:"category_id"`
	CategoryName  string   `json:"category_name"`
	Points        int      `json:"points"`
	Optional      bool     `json:"optional"`
	Status        int      `json:"status"`
	Timestamp     int      `json:"timestamp"`
	Redone        *bool    `json:"redone,omitempty"`
	Completed     *bool    `json:"completed,omitempty"`
	Level         int      `json:"level"`
	Countdown     int      `json:"countdown"`
	Puzzles       []string `json:"puzzles,omitempty"`
	Images        string   `json:"images"`
	Introduction  string   `json:"introduction"`
	ElectricFence *string  `json:"electric_fence,omitempty"`
}

func (PuzzleTask) IsTask()                        {}
func (this PuzzleTask) GetID() string             { return this.ID }
func (this PuzzleTask) GetName() string           { return this.Name }
func (this PuzzleTask) GetCategoryID() string     { return this.CategoryID }
func (this PuzzleTask) GetCategoryName() string   { return this.CategoryName }
func (this PuzzleTask) GetPoints() int            { return this.Points }
func (this PuzzleTask) GetOptional() bool         { return this.Optional }
func (this PuzzleTask) GetStatus() int            { return this.Status }
func (this PuzzleTask) GetTimestamp() int         { return this.Timestamp }
func (this PuzzleTask) GetRedone() *bool          { return this.Redone }
func (this PuzzleTask) GetCompleted() *bool       { return this.Completed }
func (this PuzzleTask) GetElectricFence() *string { return this.ElectricFence }

type Query struct {
}

type Question struct {
	ID            string  `json:"id"`
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Questions     string  `json:"questions"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Points        int     `json:"points"`
	Status        int     `json:"status"`
	CreateTime    int     `json:"create_time"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type QuestionBank struct {
	ID            string  `json:"id"`
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Question      string  `json:"question"`
	Options       string  `json:"options"`
	Answer        string  `json:"answer"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Necessary     bool    `json:"necessary"`
	Points        int     `json:"points"`
	Status        int     `json:"status"`
	CreateTime    int     `json:"create_time"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type QuestionTask struct {
	ID            string   `json:"id"`
	Name          string   `json:"name"`
	CategoryID    string   `json:"category_id"`
	CategoryName  string   `json:"category_name"`
	Points        int      `json:"points"`
	Optional      bool     `json:"optional"`
	Status        int      `json:"status"`
	Redone        *bool    `json:"redone,omitempty"`
	Completed     *bool    `json:"completed,omitempty"`
	Timestamp     int      `json:"timestamp"`
	Options       []string `json:"options,omitempty"`
	ElectricFence *string  `json:"electric_fence,omitempty"`
}

func (QuestionTask) IsTask()                        {}
func (this QuestionTask) GetID() string             { return this.ID }
func (this QuestionTask) GetName() string           { return this.Name }
func (this QuestionTask) GetCategoryID() string     { return this.CategoryID }
func (this QuestionTask) GetCategoryName() string   { return this.CategoryName }
func (this QuestionTask) GetPoints() int            { return this.Points }
func (this QuestionTask) GetOptional() bool         { return this.Optional }
func (this QuestionTask) GetStatus() int            { return this.Status }
func (this QuestionTask) GetTimestamp() int         { return this.Timestamp }
func (this QuestionTask) GetRedone() *bool          { return this.Redone }
func (this QuestionTask) GetCompleted() *bool       { return this.Completed }
func (this QuestionTask) GetElectricFence() *string { return this.ElectricFence }

type RefreshToken struct {
	Token string `json:"token"`
}

type Result struct {
	Succed  *bool   `json:"succed,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Sceneryspot struct {
	ID                string  `json:"id"`
	Code              string  `json:"code"`
	Name              string  `json:"name"`
	Address           *string `json:"address,omitempty"`
	Points            *int    `json:"points,omitempty"`
	Images            *string `json:"images,omitempty"`
	Coordinate        *string `json:"coordinate,omitempty"`
	ElectricFence     *string `json:"electric_fence,omitempty"`
	Introduction      *string `json:"introduction,omitempty"`
	CategoryID        *string `json:"category_id,omitempty"`
	PositionTolerance *string `json:"position_tolerance,omitempty"`
	PassportLink      *string `json:"passport_link,omitempty"`
	HealthCodeLink    *string `json:"health_code_link,omitempty"`
	Status            *int    `json:"status,omitempty"`
	CreateTime        *int    `json:"create_time,omitempty"`
	EnableAward       bool    `json:"enable_award"`
}

type Screenshot struct {
	ID            string  `json:"id"`
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Name          string  `json:"name"`
	Points        int     `json:"points"`
	Images        string  `json:"images"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Necessary     bool    `json:"necessary"`
	Status        int     `json:"status"`
	CreateTime    int     `json:"create_time"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type ScreenshotTask struct {
	ID            string  `json:"id"`
	Name          string  `json:"name"`
	CategoryID    string  `json:"category_id"`
	CategoryName  string  `json:"category_name"`
	Points        int     `json:"points"`
	Optional      bool    `json:"optional"`
	Status        int     `json:"status"`
	Timestamp     int     `json:"timestamp"`
	Redone        *bool   `json:"redone,omitempty"`
	Completed     *bool   `json:"completed,omitempty"`
	Images        string  `json:"images"`
	Introduction  string  `json:"introduction"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

func (ScreenshotTask) IsTask()                        {}
func (this ScreenshotTask) GetID() string             { return this.ID }
func (this ScreenshotTask) GetName() string           { return this.Name }
func (this ScreenshotTask) GetCategoryID() string     { return this.CategoryID }
func (this ScreenshotTask) GetCategoryName() string   { return this.CategoryName }
func (this ScreenshotTask) GetPoints() int            { return this.Points }
func (this ScreenshotTask) GetOptional() bool         { return this.Optional }
func (this ScreenshotTask) GetStatus() int            { return this.Status }
func (this ScreenshotTask) GetTimestamp() int         { return this.Timestamp }
func (this ScreenshotTask) GetRedone() *bool          { return this.Redone }
func (this ScreenshotTask) GetCompleted() *bool       { return this.Completed }
func (this ScreenshotTask) GetElectricFence() *string { return this.ElectricFence }

type ServiceItem struct {
	ID                 string  `json:"id"`
	SceneryspotID      string  `json:"sceneryspot_id"`
	Name               string  `json:"name"`
	CategoryID         *string `json:"category_id,omitempty"`
	Address            *string `json:"address,omitempty"`
	Images             *string `json:"images,omitempty"`
	Wxappid            *string `json:"wxappid,omitempty"`
	Coordinate         *string `json:"coordinate,omitempty"`
	DisplayOrder       int     `json:"display_order"`
	Introduction       *string `json:"introduction,omitempty"`
	ExpenseInstruction *string `json:"expense_instruction,omitempty"`
	Status             *int    `json:"status,omitempty"`
}

type SetAccountRole struct {
	ID     string   `json:"id"`
	Role   Role     `json:"role"`
	Scopes []string `json:"scopes,omitempty"`
}

type Stamp struct {
	ID            string  `json:"id"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Name          string  `json:"name"`
	Address       *string `json:"address,omitempty"`
	Coordinate    *string `json:"coordinate,omitempty"`
	Code          *string `json:"code,omitempty"`
	Images        *string `json:"images,omitempty"`
	Status        *int    `json:"status,omitempty"`
	CreateTime    *int    `json:"create_time,omitempty"`
}

type Tag struct {
	ID         string `json:"id"`
	Name       string `json:"name"`
	CategoryID string `json:"category_id"`
	Status     int    `json:"status"`
}

type Trek struct {
	ID            string  `json:"id"`
	EventID       *string `json:"event_id,omitempty"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Name          string  `json:"name"`
	Step          int     `json:"step"`
	Points        int     `json:"points"`
	Images        string  `json:"images"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     int     `json:"start_time"`
	EndTime       int     `json:"end_time"`
	Necessary     bool    `json:"necessary"`
	Status        int     `json:"status"`
	CreateTime    int     `json:"create_time"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type TrekTask struct {
	ID            string  `json:"id"`
	Name          string  `json:"name"`
	CategoryID    string  `json:"category_id"`
	CategoryName  string  `json:"category_name"`
	Points        int     `json:"points"`
	Optional      bool    `json:"optional"`
	Status        int     `json:"status"`
	Timestamp     int     `json:"timestamp"`
	Redone        *bool   `json:"redone,omitempty"`
	Completed     *bool   `json:"completed,omitempty"`
	Step          int     `json:"step"`
	Images        string  `json:"images"`
	Introduction  string  `json:"introduction"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

func (TrekTask) IsTask()                        {}
func (this TrekTask) GetID() string             { return this.ID }
func (this TrekTask) GetName() string           { return this.Name }
func (this TrekTask) GetCategoryID() string     { return this.CategoryID }
func (this TrekTask) GetCategoryName() string   { return this.CategoryName }
func (this TrekTask) GetPoints() int            { return this.Points }
func (this TrekTask) GetOptional() bool         { return this.Optional }
func (this TrekTask) GetStatus() int            { return this.Status }
func (this TrekTask) GetTimestamp() int         { return this.Timestamp }
func (this TrekTask) GetRedone() *bool          { return this.Redone }
func (this TrekTask) GetCompleted() *bool       { return this.Completed }
func (this TrekTask) GetElectricFence() *string { return this.ElectricFence }

type TurtleBackConfig struct {
	ID             string  `json:"id"`
	Sort           int     `json:"sort"`
	MenuConfigName string  `json:"menuConfigName"`
	MenuName       string  `json:"menuName"`
	Path           string  `json:"path"`
	MenuCode       *string `json:"menuCode,omitempty"`
	Enable         bool    `json:"enable"`
	IconPath       *string `json:"iconPath,omitempty"`
}

type TurtleBackMenu struct {
	ID       string  `json:"id"`
	MenuName *string `json:"menuName,omitempty"`
	Path     *string `json:"path,omitempty"`
	MenuCode *string `json:"menuCode,omitempty"`
}

type Tweet struct {
	ID            string  `json:"id"`
	UserID        string  `json:"user_id"`
	Content       string  `json:"content"`
	LikeCount     *int    `json:"like_count,omitempty"`
	ShareCount    *int    `json:"share_count,omitempty"`
	ViewCount     *int    `json:"view_count,omitempty"`
	Status        int     `json:"status"`
	CreateTime    int     `json:"create_time"`
	EventID       string  `json:"event_id"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Location      *string `json:"location,omitempty"`
	Region        *string `json:"region,omitempty"`
}

type TweetConnection struct {
	Tweets []*TweetWithAccount `json:"tweets,omitempty"`
	Total  *int                `json:"total,omitempty"`
}

type TweetLikeRecord struct {
	ID             string  `json:"id"`
	TweetID        string  `json:"tweet_id"`
	LikeUserID     *string `json:"like_user_id,omitempty"`
	LikeUserName   *string `json:"like_user_name,omitempty"`
	LikeUserAvatar *string `json:"like_user_avatar,omitempty"`
	LikeTime       *int    `json:"like_time,omitempty"`
}

type TweetShareRecord struct {
	ID              string  `json:"id"`
	TweetID         string  `json:"tweet_id"`
	ShareUserID     *string `json:"share_user_id,omitempty"`
	ShareUserName   *string `json:"share_user_name,omitempty"`
	ShareUserAvatar *string `json:"share_user_avatar,omitempty"`
	ShareTime       *int    `json:"share_time,omitempty"`
}

type TweetUserActionState struct {
	TweetID      string `json:"tweet_id"`
	UserID       string `json:"user_id"`
	WechatName   string `json:"wechat_name"`
	WechatAvatar string `json:"wechat_avatar"`
	Like         int    `json:"like"`
	Share        int    `json:"share"`
	View         int    `json:"view"`
}

type TweetUserRef struct {
	TweetID      string `json:"tweet_id"`
	UserID       string `json:"user_id"`
	WechatName   string `json:"wechat_name"`
	WechatAvatar string `json:"wechat_avatar"`
}

type TweetViewRecord struct {
	ID             string  `json:"id"`
	TweetID        string  `json:"tweet_id"`
	ViewUserID     *string `json:"view_user_id,omitempty"`
	ViewUserName   *string `json:"view_user_name,omitempty"`
	ViewUserAvatar *string `json:"view_user_avatar,omitempty"`
	ViewTime       *int    `json:"view_time,omitempty"`
}

type TweetWithAccount struct {
	ID            string  `json:"id"`
	UserID        string  `json:"user_id"`
	WechatName    string  `json:"wechat_name"`
	WechatAvatar  string  `json:"wechat_avatar"`
	Content       string  `json:"content"`
	LikeCount     *int    `json:"like_count,omitempty"`
	ShareCount    *int    `json:"share_count,omitempty"`
	ViewCount     *int    `json:"view_count,omitempty"`
	Status        int     `json:"status"`
	CreateTime    *int    `json:"create_time,omitempty"`
	EventID       string  `json:"event_id"`
	SceneryspotID string  `json:"sceneryspot_id"`
	Location      *string `json:"location,omitempty"`
	Region        *string `json:"region,omitempty"`
}

type UpdateAccount struct {
	ID           string   `json:"id"`
	Password     *string  `json:"password,omitempty"`
	WechatName   *string  `json:"wechat_name,omitempty"`
	WechatAvatar *string  `json:"wechat_avatar,omitempty"`
	Status       *int     `json:"status,omitempty"`
	Role         *Role    `json:"role,omitempty"`
	Scopes       []string `json:"scopes,omitempty"`
}

type UpdateBadge struct {
	ID     string  `json:"id"`
	Name   *string `json:"name,omitempty"`
	Images *string `json:"images,omitempty"`
}

type UpdateCamp struct {
	ID           string  `json:"id"`
	Name         *string `json:"name,omitempty"`
	Images       *string `json:"images,omitempty"`
	Introduction *string `json:"introduction,omitempty"`
	Points       *int    `json:"points,omitempty"`
	Status       *int    `json:"status,omitempty"`
	CategoryID   *string `json:"category_id,omitempty"`
}

type UpdateCategory struct {
	ID          string  `json:"id"`
	Name        *string `json:"name,omitempty"`
	ParentID    *string `json:"parent_id,omitempty"`
	HasSubclass *bool   `json:"has_subclass,omitempty"`
	Status      *int    `json:"status,omitempty"`
	Sort        *int    `json:"sort,omitempty"`
}

type UpdateClaimCode struct {
	ID     string `json:"id"`
	Code   string `json:"code"`
	Status int    `json:"status"`
}

type UpdateConversation struct {
	ID     string `json:"id"`
	Status int    `json:"status"`
}

type UpdateEvent struct {
	ID           string  `json:"id"`
	Code         *string `json:"code,omitempty"`
	Name         *string `json:"name,omitempty"`
	StartTime    *int    `json:"start_time,omitempty"`
	EndTime      *int    `json:"end_time,omitempty"`
	Introduction *string `json:"introduction,omitempty"`
	Images       *string `json:"images,omitempty"`
	Step         *string `json:"step,omitempty"`
	Status       *int    `json:"status,omitempty"`
	EnableAward  *bool   `json:"enable_award,omitempty"`
	CategoryID   *string `json:"category_id,omitempty"`
}

type UpdateGeocaching struct {
	ID            string  `json:"id"`
	Name          *string `json:"name,omitempty"`
	Points        *int    `json:"points,omitempty"`
	Images        *string `json:"images,omitempty"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     *int    `json:"start_time,omitempty"`
	EndTime       *int    `json:"end_time,omitempty"`
	Necessary     *bool   `json:"necessary,omitempty"`
	Status        *int    `json:"status,omitempty"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type UpdateGuardianInfo struct {
	ID            string `json:"id"`
	GuardianName  string `json:"guardian_name"`
	GuardianNric  string `json:"guardian_nric"`
	GuardianPhone string `json:"guardian_phone"`
}

type UpdateHonour struct {
	ID        string  `json:"id"`
	Name      *string `json:"name,omitempty"`
	Images    *string `json:"images,omitempty"`
	MinPoints *int    `json:"min_points,omitempty"`
	MaxPoints *int    `json:"max_points,omitempty"`
	Status    *int    `json:"status,omitempty"`
}

type UpdatePassport struct {
	ID     string  `json:"id"`
	Code   *string `json:"code,omitempty"`
	Status *int    `json:"status,omitempty"`
}

type UpdatePassportSet struct {
	ID       string  `json:"id"`
	Name     *string `json:"name,omitempty"`
	Status   *int    `json:"status,omitempty"`
	Quantity *int    `json:"quantity,omitempty"`
	Issued   *int    `json:"issued,omitempty"`
}

type UpdatePassword struct {
	ID          string `json:"id"`
	OldPassword string `json:"oldPassword"`
	NewPassword string `json:"newPassword"`
}

type UpdateProfile struct {
	ID             string  `json:"id"`
	Name           *string `json:"name,omitempty"`
	Gender         *string `json:"gender,omitempty"`
	Email          *string `json:"email,omitempty"`
	Phone          *string `json:"phone,omitempty"`
	City           *string `json:"city,omitempty"`
	Tags           *string `json:"tags,omitempty"`
	Nric           *string `json:"nric,omitempty"`
	Authentication *bool   `json:"authentication,omitempty"`
	Profession     *string `json:"profession,omitempty"`
	GuardianName   *string `json:"guardian_name,omitempty"`
	GuardianNric   *string `json:"guardian_nric,omitempty"`
	GuardianPhone  *string `json:"guardian_phone,omitempty"`
	Step           *int    `json:"step,omitempty"`
	StepTime       *int    `json:"stepTime,omitempty"`
}

type UpdatePuzzle struct {
	ID            string  `json:"id"`
	Name          *string `json:"name,omitempty"`
	Points        *int    `json:"points,omitempty"`
	Images        *string `json:"images,omitempty"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     *int    `json:"start_time,omitempty"`
	EndTime       *int    `json:"end_time,omitempty"`
	Necessary     *bool   `json:"necessary,omitempty"`
	Status        *int    `json:"status,omitempty"`
	Countdown     *int    `json:"countdown,omitempty"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type UpdateQuestion struct {
	ID            string  `json:"id"`
	Questions     *string `json:"questions,omitempty"`
	StartTime     *int    `json:"start_time,omitempty"`
	EndTime       *int    `json:"end_time,omitempty"`
	Points        *int    `json:"points,omitempty"`
	Status        *int    `json:"status,omitempty"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type UpdateQuestionBank struct {
	ID            string  `json:"id"`
	Question      *string `json:"question,omitempty"`
	Options       *string `json:"options,omitempty"`
	Answer        *string `json:"answer,omitempty"`
	StartTime     *int    `json:"start_time,omitempty"`
	EndTime       *int    `json:"end_time,omitempty"`
	Necessary     *bool   `json:"necessary,omitempty"`
	Points        *int    `json:"points,omitempty"`
	Status        *int    `json:"status,omitempty"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type UpdateSceneryspot struct {
	ID                string  `json:"id"`
	Code              *string `json:"code,omitempty"`
	Name              *string `json:"name,omitempty"`
	Address           *string `json:"address,omitempty"`
	Points            *int    `json:"points,omitempty"`
	Images            *string `json:"images,omitempty"`
	Coordinate        *string `json:"coordinate,omitempty"`
	ElectricFence     *string `json:"electric_fence,omitempty"`
	Introduction      *string `json:"introduction,omitempty"`
	CategoryID        *string `json:"category_id,omitempty"`
	PositionTolerance *string `json:"position_tolerance,omitempty"`
	PassportLink      *string `json:"passport_link,omitempty"`
	HealthCodeLink    *string `json:"health_code_link,omitempty"`
	Status            *int    `json:"status,omitempty"`
	EnableAward       *bool   `json:"enable_award,omitempty"`
}

type UpdateScreenshot struct {
	ID            string  `json:"id"`
	Name          *string `json:"name,omitempty"`
	Points        *int    `json:"points,omitempty"`
	Images        *string `json:"images,omitempty"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     *int    `json:"start_time,omitempty"`
	EndTime       *int    `json:"end_time,omitempty"`
	Necessary     *bool   `json:"necessary,omitempty"`
	Status        *int    `json:"status,omitempty"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type UpdateServiceItem struct {
	ID                 string  `json:"id"`
	Name               *string `json:"name,omitempty"`
	CategoryID         *string `json:"category_id,omitempty"`
	Address            *string `json:"address,omitempty"`
	Images             *string `json:"images,omitempty"`
	Coordinate         *string `json:"coordinate,omitempty"`
	Wxappid            *string `json:"wxappid,omitempty"`
	DisplayOrder       *int    `json:"display_order,omitempty"`
	Introduction       *string `json:"introduction,omitempty"`
	ExpenseInstruction *string `json:"expense_instruction,omitempty"`
	Status             *int    `json:"status,omitempty"`
}

type UpdateStamp struct {
	ID         string  `json:"id"`
	Name       *string `json:"name,omitempty"`
	Address    *string `json:"address,omitempty"`
	Coordinate *string `json:"coordinate,omitempty"`
	Code       *string `json:"code,omitempty"`
	Images     *string `json:"images,omitempty"`
	Status     *int    `json:"status,omitempty"`
}

type UpdateTag struct {
	ID         string  `json:"id"`
	Name       *string `json:"name,omitempty"`
	CategoryID *string `json:"category_id,omitempty"`
	Status     *int    `json:"status,omitempty"`
}

type UpdateTrek struct {
	ID            string  `json:"id"`
	Name          *string `json:"name,omitempty"`
	Step          *int    `json:"step,omitempty"`
	Points        *int    `json:"points,omitempty"`
	Images        *string `json:"images,omitempty"`
	Introduction  *string `json:"introduction,omitempty"`
	StartTime     *int    `json:"start_time,omitempty"`
	EndTime       *int    `json:"end_time,omitempty"`
	Necessary     *bool   `json:"necessary,omitempty"`
	Status        *int    `json:"status,omitempty"`
	ElectricFence *string `json:"electric_fence,omitempty"`
}

type UpdateTurtleBackConfig struct {
	ID             string  `json:"id"`
	Sort           *int    `json:"sort,omitempty"`
	MenuConfigName *string `json:"menuConfigName,omitempty"`
	MenuName       *string `json:"menuName,omitempty"`
	Path           *string `json:"path,omitempty"`
	MenuCode       *string `json:"menuCode,omitempty"`
	Enable         bool    `json:"enable"`
	IconPath       *string `json:"iconPath,omitempty"`
}

type UpdateTweet struct {
	ID     string  `json:"id"`
	Like   *string `json:"like,omitempty"`
	Share  *string `json:"share,omitempty"`
	Status *int    `json:"status,omitempty"`
}

type UpdateUserBadgeSwap struct {
	ID      string  `json:"id"`
	To      *string `json:"to,omitempty"`
	City    *string `json:"city,omitempty"`
	Content *string `json:"content,omitempty"`
	Status  int     `json:"status"`
}

type UpdateUserCamp struct {
	UserID     string `json:"user_id"`
	CampID     string `json:"camp_id"`
	Points     *int   `json:"points,omitempty"`
	StampCount *int   `json:"stamp_count,omitempty"`
	Status     *int   `json:"status,omitempty"`
}

type UpdateUserNotification struct {
	UserID         string `json:"user_id"`
	NotificationID string `json:"notification_id"`
	Status         int    `json:"status"`
}

type UpdateUserPassport struct {
	ID           string  `json:"id"`
	UserID       *string `json:"user_id,omitempty"`
	EventID      *string `json:"event_id,omitempty"`
	PassportCode *string `json:"passport_code,omitempty"`
	CampID       *string `json:"camp_id,omitempty"`
	Status       *int    `json:"status,omitempty"`
}

type UpdateUserTask struct {
	ID     string  `json:"id"`
	Result *string `json:"result,omitempty"`
	Points *int    `json:"points,omitempty"`
	Status *int    `json:"status,omitempty"`
	Audit  *string `json:"audit,omitempty"`
}

type UploadFile struct {
	File graphql.Upload `json:"file"`
	Tag  *string        `json:"tag,omitempty"`
	// if preview == true, represents for uploading a file will be generate a preview image.
	Preview bool `json:"preview"`
}

type User struct {
	ID         string `json:"id"`
	LoginID    string `json:"loginId"`
	Status     int    `json:"status"`
	CreateTime int    `json:"createTime"`
}

type UserBadge struct {
	UserID  string `json:"user_id"`
	BadgeID string `json:"badge_id"`
	Status  int    `json:"status"`
}

type UserBadgeSwap struct {
	ID         string  `json:"id"`
	BadgeID    string  `json:"badge_id"`
	From       string  `json:"from"`
	To         *string `json:"to,omitempty"`
	PreviousID *string `json:"previous_id,omitempty"`
	City       *string `json:"city,omitempty"`
	Content    *string `json:"content,omitempty"`
	Status     int     `json:"status"`
	CreateTime int     `json:"create_time"`
}

type UserCamp struct {
	ID         string  `json:"id"`
	UserID     string  `json:"user_id"`
	CampID     string  `json:"camp_id"`
	Honour     *string `json:"honour,omitempty"`
	Points     int     `json:"points"`
	StampCount int     `json:"stamp_count"`
	Status     int     `json:"status"`
	CreateTime int     `json:"create_time"`
}

type UserEvent struct {
	ID           string `json:"id"`
	Name         string `json:"name"`
	Images       string `json:"images"`
	StartTime    int    `json:"start_time"`
	EndTime      int    `json:"end_time"`
	Status       int    `json:"status"`
	PassportCode string `json:"passport_code"`
	CampID       string `json:"camp_id"`
	CampName     string `json:"camp_name"`
	CampPoints   int    `json:"camp_points"`
	CampRanking  int    `json:"camp_ranking"`
	UserPoints   int    `json:"user_points"`
	UserRanking  int    `json:"user_ranking"`
	UserHonour   string `json:"user_honour"`
}

type UserLikeRecord struct {
	ID         string  `json:"id"`
	UserID     string  `json:"user_id"`
	Liker      string  `json:"liker"`
	LikerName  *string `json:"liker_name,omitempty"`
	LikeAvatar *string `json:"like_avatar,omitempty"`
	LikeTweet  string  `json:"like_tweet"`
	LikeTime   int     `json:"like_time"`
}

type UserNotification struct {
	UserID         string `json:"user_id"`
	NotificationID string `json:"notification_id"`
	Status         int    `json:"status"`
}

type UserPassportConnection struct {
	TotalCount int                 `json:"totalCount"`
	Edges      []*UserPassportEdge `json:"edges"`
	PageInfo   *PageInfo           `json:"pageInfo"`
}

type UserPassportEdge struct {
	Cursor string        `json:"cursor"`
	Node   *UserPassport `json:"node,omitempty"`
}

type UserPassportFilter struct {
	Type   UserPassportFilterType `json:"type"`
	Search string                 `json:"search"`
}

type UserPoints struct {
	ID         string `json:"id"`
	UserID     string `json:"userId"`
	Content    string `json:"content"`
	Op         string `json:"op"`
	Points     int    `json:"points"`
	CreateTime int    `json:"createTime"`
}

type UserPointsConnection struct {
	TotalCount int               `json:"totalCount"`
	Edges      []*UserPointsEdge `json:"edges"`
	PageInfo   *PageInfo         `json:"pageInfo"`
}

type UserPointsEdge struct {
	Cursor string      `json:"cursor"`
	Node   *UserPoints `json:"node,omitempty"`
}

type UserRank struct {
	Rank       int    `json:"rank"`
	ID         string `json:"id"`
	Name       string `json:"name"`
	Points     int    `json:"points"`
	TripCount  int    `json:"trip_count"`
	HonourID   string `json:"honour_id"`
	HonourName string `json:"honour_name"`
	CampID     string `json:"camp_id"`
	CampName   string `json:"camp_name"`
}

func (UserRank) IsRank()              {}
func (this UserRank) GetRank() int    { return this.Rank }
func (this UserRank) GetID() string   { return this.ID }
func (this UserRank) GetName() string { return this.Name }
func (this UserRank) GetPoints() int  { return this.Points }

type UserRrcord struct {
	ID              string `json:"id"`
	UserID          string `json:"user_id"`
	UserName        string `json:"user_name"`
	UserAvatar      string `json:"user_avatar"`
	TweetID         string `json:"tweet_id"`
	TweetUserID     string `json:"tweet_user_id"`
	TweetUserName   string `json:"tweet_user_name"`
	TweetUserAvatar string `json:"tweet_user_avatar"`
	ActionType      string `json:"action_type"`
	Time            int    `json:"time"`
}

type UserStamp struct {
	UserID                string  `json:"user_id"`
	EventID               string  `json:"event_id"`
	SceneryspotID         string  `json:"sceneryspot_id"`
	SceneryspotName       *string `json:"sceneryspot_name,omitempty"`
	SceneryspotAddress    *string `json:"sceneryspot_address,omitempty"`
	SceneryspotImages     *string `json:"sceneryspot_images,omitempty"`
	SceneryspotCoordinate *string `json:"sceneryspot_coordinate,omitempty"`
	Code                  *string `json:"code,omitempty"`
	Location              *string `json:"location,omitempty"`
	Status                int     `json:"status"`
	CreateTime            int     `json:"create_time"`
	LikeCount             int     `json:"like_count"`
	ViewCount             int     `json:"view_count"`
	ShareCount            int     `json:"share_count"`
}

type UserStampInput struct {
	UserID        string `json:"user_id"`
	EventID       string `json:"event_id"`
	SceneryspotID string `json:"sceneryspot_id"`
	Status        int    `json:"status"`
}

type UserStampPointsRecord struct {
	ID               string `json:"id"`
	UserID           string `json:"user_id"`
	UserName         string `json:"user_name"`
	UserAvatar       string `json:"user_avatar"`
	EventID          string `json:"event_id"`
	SceneryspotID    string `json:"sceneryspot_id"`
	ActionUserID     string `json:"action_user_id"`
	ActionUserName   string `json:"action_user_name"`
	ActionUserAvatar string `json:"action_user_avatar"`
	Like             int    `json:"like"`
	Share            int    `json:"share"`
	View             int    `json:"view"`
}

type UserSwapConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*UserSwapEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type UserSwapEdge struct {
	Cursor string    `json:"cursor"`
	Node   *UserSwap `json:"node,omitempty"`
}

type UserSwapFilter struct {
	ID      *string `json:"id,omitempty"`
	UserID  *string `json:"userId,omitempty"`
	EventID *string `json:"eventId,omitempty"`
	City    *string `json:"city,omitempty"`
	Status  *int    `json:"status,omitempty"`
}

type UserSwapInput struct {
	ID     string `json:"id"`
	Status int    `json:"status"`
}

type UserTaskConnection struct {
	TotalCount int             `json:"totalCount"`
	Edges      []*UserTaskEdge `json:"edges"`
	PageInfo   *PageInfo       `json:"pageInfo"`
}

type UserTaskEdge struct {
	Cursor string    `json:"cursor"`
	Node   *UserTask `json:"node,omitempty"`
}

type UserUnreadMessage struct {
	UserID          string `json:"user_id"`
	Notification    int    `json:"notification"`
	Conversation    int    `json:"conversation"`
	Followers       int    `json:"followers"`
	Like            int    `json:"like"`
	Share           int    `json:"share"`
	View            int    `json:"view"`
	System          int    `json:"system"`
	CustomerService int    `json:"customerService"`
	Reward          int    `json:"reward"`
	Badge           int    `json:"badge"`
}

type VerifyUserPassport struct {
	ID     string `json:"id"`
	Verify bool   `json:"verify"`
}

type AuditingCode string

const (
	AuditingCodeLogin         AuditingCode = "LOGIN"
	AuditingCodeConfiguration AuditingCode = "CONFIGURATION"
	AuditingCodeRestore       AuditingCode = "RESTORE"
)

var AllAuditingCode = []AuditingCode{
	AuditingCodeLogin,
	AuditingCodeConfiguration,
	AuditingCodeRestore,
}

func (e AuditingCode) IsValid() bool {
	switch e {
	case AuditingCodeLogin, AuditingCodeConfiguration, AuditingCodeRestore:
		return true
	}
	return false
}

func (e AuditingCode) String() string {
	return string(e)
}

func (e *AuditingCode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuditingCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuditingCode", str)
	}
	return nil
}

func (e AuditingCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Export string

const (
	ExportUser     Export = "USER"
	ExportPassport Export = "PASSPORT"
)

var AllExport = []Export{
	ExportUser,
	ExportPassport,
}

func (e Export) IsValid() bool {
	switch e {
	case ExportUser, ExportPassport:
		return true
	}
	return false
}

func (e Export) String() string {
	return string(e)
}

func (e *Export) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Export(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Export", str)
	}
	return nil
}

func (e Export) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PassportSearch string

const (
	PassportSearchCode          PassportSearch = "CODE"
	PassportSearchName          PassportSearch = "NAME"
	PassportSearchNric          PassportSearch = "NRIC"
	PassportSearchPhone         PassportSearch = "PHONE"
	PassportSearchGuardianName  PassportSearch = "GUARDIAN_NAME"
	PassportSearchGuardianNric  PassportSearch = "GUARDIAN_NRIC"
	PassportSearchGuardianPhone PassportSearch = "GUARDIAN_PHONE"
)

var AllPassportSearch = []PassportSearch{
	PassportSearchCode,
	PassportSearchName,
	PassportSearchNric,
	PassportSearchPhone,
	PassportSearchGuardianName,
	PassportSearchGuardianNric,
	PassportSearchGuardianPhone,
}

func (e PassportSearch) IsValid() bool {
	switch e {
	case PassportSearchCode, PassportSearchName, PassportSearchNric, PassportSearchPhone, PassportSearchGuardianName, PassportSearchGuardianNric, PassportSearchGuardianPhone:
		return true
	}
	return false
}

func (e PassportSearch) String() string {
	return string(e)
}

func (e *PassportSearch) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PassportSearch(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PassportSearch", str)
	}
	return nil
}

func (e PassportSearch) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Restore string

const (
	RestoreSceneryspot  Restore = "SCENERYSPOT"
	RestoreEvent        Restore = "EVENT"
	RestoreUser         Restore = "USER"
	RestoreTask         Restore = "TASK"
	RestoreBadge        Restore = "BADGE"
	RestoreLike         Restore = "LIKE"
	RestorePoints       Restore = "POINTS"
	RestoreConversation Restore = "CONVERSATION"
)

var AllRestore = []Restore{
	RestoreSceneryspot,
	RestoreEvent,
	RestoreUser,
	RestoreTask,
	RestoreBadge,
	RestoreLike,
	RestorePoints,
	RestoreConversation,
}

func (e Restore) IsValid() bool {
	switch e {
	case RestoreSceneryspot, RestoreEvent, RestoreUser, RestoreTask, RestoreBadge, RestoreLike, RestorePoints, RestoreConversation:
		return true
	}
	return false
}

func (e Restore) String() string {
	return string(e)
}

func (e *Restore) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Restore(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Restore", str)
	}
	return nil
}

func (e Restore) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleUser     Role = "USER"
	RoleAdmin    Role = "ADMIN"
	RoleOperator Role = "OPERATOR"
	RoleRoot     Role = "ROOT"
)

var AllRole = []Role{
	RoleUser,
	RoleAdmin,
	RoleOperator,
	RoleRoot,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAdmin, RoleOperator, RoleRoot:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserPassportFilterType string

const (
	UserPassportFilterTypeName   UserPassportFilterType = "NAME"
	UserPassportFilterTypeIdcard UserPassportFilterType = "IDCARD"
	UserPassportFilterTypePhone  UserPassportFilterType = "PHONE"
)

var AllUserPassportFilterType = []UserPassportFilterType{
	UserPassportFilterTypeName,
	UserPassportFilterTypeIdcard,
	UserPassportFilterTypePhone,
}

func (e UserPassportFilterType) IsValid() bool {
	switch e {
	case UserPassportFilterTypeName, UserPassportFilterTypeIdcard, UserPassportFilterTypePhone:
		return true
	}
	return false
}

func (e UserPassportFilterType) String() string {
	return string(e)
}

func (e *UserPassportFilterType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserPassportFilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserPassportFilterType", str)
	}
	return nil
}

func (e UserPassportFilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
