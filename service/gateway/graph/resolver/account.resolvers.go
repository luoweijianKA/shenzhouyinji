package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"gateway/graph/generated"
	"gateway/graph/model"

	aPB "gitlab.com/annoying-orange/shenzhouyinji/service/account/proto"
	ePB "gitlab.com/annoying-orange/shenzhouyinji/service/event/proto"
	msgPB "gitlab.com/annoying-orange/shenzhouyinji/service/message/proto"
)

// Profile is the resolver for the profile field.
func (r *accountResolver) Profile(ctx context.Context, obj *model.Account) (*model.Profile, error) {
	userID := obj.ID
	out, err := r.accountService.GetProfileByUserID(ctx, &aPB.AsKeyword{Value: userID})
	if err != nil {
		return nil, err
	}

	age := int(out.Age)
	birthday := int(out.Birthday)

	return &model.Profile{
		ID:             userID,
		Name:           &out.Name,
		Gender:         &out.Gender,
		Age:            &age,
		Birthday:       &birthday,
		Email:          &out.Email,
		Phone:          &out.Phone,
		City:           &out.City,
		Tags:           &out.Tags,
		Nric:           &out.Nric,
		Authentication: &out.Authentication,
		Profession:     &out.Profession,
		GuardianName:   &out.GuardianName,
		GuardianNric:   &out.GuardianNric,
		GuardianPhone:  &out.GuardianPhone,
		CreateTime:     int(out.CreateTime),
	}, nil
}

// Follow is the resolver for the follow field.
func (r *accountResolver) Follow(ctx context.Context, obj *model.Account) (int, error) {
	userID := obj.ID
	out, err := r.messageService.GetUserUnreadMessage(ctx, &msgPB.MsgsKeyword{Value: userID})
	if err != nil {
		return 0, err
	}

	return int(out.Followers), err
}

// Like is the resolver for the like field.
func (r *accountResolver) Like(ctx context.Context, obj *model.Account) (int, error) {
	userID := obj.ID
	out, err := r.messageService.GetUserUnreadMessage(ctx, &msgPB.MsgsKeyword{Value: userID})
	if err != nil {
		return 0, err
	}

	return int(out.Like), err
}

// JoinedEvents is the resolver for the joinedEvents field.
func (r *accountResolver) JoinedEvents(ctx context.Context, obj *model.Account) ([]*model.UserEvent, error) {
	srv := r.eventService
	out, err := srv.GetUserEvents(ctx, &ePB.UserEventRequest{UserId: obj.ID})
	if err != nil {
		return nil, err
	}

	size := len(out.Data)
	result := make([]*model.UserEvent, size)
	for i, v := range out.Data[:size] {
		result[i] = &model.UserEvent{
			ID:           v.Id,
			Name:         v.Name,
			Images:       v.Images,
			StartTime:    int(v.StartTime),
			EndTime:      int(v.EndTime),
			Status:       int(v.Status),
			PassportCode: v.PassportCode,
			CampID:       v.CampId,
			CampName:     v.CampName,
			CampPoints:   int(v.CampPoints),
			CampRanking:  int(v.CampRanking),
			UserPoints:   int(v.UserPoints),
			UserRanking:  int(v.UserRanking),
			UserHonour:   v.UserHonour,
		}
	}

	return result, nil
}

// Account returns generated.AccountResolver implementation.
func (r *Resolver) Account() generated.AccountResolver { return &accountResolver{r} }

type accountResolver struct{ *Resolver }
