package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"gateway/graph/generated"
	"gateway/graph/model"

	ePB "gitlab.com/annoying-orange/shenzhouyinji/service/event/proto"
	"go-micro.dev/v4/logger"
)

// Camp is the resolver for the camp field.
func (r *eventPassportResolver) Camp(ctx context.Context, obj *model.EventPassport) (*model.UserCamp, error) {
	if obj.UserCampID == nil || len(*obj.UserCampID) == 0 {
		return nil, nil
	}

	req := ePB.EsKeyword{
		Value: *obj.UserCampID,
	}

	res, err := r.eventService.GetUserCamp(ctx, &req)

	if err != nil {
		logger.Error(err)
		return nil, nil
	}

	return &model.UserCamp{
		ID:         res.Id,
		UserID:     res.UserId,
		CampID:     res.CampId,
		Honour:     &res.Honour,
		Points:     int(res.Points),
		Status:     int(res.Status),
		CreateTime: int(res.CreateTime),
	}, nil
}

// EventPassport returns generated.EventPassportResolver implementation.
func (r *Resolver) EventPassport() generated.EventPassportResolver { return &eventPassportResolver{r} }

type eventPassportResolver struct{ *Resolver }
