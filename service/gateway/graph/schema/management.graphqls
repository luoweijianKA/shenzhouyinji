type Category {
  id: ID!
  name: String!
  parent_id: String
  has_subclass: Boolean
  status: Int!
  sort: Int!
}

type AreaInfo {
  id: ID!
  name: String!
  parent_id: String
  type: String!
  status: Int!
  sort: Int!
}

type TurtleBackMenu {
  id:ID!
  menuName: String
  path: String
  menuCode: String
}

type TurtleBackConfig {
  id:ID!
  sort: Int!
  menuConfigName: String!
  menuName: String!
  path: String!
  menuCode: String
  enable: Boolean!
  iconPath: String
}

input NewCategory {
  name: String!
  parent_id: String
  has_subclass: Boolean
  status: Int!
  sort: Int!
}

input UpdateCategory {
  id: ID!
  name: String
  parent_id: String
  has_subclass: Boolean
  status: Int
  sort: Int
}

input UpdateTurtleBackConfig {
  id:ID!
  sort: Int
  menuConfigName: String
  menuName: String
  path: String
  menuCode: String
  enable: Boolean!
  iconPath: String
}

input NewTideSpot {
  name: String!
  positionTolerance: String
  electricFence: String!
}

input UpdateTideSpot {
  id: ID!
  name: String
  positionTolerance: String
  electricFence: String
  status : Int
}

type Tag {
  id: ID!
  name: String!
  category_id: String!
  status: Int!
}

type TideSpot {
  id: ID!
  name: String!
  positionTolerance: String
  electricFence: String
  createTime: Int
  updateTime: Int
  status: Int
}

input NewTideSpotConfig {
  id: ID!
  tideSpotId: String!
  tideSpotName: String!
  couponName: String!
  type: String!
  compareWord: String
  couponImgPath: String
  compareLogoPath: String
  desc: String
  effectiveTime: Int
  couponContent: String
  minimumAmount: Int
  deductionAmount: Int
  guideDesc: String
  guideVideoPath: String
  enable: Boolean
  tideSpotGoodList: [NewTideSpotGood]
}

input NewTideSpotGood {
  goodName: String
  goodBarcode: String
}

input NewTag {
  name: String!
  category_id: String!
  status: Int!
}

input UpdateTag {
  id: ID!
  name: String
  category_id: String
  status: Int
}

type Auditing {
  id: ID!
  code: String!
  message: String!
  data: Map
  createdBy: String!
  createdTime: Int!
}

input AuditingFilter {
  code: String
  createdBy: String
  startTime: Int
  endTime: Int
}

type AuditingEdge {
  cursor: ID!
  node: Auditing
}

type TideSpotEdge {
  cursor: ID!
  node: TideSpot
}

type TideSpotConnection {
  totalCount: Int!
  edges: [TideSpotEdge!]!
  pageInfo: PageInfo!
}

type AuditingConnection {
  totalCount: Int!
  edges: [AuditingEdge!]!
  pageInfo: PageInfo!
}

enum Restore {
  SCENERYSPOT
  EVENT
  USER
  TASK
  BADGE
  LIKE
  POINTS
  CONVERSATION
}

enum Export {
  USER
  PASSPORT
}
