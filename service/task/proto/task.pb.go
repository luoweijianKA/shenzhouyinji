// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: proto/task.proto

package shenzhouyinji

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Trek struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SceneryspotId string `protobuf:"bytes,2,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Step          int32  `protobuf:"varint,4,opt,name=step,proto3" json:"step,omitempty"`
	Points        int32  `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
	Images        string `protobuf:"bytes,6,opt,name=images,proto3" json:"images,omitempty"`
	Introduction  string `protobuf:"bytes,7,opt,name=introduction,proto3" json:"introduction,omitempty"`
	StartTime     int32  `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int32  `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Necessary     bool   `protobuf:"varint,10,opt,name=necessary,proto3" json:"necessary,omitempty"`
	Status        int32  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int32  `protobuf:"varint,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	EventId       string `protobuf:"bytes,13,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ElectricFence string `protobuf:"bytes,14,opt,name=electric_fence,json=electricFence,proto3" json:"electric_fence,omitempty"`
}

func (x *Trek) Reset() {
	*x = Trek{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trek) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trek) ProtoMessage() {}

func (x *Trek) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trek.ProtoReflect.Descriptor instead.
func (*Trek) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{0}
}

func (x *Trek) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trek) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *Trek) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Trek) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *Trek) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Trek) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Trek) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Trek) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Trek) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Trek) GetNecessary() bool {
	if x != nil {
		return x.Necessary
	}
	return false
}

func (x *Trek) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Trek) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Trek) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Trek) GetElectricFence() string {
	if x != nil {
		return x.ElectricFence
	}
	return ""
}

type Geocaching struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SceneryspotId string `protobuf:"bytes,2,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Points        int32  `protobuf:"varint,4,opt,name=points,proto3" json:"points,omitempty"`
	Images        string `protobuf:"bytes,5,opt,name=images,proto3" json:"images,omitempty"`
	Introduction  string `protobuf:"bytes,6,opt,name=introduction,proto3" json:"introduction,omitempty"`
	StartTime     int32  `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int32  `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Necessary     bool   `protobuf:"varint,9,opt,name=necessary,proto3" json:"necessary,omitempty"`
	Status        int32  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int32  `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	EventId       string `protobuf:"bytes,12,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ElectricFence string `protobuf:"bytes,13,opt,name=electric_fence,json=electricFence,proto3" json:"electric_fence,omitempty"`
}

func (x *Geocaching) Reset() {
	*x = Geocaching{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geocaching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geocaching) ProtoMessage() {}

func (x *Geocaching) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geocaching.ProtoReflect.Descriptor instead.
func (*Geocaching) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{1}
}

func (x *Geocaching) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Geocaching) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *Geocaching) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Geocaching) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Geocaching) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Geocaching) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Geocaching) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Geocaching) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Geocaching) GetNecessary() bool {
	if x != nil {
		return x.Necessary
	}
	return false
}

func (x *Geocaching) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Geocaching) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Geocaching) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Geocaching) GetElectricFence() string {
	if x != nil {
		return x.ElectricFence
	}
	return ""
}

type Screenshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SceneryspotId string `protobuf:"bytes,2,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Points        int32  `protobuf:"varint,4,opt,name=points,proto3" json:"points,omitempty"`
	Images        string `protobuf:"bytes,5,opt,name=images,proto3" json:"images,omitempty"`
	Introduction  string `protobuf:"bytes,6,opt,name=introduction,proto3" json:"introduction,omitempty"`
	StartTime     int32  `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int32  `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Necessary     bool   `protobuf:"varint,9,opt,name=necessary,proto3" json:"necessary,omitempty"`
	Status        int32  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int32  `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	EventId       string `protobuf:"bytes,12,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ElectricFence string `protobuf:"bytes,13,opt,name=electric_fence,json=electricFence,proto3" json:"electric_fence,omitempty"`
}

func (x *Screenshot) Reset() {
	*x = Screenshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Screenshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Screenshot) ProtoMessage() {}

func (x *Screenshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Screenshot.ProtoReflect.Descriptor instead.
func (*Screenshot) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{2}
}

func (x *Screenshot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Screenshot) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *Screenshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Screenshot) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Screenshot) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Screenshot) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Screenshot) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Screenshot) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Screenshot) GetNecessary() bool {
	if x != nil {
		return x.Necessary
	}
	return false
}

func (x *Screenshot) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Screenshot) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Screenshot) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Screenshot) GetElectricFence() string {
	if x != nil {
		return x.ElectricFence
	}
	return ""
}

type Puzzle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SceneryspotId string `protobuf:"bytes,2,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Countdown     int32  `protobuf:"varint,4,opt,name=countdown,proto3" json:"countdown,omitempty"`
	Points        int32  `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
	Images        string `protobuf:"bytes,6,opt,name=images,proto3" json:"images,omitempty"`
	Introduction  string `protobuf:"bytes,7,opt,name=introduction,proto3" json:"introduction,omitempty"`
	StartTime     int32  `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int32  `protobuf:"varint,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Necessary     bool   `protobuf:"varint,10,opt,name=necessary,proto3" json:"necessary,omitempty"`
	Status        int32  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int32  `protobuf:"varint,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	EventId       string `protobuf:"bytes,13,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ElectricFence string `protobuf:"bytes,14,opt,name=electric_fence,json=electricFence,proto3" json:"electric_fence,omitempty"`
}

func (x *Puzzle) Reset() {
	*x = Puzzle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Puzzle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Puzzle) ProtoMessage() {}

func (x *Puzzle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Puzzle.ProtoReflect.Descriptor instead.
func (*Puzzle) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{3}
}

func (x *Puzzle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Puzzle) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *Puzzle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Puzzle) GetCountdown() int32 {
	if x != nil {
		return x.Countdown
	}
	return 0
}

func (x *Puzzle) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Puzzle) GetImages() string {
	if x != nil {
		return x.Images
	}
	return ""
}

func (x *Puzzle) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *Puzzle) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Puzzle) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Puzzle) GetNecessary() bool {
	if x != nil {
		return x.Necessary
	}
	return false
}

func (x *Puzzle) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Puzzle) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Puzzle) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Puzzle) GetElectricFence() string {
	if x != nil {
		return x.ElectricFence
	}
	return ""
}

type QuestionBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SceneryspotId string `protobuf:"bytes,2,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Question      string `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	Options       string `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	Answer        string `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	Points        int32  `protobuf:"varint,6,opt,name=points,proto3" json:"points,omitempty"`
	StartTime     int32  `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int32  `protobuf:"varint,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Necessary     bool   `protobuf:"varint,9,opt,name=necessary,proto3" json:"necessary,omitempty"`
	Status        int32  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int32  `protobuf:"varint,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	EventId       string `protobuf:"bytes,12,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ElectricFence string `protobuf:"bytes,13,opt,name=electric_fence,json=electricFence,proto3" json:"electric_fence,omitempty"`
}

func (x *QuestionBank) Reset() {
	*x = QuestionBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionBank) ProtoMessage() {}

func (x *QuestionBank) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionBank.ProtoReflect.Descriptor instead.
func (*QuestionBank) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{4}
}

func (x *QuestionBank) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionBank) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *QuestionBank) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuestionBank) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *QuestionBank) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *QuestionBank) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *QuestionBank) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *QuestionBank) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *QuestionBank) GetNecessary() bool {
	if x != nil {
		return x.Necessary
	}
	return false
}

func (x *QuestionBank) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *QuestionBank) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *QuestionBank) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *QuestionBank) GetElectricFence() string {
	if x != nil {
		return x.ElectricFence
	}
	return ""
}

type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SceneryspotId string `protobuf:"bytes,2,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	Questions     string `protobuf:"bytes,3,opt,name=questions,proto3" json:"questions,omitempty"`
	StartTime     int32  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int32  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Points        int32  `protobuf:"varint,6,opt,name=points,proto3" json:"points,omitempty"`
	Status        int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int32  `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	EventId       string `protobuf:"bytes,9,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	ElectricFence string `protobuf:"bytes,10,opt,name=electric_fence,json=electricFence,proto3" json:"electric_fence,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{5}
}

func (x *Question) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Question) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *Question) GetQuestions() string {
	if x != nil {
		return x.Questions
	}
	return ""
}

func (x *Question) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Question) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Question) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Question) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Question) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Question) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Question) GetElectricFence() string {
	if x != nil {
		return x.ElectricFence
	}
	return ""
}

type UserTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId       string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	CampId        string `protobuf:"bytes,4,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	SceneryspotId string `protobuf:"bytes,5,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	TaskId        string `protobuf:"bytes,6,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskCategory  string `protobuf:"bytes,7,opt,name=task_category,json=taskCategory,proto3" json:"task_category,omitempty"`
	Result        string `protobuf:"bytes,8,opt,name=result,proto3" json:"result,omitempty"`
	Points        int32  `protobuf:"varint,9,opt,name=points,proto3" json:"points,omitempty"`
	Status        int32  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	Audit         string `protobuf:"bytes,11,opt,name=audit,proto3" json:"audit,omitempty"`
	CreateTime    int32  `protobuf:"varint,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *UserTask) Reset() {
	*x = UserTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTask) ProtoMessage() {}

func (x *UserTask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTask.ProtoReflect.Descriptor instead.
func (*UserTask) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{6}
}

func (x *UserTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserTask) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserTask) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserTask) GetCampId() string {
	if x != nil {
		return x.CampId
	}
	return ""
}

func (x *UserTask) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *UserTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UserTask) GetTaskCategory() string {
	if x != nil {
		return x.TaskCategory
	}
	return ""
}

func (x *UserTask) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *UserTask) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *UserTask) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserTask) GetAudit() string {
	if x != nil {
		return x.Audit
	}
	return ""
}

func (x *UserTask) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type TsKeyword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TsKeyword) Reset() {
	*x = TsKeyword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TsKeyword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TsKeyword) ProtoMessage() {}

func (x *TsKeyword) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TsKeyword.ProtoReflect.Descriptor instead.
func (*TsKeyword) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{7}
}

func (x *TsKeyword) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TsEmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TsEmptyReq) Reset() {
	*x = TsEmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TsEmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TsEmptyReq) ProtoMessage() {}

func (x *TsEmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TsEmptyReq.ProtoReflect.Descriptor instead.
func (*TsEmptyReq) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{8}
}

type TsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TsRes) Reset() {
	*x = TsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TsRes) ProtoMessage() {}

func (x *TsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TsRes.ProtoReflect.Descriptor instead.
func (*TsRes) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{9}
}

func (x *TsRes) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type TreksRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Trek `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TreksRes) Reset() {
	*x = TreksRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreksRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreksRes) ProtoMessage() {}

func (x *TreksRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreksRes.ProtoReflect.Descriptor instead.
func (*TreksRes) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{10}
}

func (x *TreksRes) GetData() []*Trek {
	if x != nil {
		return x.Data
	}
	return nil
}

type GeocachingsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Geocaching `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GeocachingsRes) Reset() {
	*x = GeocachingsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeocachingsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeocachingsRes) ProtoMessage() {}

func (x *GeocachingsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeocachingsRes.ProtoReflect.Descriptor instead.
func (*GeocachingsRes) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{11}
}

func (x *GeocachingsRes) GetData() []*Geocaching {
	if x != nil {
		return x.Data
	}
	return nil
}

type ScreenshotsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Screenshot `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ScreenshotsRes) Reset() {
	*x = ScreenshotsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenshotsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenshotsRes) ProtoMessage() {}

func (x *ScreenshotsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenshotsRes.ProtoReflect.Descriptor instead.
func (*ScreenshotsRes) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{12}
}

func (x *ScreenshotsRes) GetData() []*Screenshot {
	if x != nil {
		return x.Data
	}
	return nil
}

type PuzzlesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Puzzle `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PuzzlesRes) Reset() {
	*x = PuzzlesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PuzzlesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuzzlesRes) ProtoMessage() {}

func (x *PuzzlesRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuzzlesRes.ProtoReflect.Descriptor instead.
func (*PuzzlesRes) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{13}
}

func (x *PuzzlesRes) GetData() []*Puzzle {
	if x != nil {
		return x.Data
	}
	return nil
}

type QuestionBanksRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*QuestionBank `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *QuestionBanksRes) Reset() {
	*x = QuestionBanksRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionBanksRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionBanksRes) ProtoMessage() {}

func (x *QuestionBanksRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionBanksRes.ProtoReflect.Descriptor instead.
func (*QuestionBanksRes) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{14}
}

func (x *QuestionBanksRes) GetData() []*QuestionBank {
	if x != nil {
		return x.Data
	}
	return nil
}

type QuestionsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Question `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *QuestionsRes) Reset() {
	*x = QuestionsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionsRes) ProtoMessage() {}

func (x *QuestionsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionsRes.ProtoReflect.Descriptor instead.
func (*QuestionsRes) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{15}
}

func (x *QuestionsRes) GetData() []*Question {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserTasksRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserTask `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserTasksRes) Reset() {
	*x = UserTasksRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTasksRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTasksRes) ProtoMessage() {}

func (x *UserTasksRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTasksRes.ProtoReflect.Descriptor instead.
func (*UserTasksRes) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{16}
}

func (x *UserTasksRes) GetData() []*UserTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventId      string   `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	CampId       string   `protobuf:"bytes,3,opt,name=camp_id,json=campId,proto3" json:"camp_id,omitempty"`
	Sceneryspots []string `protobuf:"bytes,4,rep,name=sceneryspots,proto3" json:"sceneryspots,omitempty"`
	CategoryId   string   `protobuf:"bytes,5,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *UserTaskRequest) Reset() {
	*x = UserTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskRequest) ProtoMessage() {}

func (x *UserTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskRequest.ProtoReflect.Descriptor instead.
func (*UserTaskRequest) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{17}
}

func (x *UserTaskRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserTaskRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserTaskRequest) GetCampId() string {
	if x != nil {
		return x.CampId
	}
	return ""
}

func (x *UserTaskRequest) GetSceneryspots() []string {
	if x != nil {
		return x.Sceneryspots
	}
	return nil
}

func (x *UserTaskRequest) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type UserTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserTask `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserTasksResponse) Reset() {
	*x = UserTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTasksResponse) ProtoMessage() {}

func (x *UserTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTasksResponse.ProtoReflect.Descriptor instead.
func (*UserTasksResponse) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{18}
}

func (x *UserTasksResponse) GetData() []*UserTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type TaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Sceneryspots []string `protobuf:"bytes,2,rep,name=sceneryspots,proto3" json:"sceneryspots,omitempty"`
	Necessary    bool     `protobuf:"varint,3,opt,name=necessary,proto3" json:"necessary,omitempty"`
	Status       int32    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_task_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_task_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_proto_task_proto_rawDescGZIP(), []int{19}
}

func (x *TaskRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *TaskRequest) GetSceneryspots() []string {
	if x != nil {
		return x.Sceneryspots
	}
	return nil
}

func (x *TaskRequest) GetNecessary() bool {
	if x != nil {
		return x.Necessary
	}
	return false
}

func (x *TaskRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_proto_task_proto protoreflect.FileDescriptor

var file_proto_task_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x22, 0x8c, 0x03, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x63, 0x65, 0x73,
	0x73, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x63, 0x65,
	0x73, 0x73, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x46, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0xfe, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79,
	0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x63, 0x65,
	0x73, 0x73, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x63,
	0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x46, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0xfe, 0x02, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72,
	0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x63,
	0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65,
	0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x46, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x98, 0x03, 0x0a, 0x06, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xfe, 0x02,
	0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73,
	0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61,
	0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73,
	0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xac,
	0x02, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xcb, 0x02,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x54,
	0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0c,
	0x0a, 0x0a, 0x54, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x22, 0x1d, 0x0a, 0x05,
	0x54, 0x73, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x08, 0x54,
	0x72, 0x65, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x72, 0x65, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x3f, 0x0a, 0x0e, 0x47, 0x65, 0x6f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x47, 0x65, 0x6f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3f, 0x0a, 0x0e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x37, 0x0a, 0x0a, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50,
	0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x3b, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a,
	0x0c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x22, 0x40, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xbc, 0x14, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x65, 0x6b, 0x12, 0x13, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x72, 0x65, 0x6b, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x65, 0x6b, 0x12, 0x13, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x72, 0x65, 0x6b, 0x1a, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x6b, 0x12, 0x18, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x13, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x72, 0x65, 0x6b, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x6b, 0x42, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72,
	0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x54, 0x72, 0x65, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x72, 0x65, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x63, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x12, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x47, 0x65, 0x6f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x1a, 0x18,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54,
	0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x19,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x47,
	0x65, 0x6f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x1a, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x63, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x19, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x47, 0x65, 0x6f,
	0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x47, 0x65, 0x6f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x1a, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x47, 0x65, 0x6f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x63, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x47, 0x65, 0x6f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x14, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x1a, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x79,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x1a, 0x18,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54,
	0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c,
	0x65, 0x1a, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x54, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x1a, 0x15, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x42, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73,
	0x70, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a,
	0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x75, 0x7a, 0x7a, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x1a, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b,
	0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1b, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x79, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1b, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x42,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x1a, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x73, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x1a, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3b, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_task_proto_rawDescOnce sync.Once
	file_proto_task_proto_rawDescData = file_proto_task_proto_rawDesc
)

func file_proto_task_proto_rawDescGZIP() []byte {
	file_proto_task_proto_rawDescOnce.Do(func() {
		file_proto_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_task_proto_rawDescData)
	})
	return file_proto_task_proto_rawDescData
}

var file_proto_task_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_proto_task_proto_goTypes = []interface{}{
	(*Trek)(nil),              // 0: shenzhouyinji.Trek
	(*Geocaching)(nil),        // 1: shenzhouyinji.Geocaching
	(*Screenshot)(nil),        // 2: shenzhouyinji.Screenshot
	(*Puzzle)(nil),            // 3: shenzhouyinji.Puzzle
	(*QuestionBank)(nil),      // 4: shenzhouyinji.QuestionBank
	(*Question)(nil),          // 5: shenzhouyinji.Question
	(*UserTask)(nil),          // 6: shenzhouyinji.UserTask
	(*TsKeyword)(nil),         // 7: shenzhouyinji.TsKeyword
	(*TsEmptyReq)(nil),        // 8: shenzhouyinji.TsEmptyReq
	(*TsRes)(nil),             // 9: shenzhouyinji.TsRes
	(*TreksRes)(nil),          // 10: shenzhouyinji.TreksRes
	(*GeocachingsRes)(nil),    // 11: shenzhouyinji.GeocachingsRes
	(*ScreenshotsRes)(nil),    // 12: shenzhouyinji.ScreenshotsRes
	(*PuzzlesRes)(nil),        // 13: shenzhouyinji.PuzzlesRes
	(*QuestionBanksRes)(nil),  // 14: shenzhouyinji.QuestionBanksRes
	(*QuestionsRes)(nil),      // 15: shenzhouyinji.QuestionsRes
	(*UserTasksRes)(nil),      // 16: shenzhouyinji.UserTasksRes
	(*UserTaskRequest)(nil),   // 17: shenzhouyinji.UserTaskRequest
	(*UserTasksResponse)(nil), // 18: shenzhouyinji.UserTasksResponse
	(*TaskRequest)(nil),       // 19: shenzhouyinji.TaskRequest
}
var file_proto_task_proto_depIdxs = []int32{
	0,  // 0: shenzhouyinji.TreksRes.data:type_name -> shenzhouyinji.Trek
	1,  // 1: shenzhouyinji.GeocachingsRes.data:type_name -> shenzhouyinji.Geocaching
	2,  // 2: shenzhouyinji.ScreenshotsRes.data:type_name -> shenzhouyinji.Screenshot
	3,  // 3: shenzhouyinji.PuzzlesRes.data:type_name -> shenzhouyinji.Puzzle
	4,  // 4: shenzhouyinji.QuestionBanksRes.data:type_name -> shenzhouyinji.QuestionBank
	5,  // 5: shenzhouyinji.QuestionsRes.data:type_name -> shenzhouyinji.Question
	6,  // 6: shenzhouyinji.UserTasksRes.data:type_name -> shenzhouyinji.UserTask
	6,  // 7: shenzhouyinji.UserTasksResponse.data:type_name -> shenzhouyinji.UserTask
	0,  // 8: shenzhouyinji.TaskService.CreateTrek:input_type -> shenzhouyinji.Trek
	0,  // 9: shenzhouyinji.TaskService.UpdateTrek:input_type -> shenzhouyinji.Trek
	7,  // 10: shenzhouyinji.TaskService.GetTrek:input_type -> shenzhouyinji.TsKeyword
	7,  // 11: shenzhouyinji.TaskService.GetTrekBySceneryspotID:input_type -> shenzhouyinji.TsKeyword
	19, // 12: shenzhouyinji.TaskService.GetTreks:input_type -> shenzhouyinji.TaskRequest
	1,  // 13: shenzhouyinji.TaskService.CreateGeocaching:input_type -> shenzhouyinji.Geocaching
	1,  // 14: shenzhouyinji.TaskService.UpdateGeocaching:input_type -> shenzhouyinji.Geocaching
	7,  // 15: shenzhouyinji.TaskService.GetGeocaching:input_type -> shenzhouyinji.TsKeyword
	7,  // 16: shenzhouyinji.TaskService.GetGeocachingBySceneryspotID:input_type -> shenzhouyinji.TsKeyword
	19, // 17: shenzhouyinji.TaskService.GetGeocachings:input_type -> shenzhouyinji.TaskRequest
	2,  // 18: shenzhouyinji.TaskService.CreateScreenshot:input_type -> shenzhouyinji.Screenshot
	2,  // 19: shenzhouyinji.TaskService.UpdateScreenshot:input_type -> shenzhouyinji.Screenshot
	7,  // 20: shenzhouyinji.TaskService.GetScreenshot:input_type -> shenzhouyinji.TsKeyword
	7,  // 21: shenzhouyinji.TaskService.GetScreenshotBySceneryspotID:input_type -> shenzhouyinji.TsKeyword
	19, // 22: shenzhouyinji.TaskService.GetScreenshots:input_type -> shenzhouyinji.TaskRequest
	3,  // 23: shenzhouyinji.TaskService.CreatePuzzle:input_type -> shenzhouyinji.Puzzle
	3,  // 24: shenzhouyinji.TaskService.UpdatePuzzle:input_type -> shenzhouyinji.Puzzle
	7,  // 25: shenzhouyinji.TaskService.GetPuzzle:input_type -> shenzhouyinji.TsKeyword
	7,  // 26: shenzhouyinji.TaskService.GetPuzzleBySceneryspotID:input_type -> shenzhouyinji.TsKeyword
	19, // 27: shenzhouyinji.TaskService.GetPuzzles:input_type -> shenzhouyinji.TaskRequest
	4,  // 28: shenzhouyinji.TaskService.CreateQuestionBank:input_type -> shenzhouyinji.QuestionBank
	4,  // 29: shenzhouyinji.TaskService.UpdateQuestionBank:input_type -> shenzhouyinji.QuestionBank
	7,  // 30: shenzhouyinji.TaskService.GetQuestionBank:input_type -> shenzhouyinji.TsKeyword
	7,  // 31: shenzhouyinji.TaskService.GetQuestionBankBySceneryspotID:input_type -> shenzhouyinji.TsKeyword
	19, // 32: shenzhouyinji.TaskService.GetQuestions:input_type -> shenzhouyinji.TaskRequest
	5,  // 33: shenzhouyinji.TaskService.CreateQuestion:input_type -> shenzhouyinji.Question
	5,  // 34: shenzhouyinji.TaskService.UpdateQuestion:input_type -> shenzhouyinji.Question
	7,  // 35: shenzhouyinji.TaskService.GetQuestion:input_type -> shenzhouyinji.TsKeyword
	7,  // 36: shenzhouyinji.TaskService.GetQuestionBySceneryspotID:input_type -> shenzhouyinji.TsKeyword
	6,  // 37: shenzhouyinji.TaskService.CreateUserTask:input_type -> shenzhouyinji.UserTask
	6,  // 38: shenzhouyinji.TaskService.UpdateUserTask:input_type -> shenzhouyinji.UserTask
	7,  // 39: shenzhouyinji.TaskService.GetUserTask:input_type -> shenzhouyinji.TsKeyword
	7,  // 40: shenzhouyinji.TaskService.GetUserTaskByUserID:input_type -> shenzhouyinji.TsKeyword
	7,  // 41: shenzhouyinji.TaskService.GetUserTaskByTaskID:input_type -> shenzhouyinji.TsKeyword
	17, // 42: shenzhouyinji.TaskService.GetUserTasks:input_type -> shenzhouyinji.UserTaskRequest
	7,  // 43: shenzhouyinji.TaskService.CreateTrek:output_type -> shenzhouyinji.TsKeyword
	9,  // 44: shenzhouyinji.TaskService.UpdateTrek:output_type -> shenzhouyinji.TsRes
	0,  // 45: shenzhouyinji.TaskService.GetTrek:output_type -> shenzhouyinji.Trek
	10, // 46: shenzhouyinji.TaskService.GetTrekBySceneryspotID:output_type -> shenzhouyinji.TreksRes
	10, // 47: shenzhouyinji.TaskService.GetTreks:output_type -> shenzhouyinji.TreksRes
	7,  // 48: shenzhouyinji.TaskService.CreateGeocaching:output_type -> shenzhouyinji.TsKeyword
	9,  // 49: shenzhouyinji.TaskService.UpdateGeocaching:output_type -> shenzhouyinji.TsRes
	1,  // 50: shenzhouyinji.TaskService.GetGeocaching:output_type -> shenzhouyinji.Geocaching
	11, // 51: shenzhouyinji.TaskService.GetGeocachingBySceneryspotID:output_type -> shenzhouyinji.GeocachingsRes
	11, // 52: shenzhouyinji.TaskService.GetGeocachings:output_type -> shenzhouyinji.GeocachingsRes
	7,  // 53: shenzhouyinji.TaskService.CreateScreenshot:output_type -> shenzhouyinji.TsKeyword
	9,  // 54: shenzhouyinji.TaskService.UpdateScreenshot:output_type -> shenzhouyinji.TsRes
	2,  // 55: shenzhouyinji.TaskService.GetScreenshot:output_type -> shenzhouyinji.Screenshot
	12, // 56: shenzhouyinji.TaskService.GetScreenshotBySceneryspotID:output_type -> shenzhouyinji.ScreenshotsRes
	12, // 57: shenzhouyinji.TaskService.GetScreenshots:output_type -> shenzhouyinji.ScreenshotsRes
	7,  // 58: shenzhouyinji.TaskService.CreatePuzzle:output_type -> shenzhouyinji.TsKeyword
	9,  // 59: shenzhouyinji.TaskService.UpdatePuzzle:output_type -> shenzhouyinji.TsRes
	3,  // 60: shenzhouyinji.TaskService.GetPuzzle:output_type -> shenzhouyinji.Puzzle
	13, // 61: shenzhouyinji.TaskService.GetPuzzleBySceneryspotID:output_type -> shenzhouyinji.PuzzlesRes
	13, // 62: shenzhouyinji.TaskService.GetPuzzles:output_type -> shenzhouyinji.PuzzlesRes
	7,  // 63: shenzhouyinji.TaskService.CreateQuestionBank:output_type -> shenzhouyinji.TsKeyword
	9,  // 64: shenzhouyinji.TaskService.UpdateQuestionBank:output_type -> shenzhouyinji.TsRes
	4,  // 65: shenzhouyinji.TaskService.GetQuestionBank:output_type -> shenzhouyinji.QuestionBank
	14, // 66: shenzhouyinji.TaskService.GetQuestionBankBySceneryspotID:output_type -> shenzhouyinji.QuestionBanksRes
	14, // 67: shenzhouyinji.TaskService.GetQuestions:output_type -> shenzhouyinji.QuestionBanksRes
	7,  // 68: shenzhouyinji.TaskService.CreateQuestion:output_type -> shenzhouyinji.TsKeyword
	9,  // 69: shenzhouyinji.TaskService.UpdateQuestion:output_type -> shenzhouyinji.TsRes
	5,  // 70: shenzhouyinji.TaskService.GetQuestion:output_type -> shenzhouyinji.Question
	15, // 71: shenzhouyinji.TaskService.GetQuestionBySceneryspotID:output_type -> shenzhouyinji.QuestionsRes
	18, // 72: shenzhouyinji.TaskService.CreateUserTask:output_type -> shenzhouyinji.UserTasksResponse
	9,  // 73: shenzhouyinji.TaskService.UpdateUserTask:output_type -> shenzhouyinji.TsRes
	6,  // 74: shenzhouyinji.TaskService.GetUserTask:output_type -> shenzhouyinji.UserTask
	16, // 75: shenzhouyinji.TaskService.GetUserTaskByUserID:output_type -> shenzhouyinji.UserTasksRes
	16, // 76: shenzhouyinji.TaskService.GetUserTaskByTaskID:output_type -> shenzhouyinji.UserTasksRes
	18, // 77: shenzhouyinji.TaskService.GetUserTasks:output_type -> shenzhouyinji.UserTasksResponse
	43, // [43:78] is the sub-list for method output_type
	8,  // [8:43] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_task_proto_init() }
func file_proto_task_proto_init() {
	if File_proto_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trek); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Geocaching); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Screenshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Puzzle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsKeyword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsEmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreksRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeocachingsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenshotsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PuzzlesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionBanksRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTasksRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_task_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_task_proto_goTypes,
		DependencyIndexes: file_proto_task_proto_depIdxs,
		MessageInfos:      file_proto_task_proto_msgTypes,
	}.Build()
	File_proto_task_proto = out.File
	file_proto_task_proto_rawDesc = nil
	file_proto_task_proto_goTypes = nil
	file_proto_task_proto_depIdxs = nil
}
