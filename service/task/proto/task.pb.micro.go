// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/task.proto

package shenzhouyinji

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TaskService service

func NewTaskServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TaskService service

type TaskService interface {
	CreateTrek(ctx context.Context, in *Trek, opts ...client.CallOption) (*TsKeyword, error)
	UpdateTrek(ctx context.Context, in *Trek, opts ...client.CallOption) (*TsRes, error)
	GetTrek(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*Trek, error)
	GetTrekBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*TreksRes, error)
	GetTreks(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*TreksRes, error)
	CreateGeocaching(ctx context.Context, in *Geocaching, opts ...client.CallOption) (*TsKeyword, error)
	UpdateGeocaching(ctx context.Context, in *Geocaching, opts ...client.CallOption) (*TsRes, error)
	GetGeocaching(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*Geocaching, error)
	GetGeocachingBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*GeocachingsRes, error)
	GetGeocachings(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*GeocachingsRes, error)
	CreateScreenshot(ctx context.Context, in *Screenshot, opts ...client.CallOption) (*TsKeyword, error)
	UpdateScreenshot(ctx context.Context, in *Screenshot, opts ...client.CallOption) (*TsRes, error)
	GetScreenshot(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*Screenshot, error)
	GetScreenshotBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*ScreenshotsRes, error)
	GetScreenshots(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*ScreenshotsRes, error)
	CreatePuzzle(ctx context.Context, in *Puzzle, opts ...client.CallOption) (*TsKeyword, error)
	UpdatePuzzle(ctx context.Context, in *Puzzle, opts ...client.CallOption) (*TsRes, error)
	GetPuzzle(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*Puzzle, error)
	GetPuzzleBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*PuzzlesRes, error)
	GetPuzzles(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*PuzzlesRes, error)
	CreateQuestionBank(ctx context.Context, in *QuestionBank, opts ...client.CallOption) (*TsKeyword, error)
	UpdateQuestionBank(ctx context.Context, in *QuestionBank, opts ...client.CallOption) (*TsRes, error)
	GetQuestionBank(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*QuestionBank, error)
	GetQuestionBankBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*QuestionBanksRes, error)
	GetQuestions(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*QuestionBanksRes, error)
	CreateQuestion(ctx context.Context, in *Question, opts ...client.CallOption) (*TsKeyword, error)
	UpdateQuestion(ctx context.Context, in *Question, opts ...client.CallOption) (*TsRes, error)
	GetQuestion(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*Question, error)
	GetQuestionBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*QuestionsRes, error)
	CreateUserTask(ctx context.Context, in *UserTask, opts ...client.CallOption) (*UserTasksResponse, error)
	UpdateUserTask(ctx context.Context, in *UserTask, opts ...client.CallOption) (*TsRes, error)
	GetUserTask(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*UserTask, error)
	GetUserTaskByUserID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*UserTasksRes, error)
	GetUserTaskByTaskID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*UserTasksRes, error)
	GetUserTasks(ctx context.Context, in *UserTaskRequest, opts ...client.CallOption) (*UserTasksResponse, error)
}

type taskService struct {
	c    client.Client
	name string
}

func NewTaskService(name string, c client.Client) TaskService {
	return &taskService{
		c:    c,
		name: name,
	}
}

func (c *taskService) CreateTrek(ctx context.Context, in *Trek, opts ...client.CallOption) (*TsKeyword, error) {
	req := c.c.NewRequest(c.name, "TaskService.CreateTrek", in)
	out := new(TsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) UpdateTrek(ctx context.Context, in *Trek, opts ...client.CallOption) (*TsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.UpdateTrek", in)
	out := new(TsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetTrek(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*Trek, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetTrek", in)
	out := new(Trek)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetTrekBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*TreksRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetTrekBySceneryspotID", in)
	out := new(TreksRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetTreks(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*TreksRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetTreks", in)
	out := new(TreksRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) CreateGeocaching(ctx context.Context, in *Geocaching, opts ...client.CallOption) (*TsKeyword, error) {
	req := c.c.NewRequest(c.name, "TaskService.CreateGeocaching", in)
	out := new(TsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) UpdateGeocaching(ctx context.Context, in *Geocaching, opts ...client.CallOption) (*TsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.UpdateGeocaching", in)
	out := new(TsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetGeocaching(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*Geocaching, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetGeocaching", in)
	out := new(Geocaching)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetGeocachingBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*GeocachingsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetGeocachingBySceneryspotID", in)
	out := new(GeocachingsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetGeocachings(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*GeocachingsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetGeocachings", in)
	out := new(GeocachingsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) CreateScreenshot(ctx context.Context, in *Screenshot, opts ...client.CallOption) (*TsKeyword, error) {
	req := c.c.NewRequest(c.name, "TaskService.CreateScreenshot", in)
	out := new(TsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) UpdateScreenshot(ctx context.Context, in *Screenshot, opts ...client.CallOption) (*TsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.UpdateScreenshot", in)
	out := new(TsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetScreenshot(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*Screenshot, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetScreenshot", in)
	out := new(Screenshot)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetScreenshotBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*ScreenshotsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetScreenshotBySceneryspotID", in)
	out := new(ScreenshotsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetScreenshots(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*ScreenshotsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetScreenshots", in)
	out := new(ScreenshotsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) CreatePuzzle(ctx context.Context, in *Puzzle, opts ...client.CallOption) (*TsKeyword, error) {
	req := c.c.NewRequest(c.name, "TaskService.CreatePuzzle", in)
	out := new(TsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) UpdatePuzzle(ctx context.Context, in *Puzzle, opts ...client.CallOption) (*TsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.UpdatePuzzle", in)
	out := new(TsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetPuzzle(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*Puzzle, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetPuzzle", in)
	out := new(Puzzle)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetPuzzleBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*PuzzlesRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetPuzzleBySceneryspotID", in)
	out := new(PuzzlesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetPuzzles(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*PuzzlesRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetPuzzles", in)
	out := new(PuzzlesRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) CreateQuestionBank(ctx context.Context, in *QuestionBank, opts ...client.CallOption) (*TsKeyword, error) {
	req := c.c.NewRequest(c.name, "TaskService.CreateQuestionBank", in)
	out := new(TsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) UpdateQuestionBank(ctx context.Context, in *QuestionBank, opts ...client.CallOption) (*TsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.UpdateQuestionBank", in)
	out := new(TsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetQuestionBank(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*QuestionBank, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetQuestionBank", in)
	out := new(QuestionBank)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetQuestionBankBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*QuestionBanksRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetQuestionBankBySceneryspotID", in)
	out := new(QuestionBanksRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetQuestions(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*QuestionBanksRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetQuestions", in)
	out := new(QuestionBanksRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) CreateQuestion(ctx context.Context, in *Question, opts ...client.CallOption) (*TsKeyword, error) {
	req := c.c.NewRequest(c.name, "TaskService.CreateQuestion", in)
	out := new(TsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) UpdateQuestion(ctx context.Context, in *Question, opts ...client.CallOption) (*TsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.UpdateQuestion", in)
	out := new(TsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetQuestion(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*Question, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetQuestion", in)
	out := new(Question)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetQuestionBySceneryspotID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*QuestionsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetQuestionBySceneryspotID", in)
	out := new(QuestionsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) CreateUserTask(ctx context.Context, in *UserTask, opts ...client.CallOption) (*UserTasksResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.CreateUserTask", in)
	out := new(UserTasksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) UpdateUserTask(ctx context.Context, in *UserTask, opts ...client.CallOption) (*TsRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.UpdateUserTask", in)
	out := new(TsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetUserTask(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*UserTask, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetUserTask", in)
	out := new(UserTask)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetUserTaskByUserID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*UserTasksRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetUserTaskByUserID", in)
	out := new(UserTasksRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetUserTaskByTaskID(ctx context.Context, in *TsKeyword, opts ...client.CallOption) (*UserTasksRes, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetUserTaskByTaskID", in)
	out := new(UserTasksRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) GetUserTasks(ctx context.Context, in *UserTaskRequest, opts ...client.CallOption) (*UserTasksResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.GetUserTasks", in)
	out := new(UserTasksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceHandler interface {
	CreateTrek(context.Context, *Trek, *TsKeyword) error
	UpdateTrek(context.Context, *Trek, *TsRes) error
	GetTrek(context.Context, *TsKeyword, *Trek) error
	GetTrekBySceneryspotID(context.Context, *TsKeyword, *TreksRes) error
	GetTreks(context.Context, *TaskRequest, *TreksRes) error
	CreateGeocaching(context.Context, *Geocaching, *TsKeyword) error
	UpdateGeocaching(context.Context, *Geocaching, *TsRes) error
	GetGeocaching(context.Context, *TsKeyword, *Geocaching) error
	GetGeocachingBySceneryspotID(context.Context, *TsKeyword, *GeocachingsRes) error
	GetGeocachings(context.Context, *TaskRequest, *GeocachingsRes) error
	CreateScreenshot(context.Context, *Screenshot, *TsKeyword) error
	UpdateScreenshot(context.Context, *Screenshot, *TsRes) error
	GetScreenshot(context.Context, *TsKeyword, *Screenshot) error
	GetScreenshotBySceneryspotID(context.Context, *TsKeyword, *ScreenshotsRes) error
	GetScreenshots(context.Context, *TaskRequest, *ScreenshotsRes) error
	CreatePuzzle(context.Context, *Puzzle, *TsKeyword) error
	UpdatePuzzle(context.Context, *Puzzle, *TsRes) error
	GetPuzzle(context.Context, *TsKeyword, *Puzzle) error
	GetPuzzleBySceneryspotID(context.Context, *TsKeyword, *PuzzlesRes) error
	GetPuzzles(context.Context, *TaskRequest, *PuzzlesRes) error
	CreateQuestionBank(context.Context, *QuestionBank, *TsKeyword) error
	UpdateQuestionBank(context.Context, *QuestionBank, *TsRes) error
	GetQuestionBank(context.Context, *TsKeyword, *QuestionBank) error
	GetQuestionBankBySceneryspotID(context.Context, *TsKeyword, *QuestionBanksRes) error
	GetQuestions(context.Context, *TaskRequest, *QuestionBanksRes) error
	CreateQuestion(context.Context, *Question, *TsKeyword) error
	UpdateQuestion(context.Context, *Question, *TsRes) error
	GetQuestion(context.Context, *TsKeyword, *Question) error
	GetQuestionBySceneryspotID(context.Context, *TsKeyword, *QuestionsRes) error
	CreateUserTask(context.Context, *UserTask, *UserTasksResponse) error
	UpdateUserTask(context.Context, *UserTask, *TsRes) error
	GetUserTask(context.Context, *TsKeyword, *UserTask) error
	GetUserTaskByUserID(context.Context, *TsKeyword, *UserTasksRes) error
	GetUserTaskByTaskID(context.Context, *TsKeyword, *UserTasksRes) error
	GetUserTasks(context.Context, *UserTaskRequest, *UserTasksResponse) error
}

func RegisterTaskServiceHandler(s server.Server, hdlr TaskServiceHandler, opts ...server.HandlerOption) error {
	type taskService interface {
		CreateTrek(ctx context.Context, in *Trek, out *TsKeyword) error
		UpdateTrek(ctx context.Context, in *Trek, out *TsRes) error
		GetTrek(ctx context.Context, in *TsKeyword, out *Trek) error
		GetTrekBySceneryspotID(ctx context.Context, in *TsKeyword, out *TreksRes) error
		GetTreks(ctx context.Context, in *TaskRequest, out *TreksRes) error
		CreateGeocaching(ctx context.Context, in *Geocaching, out *TsKeyword) error
		UpdateGeocaching(ctx context.Context, in *Geocaching, out *TsRes) error
		GetGeocaching(ctx context.Context, in *TsKeyword, out *Geocaching) error
		GetGeocachingBySceneryspotID(ctx context.Context, in *TsKeyword, out *GeocachingsRes) error
		GetGeocachings(ctx context.Context, in *TaskRequest, out *GeocachingsRes) error
		CreateScreenshot(ctx context.Context, in *Screenshot, out *TsKeyword) error
		UpdateScreenshot(ctx context.Context, in *Screenshot, out *TsRes) error
		GetScreenshot(ctx context.Context, in *TsKeyword, out *Screenshot) error
		GetScreenshotBySceneryspotID(ctx context.Context, in *TsKeyword, out *ScreenshotsRes) error
		GetScreenshots(ctx context.Context, in *TaskRequest, out *ScreenshotsRes) error
		CreatePuzzle(ctx context.Context, in *Puzzle, out *TsKeyword) error
		UpdatePuzzle(ctx context.Context, in *Puzzle, out *TsRes) error
		GetPuzzle(ctx context.Context, in *TsKeyword, out *Puzzle) error
		GetPuzzleBySceneryspotID(ctx context.Context, in *TsKeyword, out *PuzzlesRes) error
		GetPuzzles(ctx context.Context, in *TaskRequest, out *PuzzlesRes) error
		CreateQuestionBank(ctx context.Context, in *QuestionBank, out *TsKeyword) error
		UpdateQuestionBank(ctx context.Context, in *QuestionBank, out *TsRes) error
		GetQuestionBank(ctx context.Context, in *TsKeyword, out *QuestionBank) error
		GetQuestionBankBySceneryspotID(ctx context.Context, in *TsKeyword, out *QuestionBanksRes) error
		GetQuestions(ctx context.Context, in *TaskRequest, out *QuestionBanksRes) error
		CreateQuestion(ctx context.Context, in *Question, out *TsKeyword) error
		UpdateQuestion(ctx context.Context, in *Question, out *TsRes) error
		GetQuestion(ctx context.Context, in *TsKeyword, out *Question) error
		GetQuestionBySceneryspotID(ctx context.Context, in *TsKeyword, out *QuestionsRes) error
		CreateUserTask(ctx context.Context, in *UserTask, out *UserTasksResponse) error
		UpdateUserTask(ctx context.Context, in *UserTask, out *TsRes) error
		GetUserTask(ctx context.Context, in *TsKeyword, out *UserTask) error
		GetUserTaskByUserID(ctx context.Context, in *TsKeyword, out *UserTasksRes) error
		GetUserTaskByTaskID(ctx context.Context, in *TsKeyword, out *UserTasksRes) error
		GetUserTasks(ctx context.Context, in *UserTaskRequest, out *UserTasksResponse) error
	}
	type TaskService struct {
		taskService
	}
	h := &taskServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TaskService{h}, opts...))
}

type taskServiceHandler struct {
	TaskServiceHandler
}

func (h *taskServiceHandler) CreateTrek(ctx context.Context, in *Trek, out *TsKeyword) error {
	return h.TaskServiceHandler.CreateTrek(ctx, in, out)
}

func (h *taskServiceHandler) UpdateTrek(ctx context.Context, in *Trek, out *TsRes) error {
	return h.TaskServiceHandler.UpdateTrek(ctx, in, out)
}

func (h *taskServiceHandler) GetTrek(ctx context.Context, in *TsKeyword, out *Trek) error {
	return h.TaskServiceHandler.GetTrek(ctx, in, out)
}

func (h *taskServiceHandler) GetTrekBySceneryspotID(ctx context.Context, in *TsKeyword, out *TreksRes) error {
	return h.TaskServiceHandler.GetTrekBySceneryspotID(ctx, in, out)
}

func (h *taskServiceHandler) GetTreks(ctx context.Context, in *TaskRequest, out *TreksRes) error {
	return h.TaskServiceHandler.GetTreks(ctx, in, out)
}

func (h *taskServiceHandler) CreateGeocaching(ctx context.Context, in *Geocaching, out *TsKeyword) error {
	return h.TaskServiceHandler.CreateGeocaching(ctx, in, out)
}

func (h *taskServiceHandler) UpdateGeocaching(ctx context.Context, in *Geocaching, out *TsRes) error {
	return h.TaskServiceHandler.UpdateGeocaching(ctx, in, out)
}

func (h *taskServiceHandler) GetGeocaching(ctx context.Context, in *TsKeyword, out *Geocaching) error {
	return h.TaskServiceHandler.GetGeocaching(ctx, in, out)
}

func (h *taskServiceHandler) GetGeocachingBySceneryspotID(ctx context.Context, in *TsKeyword, out *GeocachingsRes) error {
	return h.TaskServiceHandler.GetGeocachingBySceneryspotID(ctx, in, out)
}

func (h *taskServiceHandler) GetGeocachings(ctx context.Context, in *TaskRequest, out *GeocachingsRes) error {
	return h.TaskServiceHandler.GetGeocachings(ctx, in, out)
}

func (h *taskServiceHandler) CreateScreenshot(ctx context.Context, in *Screenshot, out *TsKeyword) error {
	return h.TaskServiceHandler.CreateScreenshot(ctx, in, out)
}

func (h *taskServiceHandler) UpdateScreenshot(ctx context.Context, in *Screenshot, out *TsRes) error {
	return h.TaskServiceHandler.UpdateScreenshot(ctx, in, out)
}

func (h *taskServiceHandler) GetScreenshot(ctx context.Context, in *TsKeyword, out *Screenshot) error {
	return h.TaskServiceHandler.GetScreenshot(ctx, in, out)
}

func (h *taskServiceHandler) GetScreenshotBySceneryspotID(ctx context.Context, in *TsKeyword, out *ScreenshotsRes) error {
	return h.TaskServiceHandler.GetScreenshotBySceneryspotID(ctx, in, out)
}

func (h *taskServiceHandler) GetScreenshots(ctx context.Context, in *TaskRequest, out *ScreenshotsRes) error {
	return h.TaskServiceHandler.GetScreenshots(ctx, in, out)
}

func (h *taskServiceHandler) CreatePuzzle(ctx context.Context, in *Puzzle, out *TsKeyword) error {
	return h.TaskServiceHandler.CreatePuzzle(ctx, in, out)
}

func (h *taskServiceHandler) UpdatePuzzle(ctx context.Context, in *Puzzle, out *TsRes) error {
	return h.TaskServiceHandler.UpdatePuzzle(ctx, in, out)
}

func (h *taskServiceHandler) GetPuzzle(ctx context.Context, in *TsKeyword, out *Puzzle) error {
	return h.TaskServiceHandler.GetPuzzle(ctx, in, out)
}

func (h *taskServiceHandler) GetPuzzleBySceneryspotID(ctx context.Context, in *TsKeyword, out *PuzzlesRes) error {
	return h.TaskServiceHandler.GetPuzzleBySceneryspotID(ctx, in, out)
}

func (h *taskServiceHandler) GetPuzzles(ctx context.Context, in *TaskRequest, out *PuzzlesRes) error {
	return h.TaskServiceHandler.GetPuzzles(ctx, in, out)
}

func (h *taskServiceHandler) CreateQuestionBank(ctx context.Context, in *QuestionBank, out *TsKeyword) error {
	return h.TaskServiceHandler.CreateQuestionBank(ctx, in, out)
}

func (h *taskServiceHandler) UpdateQuestionBank(ctx context.Context, in *QuestionBank, out *TsRes) error {
	return h.TaskServiceHandler.UpdateQuestionBank(ctx, in, out)
}

func (h *taskServiceHandler) GetQuestionBank(ctx context.Context, in *TsKeyword, out *QuestionBank) error {
	return h.TaskServiceHandler.GetQuestionBank(ctx, in, out)
}

func (h *taskServiceHandler) GetQuestionBankBySceneryspotID(ctx context.Context, in *TsKeyword, out *QuestionBanksRes) error {
	return h.TaskServiceHandler.GetQuestionBankBySceneryspotID(ctx, in, out)
}

func (h *taskServiceHandler) GetQuestions(ctx context.Context, in *TaskRequest, out *QuestionBanksRes) error {
	return h.TaskServiceHandler.GetQuestions(ctx, in, out)
}

func (h *taskServiceHandler) CreateQuestion(ctx context.Context, in *Question, out *TsKeyword) error {
	return h.TaskServiceHandler.CreateQuestion(ctx, in, out)
}

func (h *taskServiceHandler) UpdateQuestion(ctx context.Context, in *Question, out *TsRes) error {
	return h.TaskServiceHandler.UpdateQuestion(ctx, in, out)
}

func (h *taskServiceHandler) GetQuestion(ctx context.Context, in *TsKeyword, out *Question) error {
	return h.TaskServiceHandler.GetQuestion(ctx, in, out)
}

func (h *taskServiceHandler) GetQuestionBySceneryspotID(ctx context.Context, in *TsKeyword, out *QuestionsRes) error {
	return h.TaskServiceHandler.GetQuestionBySceneryspotID(ctx, in, out)
}

func (h *taskServiceHandler) CreateUserTask(ctx context.Context, in *UserTask, out *UserTasksResponse) error {
	return h.TaskServiceHandler.CreateUserTask(ctx, in, out)
}

func (h *taskServiceHandler) UpdateUserTask(ctx context.Context, in *UserTask, out *TsRes) error {
	return h.TaskServiceHandler.UpdateUserTask(ctx, in, out)
}

func (h *taskServiceHandler) GetUserTask(ctx context.Context, in *TsKeyword, out *UserTask) error {
	return h.TaskServiceHandler.GetUserTask(ctx, in, out)
}

func (h *taskServiceHandler) GetUserTaskByUserID(ctx context.Context, in *TsKeyword, out *UserTasksRes) error {
	return h.TaskServiceHandler.GetUserTaskByUserID(ctx, in, out)
}

func (h *taskServiceHandler) GetUserTaskByTaskID(ctx context.Context, in *TsKeyword, out *UserTasksRes) error {
	return h.TaskServiceHandler.GetUserTaskByTaskID(ctx, in, out)
}

func (h *taskServiceHandler) GetUserTasks(ctx context.Context, in *UserTaskRequest, out *UserTasksResponse) error {
	return h.TaskServiceHandler.GetUserTasks(ctx, in, out)
}
