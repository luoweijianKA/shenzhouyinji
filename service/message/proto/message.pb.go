// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: proto/message.proto

package shenzhouyinji

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CategoryId   string `protobuf:"bytes,3,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Content      string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Sender       string `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
	ReleaseTime  int32  `protobuf:"varint,6,opt,name=release_time,json=releaseTime,proto3" json:"release_time,omitempty"`
	BlockingTime int32  `protobuf:"varint,7,opt,name=blocking_time,json=blockingTime,proto3" json:"blocking_time,omitempty"`
	CreateTime   int32  `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{0}
}

func (x *Notification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Notification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Notification) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *Notification) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Notification) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Notification) GetReleaseTime() int32 {
	if x != nil {
		return x.ReleaseTime
	}
	return 0
}

func (x *Notification) GetBlockingTime() int32 {
	if x != nil {
		return x.BlockingTime
	}
	return 0
}

func (x *Notification) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type UserNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NotificationId string `protobuf:"bytes,2,opt,name=notification_id,json=notificationId,proto3" json:"notification_id,omitempty"`
	Status         int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UserNotification) Reset() {
	*x = UserNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNotification) ProtoMessage() {}

func (x *UserNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNotification.ProtoReflect.Descriptor instead.
func (*UserNotification) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{1}
}

func (x *UserNotification) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserNotification) GetNotificationId() string {
	if x != nil {
		return x.NotificationId
	}
	return ""
}

func (x *UserNotification) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Conversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Participant string `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	From        string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To          string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Content     string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	SendTime    int32  `protobuf:"varint,6,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	ReadTime    int32  `protobuf:"varint,7,opt,name=read_time,json=readTime,proto3" json:"read_time,omitempty"`
	Status      int32  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{2}
}

func (x *Conversation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Conversation) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *Conversation) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Conversation) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Conversation) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Conversation) GetSendTime() int32 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *Conversation) GetReadTime() int32 {
	if x != nil {
		return x.ReadTime
	}
	return 0
}

func (x *Conversation) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type UserUnreadMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Notification    int32  `protobuf:"varint,2,opt,name=notification,proto3" json:"notification,omitempty"`
	Conversation    int32  `protobuf:"varint,3,opt,name=conversation,proto3" json:"conversation,omitempty"`
	Followers       int32  `protobuf:"varint,4,opt,name=followers,proto3" json:"followers,omitempty"`
	Like            int32  `protobuf:"varint,5,opt,name=like,proto3" json:"like,omitempty"`
	Share           int32  `protobuf:"varint,6,opt,name=share,proto3" json:"share,omitempty"`
	View            int32  `protobuf:"varint,7,opt,name=view,proto3" json:"view,omitempty"`
	System          int32  `protobuf:"varint,8,opt,name=system,proto3" json:"system,omitempty"`
	CustomerService int32  `protobuf:"varint,9,opt,name=customerService,proto3" json:"customerService,omitempty"`
	Reward          int32  `protobuf:"varint,10,opt,name=reward,proto3" json:"reward,omitempty"`
	Badge           int32  `protobuf:"varint,11,opt,name=badge,proto3" json:"badge,omitempty"`
}

func (x *UserUnreadMessage) Reset() {
	*x = UserUnreadMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUnreadMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUnreadMessage) ProtoMessage() {}

func (x *UserUnreadMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUnreadMessage.ProtoReflect.Descriptor instead.
func (*UserUnreadMessage) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{3}
}

func (x *UserUnreadMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserUnreadMessage) GetNotification() int32 {
	if x != nil {
		return x.Notification
	}
	return 0
}

func (x *UserUnreadMessage) GetConversation() int32 {
	if x != nil {
		return x.Conversation
	}
	return 0
}

func (x *UserUnreadMessage) GetFollowers() int32 {
	if x != nil {
		return x.Followers
	}
	return 0
}

func (x *UserUnreadMessage) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *UserUnreadMessage) GetShare() int32 {
	if x != nil {
		return x.Share
	}
	return 0
}

func (x *UserUnreadMessage) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *UserUnreadMessage) GetSystem() int32 {
	if x != nil {
		return x.System
	}
	return 0
}

func (x *UserUnreadMessage) GetCustomerService() int32 {
	if x != nil {
		return x.CustomerService
	}
	return 0
}

func (x *UserUnreadMessage) GetReward() int32 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *UserUnreadMessage) GetBadge() int32 {
	if x != nil {
		return x.Badge
	}
	return 0
}

type Tweet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content       string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	LikeCount     int32  `protobuf:"varint,4,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	ShareCount    int32  `protobuf:"varint,5,opt,name=share_count,json=shareCount,proto3" json:"share_count,omitempty"`
	ViewCount     int32  `protobuf:"varint,6,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	Status        int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime    int32  `protobuf:"varint,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	SceneryspotId string `protobuf:"bytes,9,opt,name=sceneryspot_id,json=sceneryspotId,proto3" json:"sceneryspot_id,omitempty"`
	EventId       string `protobuf:"bytes,10,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Location      string `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
	Region        string `protobuf:"bytes,13,opt,name=region,proto3" json:"region,omitempty"`
	UpdatedAt     int32  `protobuf:"varint,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Tweet) Reset() {
	*x = Tweet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tweet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tweet) ProtoMessage() {}

func (x *Tweet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tweet.ProtoReflect.Descriptor instead.
func (*Tweet) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{4}
}

func (x *Tweet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tweet) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Tweet) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Tweet) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Tweet) GetShareCount() int32 {
	if x != nil {
		return x.ShareCount
	}
	return 0
}

func (x *Tweet) GetViewCount() int32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *Tweet) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Tweet) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Tweet) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *Tweet) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Tweet) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Tweet) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Tweet) GetUpdatedAt() int32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type TweetLikeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TweetId        string `protobuf:"bytes,2,opt,name=tweet_id,json=tweetId,proto3" json:"tweet_id,omitempty"`
	LikeUserId     string `protobuf:"bytes,3,opt,name=like_user_id,json=likeUserId,proto3" json:"like_user_id,omitempty"`
	LikeUserName   string `protobuf:"bytes,4,opt,name=like_user_name,json=likeUserName,proto3" json:"like_user_name,omitempty"`
	LikeUserAvatar string `protobuf:"bytes,5,opt,name=like_user_avatar,json=likeUserAvatar,proto3" json:"like_user_avatar,omitempty"`
	LikeTime       int32  `protobuf:"varint,6,opt,name=like_time,json=likeTime,proto3" json:"like_time,omitempty"`
}

func (x *TweetLikeRecord) Reset() {
	*x = TweetLikeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetLikeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetLikeRecord) ProtoMessage() {}

func (x *TweetLikeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetLikeRecord.ProtoReflect.Descriptor instead.
func (*TweetLikeRecord) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{5}
}

func (x *TweetLikeRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TweetLikeRecord) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *TweetLikeRecord) GetLikeUserId() string {
	if x != nil {
		return x.LikeUserId
	}
	return ""
}

func (x *TweetLikeRecord) GetLikeUserName() string {
	if x != nil {
		return x.LikeUserName
	}
	return ""
}

func (x *TweetLikeRecord) GetLikeUserAvatar() string {
	if x != nil {
		return x.LikeUserAvatar
	}
	return ""
}

func (x *TweetLikeRecord) GetLikeTime() int32 {
	if x != nil {
		return x.LikeTime
	}
	return 0
}

type TweetLikeRecordRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TweetLikeRecord `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TweetLikeRecordRes) Reset() {
	*x = TweetLikeRecordRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetLikeRecordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetLikeRecordRes) ProtoMessage() {}

func (x *TweetLikeRecordRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetLikeRecordRes.ProtoReflect.Descriptor instead.
func (*TweetLikeRecordRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{6}
}

func (x *TweetLikeRecordRes) GetData() []*TweetLikeRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type TweetShareRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TweetId         string `protobuf:"bytes,2,opt,name=tweet_id,json=tweetId,proto3" json:"tweet_id,omitempty"`
	ShareUserId     string `protobuf:"bytes,3,opt,name=share_user_id,json=shareUserId,proto3" json:"share_user_id,omitempty"`
	ShareUserName   string `protobuf:"bytes,4,opt,name=share_user_name,json=shareUserName,proto3" json:"share_user_name,omitempty"`
	ShareUserAvatar string `protobuf:"bytes,5,opt,name=share_user_avatar,json=shareUserAvatar,proto3" json:"share_user_avatar,omitempty"`
	ShareTime       int32  `protobuf:"varint,6,opt,name=share_time,json=shareTime,proto3" json:"share_time,omitempty"`
}

func (x *TweetShareRecord) Reset() {
	*x = TweetShareRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetShareRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetShareRecord) ProtoMessage() {}

func (x *TweetShareRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetShareRecord.ProtoReflect.Descriptor instead.
func (*TweetShareRecord) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{7}
}

func (x *TweetShareRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TweetShareRecord) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *TweetShareRecord) GetShareUserId() string {
	if x != nil {
		return x.ShareUserId
	}
	return ""
}

func (x *TweetShareRecord) GetShareUserName() string {
	if x != nil {
		return x.ShareUserName
	}
	return ""
}

func (x *TweetShareRecord) GetShareUserAvatar() string {
	if x != nil {
		return x.ShareUserAvatar
	}
	return ""
}

func (x *TweetShareRecord) GetShareTime() int32 {
	if x != nil {
		return x.ShareTime
	}
	return 0
}

type TweetShareRecordRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TweetShareRecord `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TweetShareRecordRes) Reset() {
	*x = TweetShareRecordRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetShareRecordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetShareRecordRes) ProtoMessage() {}

func (x *TweetShareRecordRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetShareRecordRes.ProtoReflect.Descriptor instead.
func (*TweetShareRecordRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{8}
}

func (x *TweetShareRecordRes) GetData() []*TweetShareRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type TweetViewRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TweetId        string `protobuf:"bytes,2,opt,name=tweet_id,json=tweetId,proto3" json:"tweet_id,omitempty"`
	ViewUserId     string `protobuf:"bytes,3,opt,name=view_user_id,json=viewUserId,proto3" json:"view_user_id,omitempty"`
	ViewUserName   string `protobuf:"bytes,4,opt,name=view_user_name,json=viewUserName,proto3" json:"view_user_name,omitempty"`
	ViewUserAvatar string `protobuf:"bytes,5,opt,name=view_user_avatar,json=viewUserAvatar,proto3" json:"view_user_avatar,omitempty"`
	ViewTime       int32  `protobuf:"varint,6,opt,name=view_time,json=viewTime,proto3" json:"view_time,omitempty"`
}

func (x *TweetViewRecord) Reset() {
	*x = TweetViewRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetViewRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetViewRecord) ProtoMessage() {}

func (x *TweetViewRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetViewRecord.ProtoReflect.Descriptor instead.
func (*TweetViewRecord) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{9}
}

func (x *TweetViewRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TweetViewRecord) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *TweetViewRecord) GetViewUserId() string {
	if x != nil {
		return x.ViewUserId
	}
	return ""
}

func (x *TweetViewRecord) GetViewUserName() string {
	if x != nil {
		return x.ViewUserName
	}
	return ""
}

func (x *TweetViewRecord) GetViewUserAvatar() string {
	if x != nil {
		return x.ViewUserAvatar
	}
	return ""
}

func (x *TweetViewRecord) GetViewTime() int32 {
	if x != nil {
		return x.ViewTime
	}
	return 0
}

type TweetViewRecordRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TweetViewRecord `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TweetViewRecordRes) Reset() {
	*x = TweetViewRecordRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetViewRecordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetViewRecordRes) ProtoMessage() {}

func (x *TweetViewRecordRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetViewRecordRes.ProtoReflect.Descriptor instead.
func (*TweetViewRecordRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{10}
}

func (x *TweetViewRecordRes) GetData() []*TweetViewRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type TweetUserActionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TweetId string `protobuf:"bytes,1,opt,name=tweet_id,json=tweetId,proto3" json:"tweet_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Like    int32  `protobuf:"varint,3,opt,name=like,proto3" json:"like,omitempty"`
	Share   int32  `protobuf:"varint,4,opt,name=share,proto3" json:"share,omitempty"`
	View    int32  `protobuf:"varint,5,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *TweetUserActionState) Reset() {
	*x = TweetUserActionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetUserActionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetUserActionState) ProtoMessage() {}

func (x *TweetUserActionState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetUserActionState.ProtoReflect.Descriptor instead.
func (*TweetUserActionState) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{11}
}

func (x *TweetUserActionState) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *TweetUserActionState) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TweetUserActionState) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *TweetUserActionState) GetShare() int32 {
	if x != nil {
		return x.Share
	}
	return 0
}

func (x *TweetUserActionState) GetView() int32 {
	if x != nil {
		return x.View
	}
	return 0
}

type TweetUserActionStateRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TweetUserActionState `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TweetUserActionStateRes) Reset() {
	*x = TweetUserActionStateRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetUserActionStateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetUserActionStateRes) ProtoMessage() {}

func (x *TweetUserActionStateRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetUserActionStateRes.ProtoReflect.Descriptor instead.
func (*TweetUserActionStateRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{12}
}

func (x *TweetUserActionStateRes) GetData() []*TweetUserActionState {
	if x != nil {
		return x.Data
	}
	return nil
}

type TweetUserRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TweetId string `protobuf:"bytes,1,opt,name=tweet_id,json=tweetId,proto3" json:"tweet_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TweetUserRef) Reset() {
	*x = TweetUserRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetUserRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetUserRef) ProtoMessage() {}

func (x *TweetUserRef) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetUserRef.ProtoReflect.Descriptor instead.
func (*TweetUserRef) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{13}
}

func (x *TweetUserRef) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *TweetUserRef) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type TweetUserRefRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TweetUserRef `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TweetUserRefRes) Reset() {
	*x = TweetUserRefRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetUserRefRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetUserRefRes) ProtoMessage() {}

func (x *TweetUserRefRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetUserRefRes.ProtoReflect.Descriptor instead.
func (*TweetUserRefRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{14}
}

func (x *TweetUserRefRes) GetData() []*TweetUserRef {
	if x != nil {
		return x.Data
	}
	return nil
}

type Followers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Follower     string `protobuf:"bytes,2,opt,name=follower,proto3" json:"follower,omitempty"`
	FollowerTime int32  `protobuf:"varint,3,opt,name=follower_time,json=followerTime,proto3" json:"follower_time,omitempty"`
}

func (x *Followers) Reset() {
	*x = Followers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Followers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Followers) ProtoMessage() {}

func (x *Followers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Followers.ProtoReflect.Descriptor instead.
func (*Followers) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{15}
}

func (x *Followers) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Followers) GetFollower() string {
	if x != nil {
		return x.Follower
	}
	return ""
}

func (x *Followers) GetFollowerTime() int32 {
	if x != nil {
		return x.FollowerTime
	}
	return 0
}

type Following struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Following     string `protobuf:"bytes,2,opt,name=following,proto3" json:"following,omitempty"`
	FollowingTime int32  `protobuf:"varint,3,opt,name=following_time,json=followingTime,proto3" json:"following_time,omitempty"`
}

func (x *Following) Reset() {
	*x = Following{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Following) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Following) ProtoMessage() {}

func (x *Following) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Following.ProtoReflect.Descriptor instead.
func (*Following) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{16}
}

func (x *Following) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Following) GetFollowing() string {
	if x != nil {
		return x.Following
	}
	return ""
}

func (x *Following) GetFollowingTime() int32 {
	if x != nil {
		return x.FollowingTime
	}
	return 0
}

type UserLikeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Liker     string `protobuf:"bytes,3,opt,name=liker,proto3" json:"liker,omitempty"`
	LikeTweet string `protobuf:"bytes,4,opt,name=like_tweet,json=likeTweet,proto3" json:"like_tweet,omitempty"`
	LikeTime  int32  `protobuf:"varint,5,opt,name=like_time,json=likeTime,proto3" json:"like_time,omitempty"`
}

func (x *UserLikeRecord) Reset() {
	*x = UserLikeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLikeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLikeRecord) ProtoMessage() {}

func (x *UserLikeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLikeRecord.ProtoReflect.Descriptor instead.
func (*UserLikeRecord) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{17}
}

func (x *UserLikeRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserLikeRecord) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserLikeRecord) GetLiker() string {
	if x != nil {
		return x.Liker
	}
	return ""
}

func (x *UserLikeRecord) GetLikeTweet() string {
	if x != nil {
		return x.LikeTweet
	}
	return ""
}

func (x *UserLikeRecord) GetLikeTime() int32 {
	if x != nil {
		return x.LikeTime
	}
	return 0
}

type MsgsKeyword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MsgsKeyword) Reset() {
	*x = MsgsKeyword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgsKeyword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgsKeyword) ProtoMessage() {}

func (x *MsgsKeyword) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgsKeyword.ProtoReflect.Descriptor instead.
func (*MsgsKeyword) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{18}
}

func (x *MsgsKeyword) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type MsgsEmptyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgsEmptyReq) Reset() {
	*x = MsgsEmptyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgsEmptyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgsEmptyReq) ProtoMessage() {}

func (x *MsgsEmptyReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgsEmptyReq.ProtoReflect.Descriptor instead.
func (*MsgsEmptyReq) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{19}
}

type MsgsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MsgsRes) Reset() {
	*x = MsgsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgsRes) ProtoMessage() {}

func (x *MsgsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgsRes.ProtoReflect.Descriptor instead.
func (*MsgsRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{20}
}

func (x *MsgsRes) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type NotificationsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Notification `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *NotificationsRes) Reset() {
	*x = NotificationsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationsRes) ProtoMessage() {}

func (x *NotificationsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationsRes.ProtoReflect.Descriptor instead.
func (*NotificationsRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{21}
}

func (x *NotificationsRes) GetData() []*Notification {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserNotificationsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserNotification `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserNotificationsRes) Reset() {
	*x = UserNotificationsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserNotificationsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNotificationsRes) ProtoMessage() {}

func (x *UserNotificationsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNotificationsRes.ProtoReflect.Descriptor instead.
func (*UserNotificationsRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{22}
}

func (x *UserNotificationsRes) GetData() []*UserNotification {
	if x != nil {
		return x.Data
	}
	return nil
}

type ClearUserUnreadMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ClearUserUnreadMessageReq) Reset() {
	*x = ClearUserUnreadMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearUserUnreadMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearUserUnreadMessageReq) ProtoMessage() {}

func (x *ClearUserUnreadMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearUserUnreadMessageReq.ProtoReflect.Descriptor instead.
func (*ClearUserUnreadMessageReq) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{23}
}

func (x *ClearUserUnreadMessageReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClearUserUnreadMessageReq) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ConversationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Conversation `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ConversationsResponse) Reset() {
	*x = ConversationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationsResponse) ProtoMessage() {}

func (x *ConversationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationsResponse.ProtoReflect.Descriptor instead.
func (*ConversationsResponse) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{24}
}

func (x *ConversationsResponse) GetData() []*Conversation {
	if x != nil {
		return x.Data
	}
	return nil
}

type TweetsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  []*Tweet `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TweetsRes) Reset() {
	*x = TweetsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetsRes) ProtoMessage() {}

func (x *TweetsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetsRes.ProtoReflect.Descriptor instead.
func (*TweetsRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{25}
}

func (x *TweetsRes) GetData() []*Tweet {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TweetsRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TweetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TweetId string `protobuf:"bytes,1,opt,name=tweetId,proto3" json:"tweetId,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *TweetReq) Reset() {
	*x = TweetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetReq) ProtoMessage() {}

func (x *TweetReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetReq.ProtoReflect.Descriptor instead.
func (*TweetReq) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{26}
}

func (x *TweetReq) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *TweetReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type NewestTweetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId       string `protobuf:"bytes,1,opt,name=eventId,proto3" json:"eventId,omitempty"`
	SceneryspotId string `protobuf:"bytes,2,opt,name=sceneryspotId,proto3" json:"sceneryspotId,omitempty"`
	PageIndex     int32  `protobuf:"varint,3,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	PageSize      int32  `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *NewestTweetReq) Reset() {
	*x = NewestTweetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewestTweetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewestTweetReq) ProtoMessage() {}

func (x *NewestTweetReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewestTweetReq.ProtoReflect.Descriptor instead.
func (*NewestTweetReq) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{27}
}

func (x *NewestTweetReq) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *NewestTweetReq) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

func (x *NewestTweetReq) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *NewestTweetReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type UserTweetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	EventId       string `protobuf:"bytes,2,opt,name=eventId,proto3" json:"eventId,omitempty"`
	SceneryspotId string `protobuf:"bytes,3,opt,name=sceneryspotId,proto3" json:"sceneryspotId,omitempty"`
}

func (x *UserTweetRequest) Reset() {
	*x = UserTweetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTweetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTweetRequest) ProtoMessage() {}

func (x *UserTweetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTweetRequest.ProtoReflect.Descriptor instead.
func (*UserTweetRequest) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{28}
}

func (x *UserTweetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserTweetRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UserTweetRequest) GetSceneryspotId() string {
	if x != nil {
		return x.SceneryspotId
	}
	return ""
}

type FollowerssRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Followers `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FollowerssRes) Reset() {
	*x = FollowerssRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowerssRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowerssRes) ProtoMessage() {}

func (x *FollowerssRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowerssRes.ProtoReflect.Descriptor instead.
func (*FollowerssRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{29}
}

func (x *FollowerssRes) GetData() []*Followers {
	if x != nil {
		return x.Data
	}
	return nil
}

type FollowingsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Following `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FollowingsRes) Reset() {
	*x = FollowingsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowingsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowingsRes) ProtoMessage() {}

func (x *FollowingsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowingsRes.ProtoReflect.Descriptor instead.
func (*FollowingsRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{30}
}

func (x *FollowingsRes) GetData() []*Following {
	if x != nil {
		return x.Data
	}
	return nil
}

type TweetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	UserId       string   `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	EventId      string   `protobuf:"bytes,3,opt,name=eventId,proto3" json:"eventId,omitempty"`
	Sceneryspots []string `protobuf:"bytes,4,rep,name=sceneryspots,proto3" json:"sceneryspots,omitempty"`
	Offset       int32    `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        int32    `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TweetRequest) Reset() {
	*x = TweetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetRequest) ProtoMessage() {}

func (x *TweetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetRequest.ProtoReflect.Descriptor instead.
func (*TweetRequest) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{31}
}

func (x *TweetRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TweetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TweetRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *TweetRequest) GetSceneryspots() []string {
	if x != nil {
		return x.Sceneryspots
	}
	return nil
}

func (x *TweetRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TweetRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TweetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Tweet `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TweetResponse) Reset() {
	*x = TweetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TweetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TweetResponse) ProtoMessage() {}

func (x *TweetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TweetResponse.ProtoReflect.Descriptor instead.
func (*TweetResponse) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{32}
}

func (x *TweetResponse) GetData() []*Tweet {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserLikeRecordsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserLikeRecord `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserLikeRecordsRes) Reset() {
	*x = UserLikeRecordsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLikeRecordsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLikeRecordsRes) ProtoMessage() {}

func (x *UserLikeRecordsRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLikeRecordsRes.ProtoReflect.Descriptor instead.
func (*UserLikeRecordsRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{33}
}

func (x *UserLikeRecordsRes) GetData() []*UserLikeRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DeleteNotificationRequest) Reset() {
	*x = DeleteNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotificationRequest) ProtoMessage() {}

func (x *DeleteNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotificationRequest.ProtoReflect.Descriptor instead.
func (*DeleteNotificationRequest) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteNotificationRequest) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartCursor     string `protobuf:"bytes,1,opt,name=startCursor,proto3" json:"startCursor,omitempty"`
	EndCursor       string `protobuf:"bytes,2,opt,name=endCursor,proto3" json:"endCursor,omitempty"`
	HasPreviousPage bool   `protobuf:"varint,3,opt,name=hasPreviousPage,proto3" json:"hasPreviousPage,omitempty"`
	HasNextPage     bool   `protobuf:"varint,4,opt,name=hasNextPage,proto3" json:"hasNextPage,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{35}
}

func (x *PageInfo) GetStartCursor() string {
	if x != nil {
		return x.StartCursor
	}
	return ""
}

func (x *PageInfo) GetEndCursor() string {
	if x != nil {
		return x.EndCursor
	}
	return ""
}

func (x *PageInfo) GetHasPreviousPage() bool {
	if x != nil {
		return x.HasPreviousPage
	}
	return false
}

func (x *PageInfo) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

type ParticipantConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	From        string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	UserId      string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *ParticipantConversationRequest) Reset() {
	*x = ParticipantConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantConversationRequest) ProtoMessage() {}

func (x *ParticipantConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantConversationRequest.ProtoReflect.Descriptor instead.
func (*ParticipantConversationRequest) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{36}
}

func (x *ParticipantConversationRequest) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *ParticipantConversationRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ParticipantConversationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  int32  `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	After  string `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *UserConversationRequest) Reset() {
	*x = UserConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConversationRequest) ProtoMessage() {}

func (x *UserConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConversationRequest.ProtoReflect.Descriptor instead.
func (*UserConversationRequest) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{37}
}

func (x *UserConversationRequest) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *UserConversationRequest) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *UserConversationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data     []*Conversation `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	PageInfo *PageInfo       `protobuf:"bytes,2,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
}

func (x *UserConversationResponse) Reset() {
	*x = UserConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserConversationResponse) ProtoMessage() {}

func (x *UserConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserConversationResponse.ProtoReflect.Descriptor instead.
func (*UserConversationResponse) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{38}
}

func (x *UserConversationResponse) GetData() []*Conversation {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UserConversationResponse) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type UserRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TweetId     string `protobuf:"bytes,3,opt,name=tweet_id,json=tweetId,proto3" json:"tweet_id,omitempty"`
	TweetUserId string `protobuf:"bytes,4,opt,name=tweet_user_id,json=tweetUserId,proto3" json:"tweet_user_id,omitempty"`
	ActionType  string `protobuf:"bytes,5,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Time        int32  `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *UserRecord) Reset() {
	*x = UserRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRecord) ProtoMessage() {}

func (x *UserRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRecord.ProtoReflect.Descriptor instead.
func (*UserRecord) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{39}
}

func (x *UserRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserRecord) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRecord) GetTweetId() string {
	if x != nil {
		return x.TweetId
	}
	return ""
}

func (x *UserRecord) GetTweetUserId() string {
	if x != nil {
		return x.TweetUserId
	}
	return ""
}

func (x *UserRecord) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *UserRecord) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type UserRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ActionType string `protobuf:"bytes,2,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
}

func (x *UserRecordReq) Reset() {
	*x = UserRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRecordReq) ProtoMessage() {}

func (x *UserRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRecordReq.ProtoReflect.Descriptor instead.
func (*UserRecordReq) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{40}
}

func (x *UserRecordReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRecordReq) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

type UserRecordRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*UserRecord `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserRecordRes) Reset() {
	*x = UserRecordRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_message_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRecordRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRecordRes) ProtoMessage() {}

func (x *UserRecordRes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_message_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRecordRes.ProtoReflect.Descriptor instead.
func (*UserRecordRes) Descriptor() ([]byte, []int) {
	return file_proto_message_proto_rawDescGZIP(), []int{41}
}

func (x *UserRecordRes) GetData() []*UserRecord {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_proto_message_proto protoreflect.FileDescriptor

var file_proto_message_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x22, 0xee, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x05, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73,
	0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4c, 0x69, 0x6b,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69,
	0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x69,
	0x6b, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x48, 0x0a, 0x12, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x01, 0x0a, 0x10,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x13, 0x54, 0x77, 0x65, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcb,
	0x01, 0x0a, 0x0f, 0x54, 0x77, 0x65, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x76, 0x69, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x12,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x22, 0x52, 0x0a, 0x17, 0x54, 0x77, 0x65, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x0c, 0x54, 0x77, 0x65, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0f, 0x54, 0x77, 0x65,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a,
	0x09, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x09, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x8b, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74, 0x77, 0x65, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x23, 0x0a,
	0x0b, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x22, 0x1f, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x48,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x09, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3c, 0x0a, 0x08, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x54, 0x77,
	0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79,
	0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x6a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72,
	0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x0d,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x0d, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x0c, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x72, 0x79,
	0x73, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x72, 0x79, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x39, 0x0a, 0x0d, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x47, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x96, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x4e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61,
	0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x0a, 0x1e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x17, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x77, 0x65, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x74, 0x77, 0x65, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x77, 0x65, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x3e, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x91, 0x1c, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a,
	0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x23, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a,
	0x1b, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x74,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x1a, 0x20, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x16, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x28, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x77, 0x65,
	0x65, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x14, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65,
	0x65, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x54, 0x77, 0x65,
	0x65, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x1f, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54,
	0x77, 0x65, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x4c, 0x69,
	0x6b, 0x65, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x55, 0x6e,
	0x6c, 0x69, 0x6b, 0x65, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x21,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x6b, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x21, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e,
	0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x1a, 0x16,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d,
	0x73, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x73, 0x68, 0x65, 0x6e,
	0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67,
	0x1a, 0x16, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x4d, 0x73, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e,
	0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x1c,
	0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x4d, 0x73, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x56, 0x69, 0x65,
	0x77, 0x54, 0x77, 0x65, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x4d, 0x73, 0x67, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x21, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x1a, 0x22, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x21, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x68,
	0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x26, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68,
	0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x4c, 0x69, 0x6b,
	0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69,
	0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x1a,
	0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e,
	0x54, 0x77, 0x65, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79,
	0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69,
	0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x77, 0x65, 0x65, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75,
	0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x4d, 0x73, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x1a, 0x1e, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a,
	0x69, 0x2e, 0x54, 0x77, 0x65, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x73,
	0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65,
	0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x54, 0x77, 0x65,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a,
	0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f,
	0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3b, 0x73, 0x68, 0x65, 0x6e, 0x7a, 0x68, 0x6f, 0x75, 0x79, 0x69, 0x6e, 0x6a, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_message_proto_rawDescOnce sync.Once
	file_proto_message_proto_rawDescData = file_proto_message_proto_rawDesc
)

func file_proto_message_proto_rawDescGZIP() []byte {
	file_proto_message_proto_rawDescOnce.Do(func() {
		file_proto_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_message_proto_rawDescData)
	})
	return file_proto_message_proto_rawDescData
}

var file_proto_message_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_proto_message_proto_goTypes = []interface{}{
	(*Notification)(nil),                   // 0: shenzhouyinji.Notification
	(*UserNotification)(nil),               // 1: shenzhouyinji.UserNotification
	(*Conversation)(nil),                   // 2: shenzhouyinji.Conversation
	(*UserUnreadMessage)(nil),              // 3: shenzhouyinji.UserUnreadMessage
	(*Tweet)(nil),                          // 4: shenzhouyinji.Tweet
	(*TweetLikeRecord)(nil),                // 5: shenzhouyinji.TweetLikeRecord
	(*TweetLikeRecordRes)(nil),             // 6: shenzhouyinji.TweetLikeRecordRes
	(*TweetShareRecord)(nil),               // 7: shenzhouyinji.TweetShareRecord
	(*TweetShareRecordRes)(nil),            // 8: shenzhouyinji.TweetShareRecordRes
	(*TweetViewRecord)(nil),                // 9: shenzhouyinji.TweetViewRecord
	(*TweetViewRecordRes)(nil),             // 10: shenzhouyinji.TweetViewRecordRes
	(*TweetUserActionState)(nil),           // 11: shenzhouyinji.TweetUserActionState
	(*TweetUserActionStateRes)(nil),        // 12: shenzhouyinji.TweetUserActionStateRes
	(*TweetUserRef)(nil),                   // 13: shenzhouyinji.TweetUserRef
	(*TweetUserRefRes)(nil),                // 14: shenzhouyinji.TweetUserRefRes
	(*Followers)(nil),                      // 15: shenzhouyinji.Followers
	(*Following)(nil),                      // 16: shenzhouyinji.Following
	(*UserLikeRecord)(nil),                 // 17: shenzhouyinji.UserLikeRecord
	(*MsgsKeyword)(nil),                    // 18: shenzhouyinji.MsgsKeyword
	(*MsgsEmptyReq)(nil),                   // 19: shenzhouyinji.MsgsEmptyReq
	(*MsgsRes)(nil),                        // 20: shenzhouyinji.MsgsRes
	(*NotificationsRes)(nil),               // 21: shenzhouyinji.NotificationsRes
	(*UserNotificationsRes)(nil),           // 22: shenzhouyinji.UserNotificationsRes
	(*ClearUserUnreadMessageReq)(nil),      // 23: shenzhouyinji.ClearUserUnreadMessageReq
	(*ConversationsResponse)(nil),          // 24: shenzhouyinji.ConversationsResponse
	(*TweetsRes)(nil),                      // 25: shenzhouyinji.TweetsRes
	(*TweetReq)(nil),                       // 26: shenzhouyinji.TweetReq
	(*NewestTweetReq)(nil),                 // 27: shenzhouyinji.NewestTweetReq
	(*UserTweetRequest)(nil),               // 28: shenzhouyinji.UserTweetRequest
	(*FollowerssRes)(nil),                  // 29: shenzhouyinji.FollowerssRes
	(*FollowingsRes)(nil),                  // 30: shenzhouyinji.FollowingsRes
	(*TweetRequest)(nil),                   // 31: shenzhouyinji.TweetRequest
	(*TweetResponse)(nil),                  // 32: shenzhouyinji.TweetResponse
	(*UserLikeRecordsRes)(nil),             // 33: shenzhouyinji.UserLikeRecordsRes
	(*DeleteNotificationRequest)(nil),      // 34: shenzhouyinji.DeleteNotificationRequest
	(*PageInfo)(nil),                       // 35: shenzhouyinji.PageInfo
	(*ParticipantConversationRequest)(nil), // 36: shenzhouyinji.ParticipantConversationRequest
	(*UserConversationRequest)(nil),        // 37: shenzhouyinji.UserConversationRequest
	(*UserConversationResponse)(nil),       // 38: shenzhouyinji.UserConversationResponse
	(*UserRecord)(nil),                     // 39: shenzhouyinji.UserRecord
	(*UserRecordReq)(nil),                  // 40: shenzhouyinji.UserRecordReq
	(*UserRecordRes)(nil),                  // 41: shenzhouyinji.UserRecordRes
}
var file_proto_message_proto_depIdxs = []int32{
	5,  // 0: shenzhouyinji.TweetLikeRecordRes.data:type_name -> shenzhouyinji.TweetLikeRecord
	7,  // 1: shenzhouyinji.TweetShareRecordRes.data:type_name -> shenzhouyinji.TweetShareRecord
	9,  // 2: shenzhouyinji.TweetViewRecordRes.data:type_name -> shenzhouyinji.TweetViewRecord
	11, // 3: shenzhouyinji.TweetUserActionStateRes.data:type_name -> shenzhouyinji.TweetUserActionState
	13, // 4: shenzhouyinji.TweetUserRefRes.data:type_name -> shenzhouyinji.TweetUserRef
	0,  // 5: shenzhouyinji.NotificationsRes.data:type_name -> shenzhouyinji.Notification
	1,  // 6: shenzhouyinji.UserNotificationsRes.data:type_name -> shenzhouyinji.UserNotification
	2,  // 7: shenzhouyinji.ConversationsResponse.data:type_name -> shenzhouyinji.Conversation
	4,  // 8: shenzhouyinji.TweetsRes.data:type_name -> shenzhouyinji.Tweet
	15, // 9: shenzhouyinji.FollowerssRes.data:type_name -> shenzhouyinji.Followers
	16, // 10: shenzhouyinji.FollowingsRes.data:type_name -> shenzhouyinji.Following
	4,  // 11: shenzhouyinji.TweetResponse.data:type_name -> shenzhouyinji.Tweet
	17, // 12: shenzhouyinji.UserLikeRecordsRes.data:type_name -> shenzhouyinji.UserLikeRecord
	2,  // 13: shenzhouyinji.UserConversationResponse.data:type_name -> shenzhouyinji.Conversation
	35, // 14: shenzhouyinji.UserConversationResponse.pageInfo:type_name -> shenzhouyinji.PageInfo
	39, // 15: shenzhouyinji.UserRecordRes.data:type_name -> shenzhouyinji.UserRecord
	0,  // 16: shenzhouyinji.MessagesService.CreateNotification:input_type -> shenzhouyinji.Notification
	0,  // 17: shenzhouyinji.MessagesService.UpdateNotification:input_type -> shenzhouyinji.Notification
	34, // 18: shenzhouyinji.MessagesService.DeleteNotification:input_type -> shenzhouyinji.DeleteNotificationRequest
	18, // 19: shenzhouyinji.MessagesService.GetNotification:input_type -> shenzhouyinji.MsgsKeyword
	19, // 20: shenzhouyinji.MessagesService.GetNotifications:input_type -> shenzhouyinji.MsgsEmptyReq
	1,  // 21: shenzhouyinji.MessagesService.UpdateUserNotification:input_type -> shenzhouyinji.UserNotification
	18, // 22: shenzhouyinji.MessagesService.GetUserNotifications:input_type -> shenzhouyinji.MsgsKeyword
	2,  // 23: shenzhouyinji.MessagesService.CreateConversation:input_type -> shenzhouyinji.Conversation
	2,  // 24: shenzhouyinji.MessagesService.UpdateConversation:input_type -> shenzhouyinji.Conversation
	18, // 25: shenzhouyinji.MessagesService.GetConversation:input_type -> shenzhouyinji.MsgsKeyword
	36, // 26: shenzhouyinji.MessagesService.GetParticipantConversations:input_type -> shenzhouyinji.ParticipantConversationRequest
	37, // 27: shenzhouyinji.MessagesService.GetUserConversations:input_type -> shenzhouyinji.UserConversationRequest
	37, // 28: shenzhouyinji.MessagesService.GetServiceConversations:input_type -> shenzhouyinji.UserConversationRequest
	18, // 29: shenzhouyinji.MessagesService.GetUserUnreadMessage:input_type -> shenzhouyinji.MsgsKeyword
	23, // 30: shenzhouyinji.MessagesService.ClearUserUnreadMessage:input_type -> shenzhouyinji.ClearUserUnreadMessageReq
	4,  // 31: shenzhouyinji.MessagesService.CreateTweet:input_type -> shenzhouyinji.Tweet
	4,  // 32: shenzhouyinji.MessagesService.UpdateTweet:input_type -> shenzhouyinji.Tweet
	4,  // 33: shenzhouyinji.MessagesService.RemoveTweet:input_type -> shenzhouyinji.Tweet
	18, // 34: shenzhouyinji.MessagesService.GetTweet:input_type -> shenzhouyinji.MsgsKeyword
	18, // 35: shenzhouyinji.MessagesService.GetTweetByUserID:input_type -> shenzhouyinji.MsgsKeyword
	27, // 36: shenzhouyinji.MessagesService.GetNewestTweet:input_type -> shenzhouyinji.NewestTweetReq
	28, // 37: shenzhouyinji.MessagesService.GetUserTweet:input_type -> shenzhouyinji.UserTweetRequest
	26, // 38: shenzhouyinji.MessagesService.LikeTweet:input_type -> shenzhouyinji.TweetReq
	26, // 39: shenzhouyinji.MessagesService.UnlikeTweet:input_type -> shenzhouyinji.TweetReq
	18, // 40: shenzhouyinji.MessagesService.GetUserLikedRecord:input_type -> shenzhouyinji.MsgsKeyword
	18, // 41: shenzhouyinji.MessagesService.GetUserLikesRecord:input_type -> shenzhouyinji.MsgsKeyword
	15, // 42: shenzhouyinji.MessagesService.CreateFollowers:input_type -> shenzhouyinji.Followers
	15, // 43: shenzhouyinji.MessagesService.RemoveFollowers:input_type -> shenzhouyinji.Followers
	18, // 44: shenzhouyinji.MessagesService.GetFollowersByUserID:input_type -> shenzhouyinji.MsgsKeyword
	16, // 45: shenzhouyinji.MessagesService.CreateFollowing:input_type -> shenzhouyinji.Following
	16, // 46: shenzhouyinji.MessagesService.RemoveFollowing:input_type -> shenzhouyinji.Following
	18, // 47: shenzhouyinji.MessagesService.GetFollowingByUserID:input_type -> shenzhouyinji.MsgsKeyword
	31, // 48: shenzhouyinji.MessagesService.GetTweets:input_type -> shenzhouyinji.TweetRequest
	26, // 49: shenzhouyinji.MessagesService.ShareTweet:input_type -> shenzhouyinji.TweetReq
	26, // 50: shenzhouyinji.MessagesService.ViewTweet:input_type -> shenzhouyinji.TweetReq
	18, // 51: shenzhouyinji.MessagesService.GetTweetLikeRecord:input_type -> shenzhouyinji.MsgsKeyword
	18, // 52: shenzhouyinji.MessagesService.GetTweetShareRecord:input_type -> shenzhouyinji.MsgsKeyword
	18, // 53: shenzhouyinji.MessagesService.GetTweetViewRecord:input_type -> shenzhouyinji.MsgsKeyword
	18, // 54: shenzhouyinji.MessagesService.GetTweetUserActionState:input_type -> shenzhouyinji.MsgsKeyword
	18, // 55: shenzhouyinji.MessagesService.GetTweetLikers:input_type -> shenzhouyinji.MsgsKeyword
	18, // 56: shenzhouyinji.MessagesService.GetTweetSharers:input_type -> shenzhouyinji.MsgsKeyword
	18, // 57: shenzhouyinji.MessagesService.GetTweetViewers:input_type -> shenzhouyinji.MsgsKeyword
	40, // 58: shenzhouyinji.MessagesService.GetUserRecordByUserId:input_type -> shenzhouyinji.UserRecordReq
	40, // 59: shenzhouyinji.MessagesService.GetUserRecordByTweetUserId:input_type -> shenzhouyinji.UserRecordReq
	18, // 60: shenzhouyinji.MessagesService.CreateNotification:output_type -> shenzhouyinji.MsgsKeyword
	21, // 61: shenzhouyinji.MessagesService.UpdateNotification:output_type -> shenzhouyinji.NotificationsRes
	21, // 62: shenzhouyinji.MessagesService.DeleteNotification:output_type -> shenzhouyinji.NotificationsRes
	0,  // 63: shenzhouyinji.MessagesService.GetNotification:output_type -> shenzhouyinji.Notification
	21, // 64: shenzhouyinji.MessagesService.GetNotifications:output_type -> shenzhouyinji.NotificationsRes
	20, // 65: shenzhouyinji.MessagesService.UpdateUserNotification:output_type -> shenzhouyinji.MsgsRes
	22, // 66: shenzhouyinji.MessagesService.GetUserNotifications:output_type -> shenzhouyinji.UserNotificationsRes
	18, // 67: shenzhouyinji.MessagesService.CreateConversation:output_type -> shenzhouyinji.MsgsKeyword
	20, // 68: shenzhouyinji.MessagesService.UpdateConversation:output_type -> shenzhouyinji.MsgsRes
	2,  // 69: shenzhouyinji.MessagesService.GetConversation:output_type -> shenzhouyinji.Conversation
	24, // 70: shenzhouyinji.MessagesService.GetParticipantConversations:output_type -> shenzhouyinji.ConversationsResponse
	38, // 71: shenzhouyinji.MessagesService.GetUserConversations:output_type -> shenzhouyinji.UserConversationResponse
	38, // 72: shenzhouyinji.MessagesService.GetServiceConversations:output_type -> shenzhouyinji.UserConversationResponse
	3,  // 73: shenzhouyinji.MessagesService.GetUserUnreadMessage:output_type -> shenzhouyinji.UserUnreadMessage
	20, // 74: shenzhouyinji.MessagesService.ClearUserUnreadMessage:output_type -> shenzhouyinji.MsgsRes
	18, // 75: shenzhouyinji.MessagesService.CreateTweet:output_type -> shenzhouyinji.MsgsKeyword
	20, // 76: shenzhouyinji.MessagesService.UpdateTweet:output_type -> shenzhouyinji.MsgsRes
	20, // 77: shenzhouyinji.MessagesService.RemoveTweet:output_type -> shenzhouyinji.MsgsRes
	4,  // 78: shenzhouyinji.MessagesService.GetTweet:output_type -> shenzhouyinji.Tweet
	25, // 79: shenzhouyinji.MessagesService.GetTweetByUserID:output_type -> shenzhouyinji.TweetsRes
	25, // 80: shenzhouyinji.MessagesService.GetNewestTweet:output_type -> shenzhouyinji.TweetsRes
	25, // 81: shenzhouyinji.MessagesService.GetUserTweet:output_type -> shenzhouyinji.TweetsRes
	20, // 82: shenzhouyinji.MessagesService.LikeTweet:output_type -> shenzhouyinji.MsgsRes
	20, // 83: shenzhouyinji.MessagesService.UnlikeTweet:output_type -> shenzhouyinji.MsgsRes
	33, // 84: shenzhouyinji.MessagesService.GetUserLikedRecord:output_type -> shenzhouyinji.UserLikeRecordsRes
	33, // 85: shenzhouyinji.MessagesService.GetUserLikesRecord:output_type -> shenzhouyinji.UserLikeRecordsRes
	20, // 86: shenzhouyinji.MessagesService.CreateFollowers:output_type -> shenzhouyinji.MsgsRes
	20, // 87: shenzhouyinji.MessagesService.RemoveFollowers:output_type -> shenzhouyinji.MsgsRes
	29, // 88: shenzhouyinji.MessagesService.GetFollowersByUserID:output_type -> shenzhouyinji.FollowerssRes
	20, // 89: shenzhouyinji.MessagesService.CreateFollowing:output_type -> shenzhouyinji.MsgsRes
	20, // 90: shenzhouyinji.MessagesService.RemoveFollowing:output_type -> shenzhouyinji.MsgsRes
	30, // 91: shenzhouyinji.MessagesService.GetFollowingByUserID:output_type -> shenzhouyinji.FollowingsRes
	32, // 92: shenzhouyinji.MessagesService.GetTweets:output_type -> shenzhouyinji.TweetResponse
	20, // 93: shenzhouyinji.MessagesService.ShareTweet:output_type -> shenzhouyinji.MsgsRes
	20, // 94: shenzhouyinji.MessagesService.ViewTweet:output_type -> shenzhouyinji.MsgsRes
	6,  // 95: shenzhouyinji.MessagesService.GetTweetLikeRecord:output_type -> shenzhouyinji.TweetLikeRecordRes
	8,  // 96: shenzhouyinji.MessagesService.GetTweetShareRecord:output_type -> shenzhouyinji.TweetShareRecordRes
	10, // 97: shenzhouyinji.MessagesService.GetTweetViewRecord:output_type -> shenzhouyinji.TweetViewRecordRes
	12, // 98: shenzhouyinji.MessagesService.GetTweetUserActionState:output_type -> shenzhouyinji.TweetUserActionStateRes
	14, // 99: shenzhouyinji.MessagesService.GetTweetLikers:output_type -> shenzhouyinji.TweetUserRefRes
	14, // 100: shenzhouyinji.MessagesService.GetTweetSharers:output_type -> shenzhouyinji.TweetUserRefRes
	14, // 101: shenzhouyinji.MessagesService.GetTweetViewers:output_type -> shenzhouyinji.TweetUserRefRes
	41, // 102: shenzhouyinji.MessagesService.GetUserRecordByUserId:output_type -> shenzhouyinji.UserRecordRes
	41, // 103: shenzhouyinji.MessagesService.GetUserRecordByTweetUserId:output_type -> shenzhouyinji.UserRecordRes
	60, // [60:104] is the sub-list for method output_type
	16, // [16:60] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_proto_message_proto_init() }
func file_proto_message_proto_init() {
	if File_proto_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUnreadMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tweet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetLikeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetLikeRecordRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetShareRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetShareRecordRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetViewRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetViewRecordRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetUserActionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetUserActionStateRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetUserRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetUserRefRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Followers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Following); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLikeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgsKeyword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgsEmptyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserNotificationsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearUserUnreadMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewestTweetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTweetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowerssRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowingsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TweetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLikeRecordsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_message_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRecordRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_message_proto_goTypes,
		DependencyIndexes: file_proto_message_proto_depIdxs,
		MessageInfos:      file_proto_message_proto_msgTypes,
	}.Build()
	File_proto_message_proto = out.File
	file_proto_message_proto_rawDesc = nil
	file_proto_message_proto_goTypes = nil
	file_proto_message_proto_depIdxs = nil
}
