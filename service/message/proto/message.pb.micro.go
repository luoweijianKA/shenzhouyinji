// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/message.proto

package shenzhouyinji

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MessagesService service

func NewMessagesServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MessagesService service

type MessagesService interface {
	CreateNotification(ctx context.Context, in *Notification, opts ...client.CallOption) (*MsgsKeyword, error)
	UpdateNotification(ctx context.Context, in *Notification, opts ...client.CallOption) (*NotificationsRes, error)
	DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...client.CallOption) (*NotificationsRes, error)
	GetNotification(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*Notification, error)
	GetNotifications(ctx context.Context, in *MsgsEmptyReq, opts ...client.CallOption) (*NotificationsRes, error)
	UpdateUserNotification(ctx context.Context, in *UserNotification, opts ...client.CallOption) (*MsgsRes, error)
	GetUserNotifications(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*UserNotificationsRes, error)
	CreateConversation(ctx context.Context, in *Conversation, opts ...client.CallOption) (*MsgsKeyword, error)
	UpdateConversation(ctx context.Context, in *Conversation, opts ...client.CallOption) (*MsgsRes, error)
	GetConversation(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*Conversation, error)
	GetParticipantConversations(ctx context.Context, in *ParticipantConversationRequest, opts ...client.CallOption) (*ConversationsResponse, error)
	GetUserConversations(ctx context.Context, in *UserConversationRequest, opts ...client.CallOption) (*UserConversationResponse, error)
	GetServiceConversations(ctx context.Context, in *UserConversationRequest, opts ...client.CallOption) (*UserConversationResponse, error)
	GetUserUnreadMessage(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*UserUnreadMessage, error)
	ClearUserUnreadMessage(ctx context.Context, in *ClearUserUnreadMessageReq, opts ...client.CallOption) (*MsgsRes, error)
	CreateTweet(ctx context.Context, in *Tweet, opts ...client.CallOption) (*MsgsKeyword, error)
	UpdateTweet(ctx context.Context, in *Tweet, opts ...client.CallOption) (*MsgsRes, error)
	RemoveTweet(ctx context.Context, in *Tweet, opts ...client.CallOption) (*MsgsRes, error)
	GetTweet(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*Tweet, error)
	GetTweetByUserID(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetsRes, error)
	GetNewestTweet(ctx context.Context, in *NewestTweetReq, opts ...client.CallOption) (*TweetsRes, error)
	GetUserTweet(ctx context.Context, in *UserTweetRequest, opts ...client.CallOption) (*TweetsRes, error)
	LikeTweet(ctx context.Context, in *TweetReq, opts ...client.CallOption) (*MsgsRes, error)
	UnlikeTweet(ctx context.Context, in *TweetReq, opts ...client.CallOption) (*MsgsRes, error)
	GetUserLikedRecord(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*UserLikeRecordsRes, error)
	GetUserLikesRecord(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*UserLikeRecordsRes, error)
	CreateFollowers(ctx context.Context, in *Followers, opts ...client.CallOption) (*MsgsRes, error)
	RemoveFollowers(ctx context.Context, in *Followers, opts ...client.CallOption) (*MsgsRes, error)
	GetFollowersByUserID(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*FollowerssRes, error)
	CreateFollowing(ctx context.Context, in *Following, opts ...client.CallOption) (*MsgsRes, error)
	RemoveFollowing(ctx context.Context, in *Following, opts ...client.CallOption) (*MsgsRes, error)
	GetFollowingByUserID(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*FollowingsRes, error)
	GetTweets(ctx context.Context, in *TweetRequest, opts ...client.CallOption) (*TweetResponse, error)
	ShareTweet(ctx context.Context, in *TweetReq, opts ...client.CallOption) (*MsgsRes, error)
	ViewTweet(ctx context.Context, in *TweetReq, opts ...client.CallOption) (*MsgsRes, error)
	GetTweetLikeRecord(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetLikeRecordRes, error)
	GetTweetShareRecord(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetShareRecordRes, error)
	GetTweetViewRecord(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetViewRecordRes, error)
	GetTweetUserActionState(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetUserActionStateRes, error)
	GetTweetLikers(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetUserRefRes, error)
	GetTweetSharers(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetUserRefRes, error)
	GetTweetViewers(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetUserRefRes, error)
	GetUserRecordByUserId(ctx context.Context, in *UserRecordReq, opts ...client.CallOption) (*UserRecordRes, error)
	GetUserRecordByTweetUserId(ctx context.Context, in *UserRecordReq, opts ...client.CallOption) (*UserRecordRes, error)
}

type messagesService struct {
	c    client.Client
	name string
}

func NewMessagesService(name string, c client.Client) MessagesService {
	return &messagesService{
		c:    c,
		name: name,
	}
}

func (c *messagesService) CreateNotification(ctx context.Context, in *Notification, opts ...client.CallOption) (*MsgsKeyword, error) {
	req := c.c.NewRequest(c.name, "MessagesService.CreateNotification", in)
	out := new(MsgsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) UpdateNotification(ctx context.Context, in *Notification, opts ...client.CallOption) (*NotificationsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.UpdateNotification", in)
	out := new(NotificationsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...client.CallOption) (*NotificationsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.DeleteNotification", in)
	out := new(NotificationsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetNotification(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*Notification, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetNotification", in)
	out := new(Notification)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetNotifications(ctx context.Context, in *MsgsEmptyReq, opts ...client.CallOption) (*NotificationsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetNotifications", in)
	out := new(NotificationsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) UpdateUserNotification(ctx context.Context, in *UserNotification, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.UpdateUserNotification", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetUserNotifications(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*UserNotificationsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetUserNotifications", in)
	out := new(UserNotificationsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) CreateConversation(ctx context.Context, in *Conversation, opts ...client.CallOption) (*MsgsKeyword, error) {
	req := c.c.NewRequest(c.name, "MessagesService.CreateConversation", in)
	out := new(MsgsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) UpdateConversation(ctx context.Context, in *Conversation, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.UpdateConversation", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetConversation(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*Conversation, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetConversation", in)
	out := new(Conversation)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetParticipantConversations(ctx context.Context, in *ParticipantConversationRequest, opts ...client.CallOption) (*ConversationsResponse, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetParticipantConversations", in)
	out := new(ConversationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetUserConversations(ctx context.Context, in *UserConversationRequest, opts ...client.CallOption) (*UserConversationResponse, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetUserConversations", in)
	out := new(UserConversationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetServiceConversations(ctx context.Context, in *UserConversationRequest, opts ...client.CallOption) (*UserConversationResponse, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetServiceConversations", in)
	out := new(UserConversationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetUserUnreadMessage(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*UserUnreadMessage, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetUserUnreadMessage", in)
	out := new(UserUnreadMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) ClearUserUnreadMessage(ctx context.Context, in *ClearUserUnreadMessageReq, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.ClearUserUnreadMessage", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) CreateTweet(ctx context.Context, in *Tweet, opts ...client.CallOption) (*MsgsKeyword, error) {
	req := c.c.NewRequest(c.name, "MessagesService.CreateTweet", in)
	out := new(MsgsKeyword)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) UpdateTweet(ctx context.Context, in *Tweet, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.UpdateTweet", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) RemoveTweet(ctx context.Context, in *Tweet, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.RemoveTweet", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetTweet(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*Tweet, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetTweet", in)
	out := new(Tweet)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetTweetByUserID(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetTweetByUserID", in)
	out := new(TweetsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetNewestTweet(ctx context.Context, in *NewestTweetReq, opts ...client.CallOption) (*TweetsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetNewestTweet", in)
	out := new(TweetsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetUserTweet(ctx context.Context, in *UserTweetRequest, opts ...client.CallOption) (*TweetsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetUserTweet", in)
	out := new(TweetsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) LikeTweet(ctx context.Context, in *TweetReq, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.LikeTweet", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) UnlikeTweet(ctx context.Context, in *TweetReq, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.UnlikeTweet", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetUserLikedRecord(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*UserLikeRecordsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetUserLikedRecord", in)
	out := new(UserLikeRecordsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetUserLikesRecord(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*UserLikeRecordsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetUserLikesRecord", in)
	out := new(UserLikeRecordsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) CreateFollowers(ctx context.Context, in *Followers, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.CreateFollowers", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) RemoveFollowers(ctx context.Context, in *Followers, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.RemoveFollowers", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetFollowersByUserID(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*FollowerssRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetFollowersByUserID", in)
	out := new(FollowerssRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) CreateFollowing(ctx context.Context, in *Following, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.CreateFollowing", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) RemoveFollowing(ctx context.Context, in *Following, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.RemoveFollowing", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetFollowingByUserID(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*FollowingsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetFollowingByUserID", in)
	out := new(FollowingsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetTweets(ctx context.Context, in *TweetRequest, opts ...client.CallOption) (*TweetResponse, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetTweets", in)
	out := new(TweetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) ShareTweet(ctx context.Context, in *TweetReq, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.ShareTweet", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) ViewTweet(ctx context.Context, in *TweetReq, opts ...client.CallOption) (*MsgsRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.ViewTweet", in)
	out := new(MsgsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetTweetLikeRecord(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetLikeRecordRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetTweetLikeRecord", in)
	out := new(TweetLikeRecordRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetTweetShareRecord(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetShareRecordRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetTweetShareRecord", in)
	out := new(TweetShareRecordRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetTweetViewRecord(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetViewRecordRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetTweetViewRecord", in)
	out := new(TweetViewRecordRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetTweetUserActionState(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetUserActionStateRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetTweetUserActionState", in)
	out := new(TweetUserActionStateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetTweetLikers(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetUserRefRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetTweetLikers", in)
	out := new(TweetUserRefRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetTweetSharers(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetUserRefRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetTweetSharers", in)
	out := new(TweetUserRefRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetTweetViewers(ctx context.Context, in *MsgsKeyword, opts ...client.CallOption) (*TweetUserRefRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetTweetViewers", in)
	out := new(TweetUserRefRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetUserRecordByUserId(ctx context.Context, in *UserRecordReq, opts ...client.CallOption) (*UserRecordRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetUserRecordByUserId", in)
	out := new(UserRecordRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) GetUserRecordByTweetUserId(ctx context.Context, in *UserRecordReq, opts ...client.CallOption) (*UserRecordRes, error) {
	req := c.c.NewRequest(c.name, "MessagesService.GetUserRecordByTweetUserId", in)
	out := new(UserRecordRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessagesService service

type MessagesServiceHandler interface {
	CreateNotification(context.Context, *Notification, *MsgsKeyword) error
	UpdateNotification(context.Context, *Notification, *NotificationsRes) error
	DeleteNotification(context.Context, *DeleteNotificationRequest, *NotificationsRes) error
	GetNotification(context.Context, *MsgsKeyword, *Notification) error
	GetNotifications(context.Context, *MsgsEmptyReq, *NotificationsRes) error
	UpdateUserNotification(context.Context, *UserNotification, *MsgsRes) error
	GetUserNotifications(context.Context, *MsgsKeyword, *UserNotificationsRes) error
	CreateConversation(context.Context, *Conversation, *MsgsKeyword) error
	UpdateConversation(context.Context, *Conversation, *MsgsRes) error
	GetConversation(context.Context, *MsgsKeyword, *Conversation) error
	GetParticipantConversations(context.Context, *ParticipantConversationRequest, *ConversationsResponse) error
	GetUserConversations(context.Context, *UserConversationRequest, *UserConversationResponse) error
	GetServiceConversations(context.Context, *UserConversationRequest, *UserConversationResponse) error
	GetUserUnreadMessage(context.Context, *MsgsKeyword, *UserUnreadMessage) error
	ClearUserUnreadMessage(context.Context, *ClearUserUnreadMessageReq, *MsgsRes) error
	CreateTweet(context.Context, *Tweet, *MsgsKeyword) error
	UpdateTweet(context.Context, *Tweet, *MsgsRes) error
	RemoveTweet(context.Context, *Tweet, *MsgsRes) error
	GetTweet(context.Context, *MsgsKeyword, *Tweet) error
	GetTweetByUserID(context.Context, *MsgsKeyword, *TweetsRes) error
	GetNewestTweet(context.Context, *NewestTweetReq, *TweetsRes) error
	GetUserTweet(context.Context, *UserTweetRequest, *TweetsRes) error
	LikeTweet(context.Context, *TweetReq, *MsgsRes) error
	UnlikeTweet(context.Context, *TweetReq, *MsgsRes) error
	GetUserLikedRecord(context.Context, *MsgsKeyword, *UserLikeRecordsRes) error
	GetUserLikesRecord(context.Context, *MsgsKeyword, *UserLikeRecordsRes) error
	CreateFollowers(context.Context, *Followers, *MsgsRes) error
	RemoveFollowers(context.Context, *Followers, *MsgsRes) error
	GetFollowersByUserID(context.Context, *MsgsKeyword, *FollowerssRes) error
	CreateFollowing(context.Context, *Following, *MsgsRes) error
	RemoveFollowing(context.Context, *Following, *MsgsRes) error
	GetFollowingByUserID(context.Context, *MsgsKeyword, *FollowingsRes) error
	GetTweets(context.Context, *TweetRequest, *TweetResponse) error
	ShareTweet(context.Context, *TweetReq, *MsgsRes) error
	ViewTweet(context.Context, *TweetReq, *MsgsRes) error
	GetTweetLikeRecord(context.Context, *MsgsKeyword, *TweetLikeRecordRes) error
	GetTweetShareRecord(context.Context, *MsgsKeyword, *TweetShareRecordRes) error
	GetTweetViewRecord(context.Context, *MsgsKeyword, *TweetViewRecordRes) error
	GetTweetUserActionState(context.Context, *MsgsKeyword, *TweetUserActionStateRes) error
	GetTweetLikers(context.Context, *MsgsKeyword, *TweetUserRefRes) error
	GetTweetSharers(context.Context, *MsgsKeyword, *TweetUserRefRes) error
	GetTweetViewers(context.Context, *MsgsKeyword, *TweetUserRefRes) error
	GetUserRecordByUserId(context.Context, *UserRecordReq, *UserRecordRes) error
	GetUserRecordByTweetUserId(context.Context, *UserRecordReq, *UserRecordRes) error
}

func RegisterMessagesServiceHandler(s server.Server, hdlr MessagesServiceHandler, opts ...server.HandlerOption) error {
	type messagesService interface {
		CreateNotification(ctx context.Context, in *Notification, out *MsgsKeyword) error
		UpdateNotification(ctx context.Context, in *Notification, out *NotificationsRes) error
		DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, out *NotificationsRes) error
		GetNotification(ctx context.Context, in *MsgsKeyword, out *Notification) error
		GetNotifications(ctx context.Context, in *MsgsEmptyReq, out *NotificationsRes) error
		UpdateUserNotification(ctx context.Context, in *UserNotification, out *MsgsRes) error
		GetUserNotifications(ctx context.Context, in *MsgsKeyword, out *UserNotificationsRes) error
		CreateConversation(ctx context.Context, in *Conversation, out *MsgsKeyword) error
		UpdateConversation(ctx context.Context, in *Conversation, out *MsgsRes) error
		GetConversation(ctx context.Context, in *MsgsKeyword, out *Conversation) error
		GetParticipantConversations(ctx context.Context, in *ParticipantConversationRequest, out *ConversationsResponse) error
		GetUserConversations(ctx context.Context, in *UserConversationRequest, out *UserConversationResponse) error
		GetServiceConversations(ctx context.Context, in *UserConversationRequest, out *UserConversationResponse) error
		GetUserUnreadMessage(ctx context.Context, in *MsgsKeyword, out *UserUnreadMessage) error
		ClearUserUnreadMessage(ctx context.Context, in *ClearUserUnreadMessageReq, out *MsgsRes) error
		CreateTweet(ctx context.Context, in *Tweet, out *MsgsKeyword) error
		UpdateTweet(ctx context.Context, in *Tweet, out *MsgsRes) error
		RemoveTweet(ctx context.Context, in *Tweet, out *MsgsRes) error
		GetTweet(ctx context.Context, in *MsgsKeyword, out *Tweet) error
		GetTweetByUserID(ctx context.Context, in *MsgsKeyword, out *TweetsRes) error
		GetNewestTweet(ctx context.Context, in *NewestTweetReq, out *TweetsRes) error
		GetUserTweet(ctx context.Context, in *UserTweetRequest, out *TweetsRes) error
		LikeTweet(ctx context.Context, in *TweetReq, out *MsgsRes) error
		UnlikeTweet(ctx context.Context, in *TweetReq, out *MsgsRes) error
		GetUserLikedRecord(ctx context.Context, in *MsgsKeyword, out *UserLikeRecordsRes) error
		GetUserLikesRecord(ctx context.Context, in *MsgsKeyword, out *UserLikeRecordsRes) error
		CreateFollowers(ctx context.Context, in *Followers, out *MsgsRes) error
		RemoveFollowers(ctx context.Context, in *Followers, out *MsgsRes) error
		GetFollowersByUserID(ctx context.Context, in *MsgsKeyword, out *FollowerssRes) error
		CreateFollowing(ctx context.Context, in *Following, out *MsgsRes) error
		RemoveFollowing(ctx context.Context, in *Following, out *MsgsRes) error
		GetFollowingByUserID(ctx context.Context, in *MsgsKeyword, out *FollowingsRes) error
		GetTweets(ctx context.Context, in *TweetRequest, out *TweetResponse) error
		ShareTweet(ctx context.Context, in *TweetReq, out *MsgsRes) error
		ViewTweet(ctx context.Context, in *TweetReq, out *MsgsRes) error
		GetTweetLikeRecord(ctx context.Context, in *MsgsKeyword, out *TweetLikeRecordRes) error
		GetTweetShareRecord(ctx context.Context, in *MsgsKeyword, out *TweetShareRecordRes) error
		GetTweetViewRecord(ctx context.Context, in *MsgsKeyword, out *TweetViewRecordRes) error
		GetTweetUserActionState(ctx context.Context, in *MsgsKeyword, out *TweetUserActionStateRes) error
		GetTweetLikers(ctx context.Context, in *MsgsKeyword, out *TweetUserRefRes) error
		GetTweetSharers(ctx context.Context, in *MsgsKeyword, out *TweetUserRefRes) error
		GetTweetViewers(ctx context.Context, in *MsgsKeyword, out *TweetUserRefRes) error
		GetUserRecordByUserId(ctx context.Context, in *UserRecordReq, out *UserRecordRes) error
		GetUserRecordByTweetUserId(ctx context.Context, in *UserRecordReq, out *UserRecordRes) error
	}
	type MessagesService struct {
		messagesService
	}
	h := &messagesServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MessagesService{h}, opts...))
}

type messagesServiceHandler struct {
	MessagesServiceHandler
}

func (h *messagesServiceHandler) CreateNotification(ctx context.Context, in *Notification, out *MsgsKeyword) error {
	return h.MessagesServiceHandler.CreateNotification(ctx, in, out)
}

func (h *messagesServiceHandler) UpdateNotification(ctx context.Context, in *Notification, out *NotificationsRes) error {
	return h.MessagesServiceHandler.UpdateNotification(ctx, in, out)
}

func (h *messagesServiceHandler) DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, out *NotificationsRes) error {
	return h.MessagesServiceHandler.DeleteNotification(ctx, in, out)
}

func (h *messagesServiceHandler) GetNotification(ctx context.Context, in *MsgsKeyword, out *Notification) error {
	return h.MessagesServiceHandler.GetNotification(ctx, in, out)
}

func (h *messagesServiceHandler) GetNotifications(ctx context.Context, in *MsgsEmptyReq, out *NotificationsRes) error {
	return h.MessagesServiceHandler.GetNotifications(ctx, in, out)
}

func (h *messagesServiceHandler) UpdateUserNotification(ctx context.Context, in *UserNotification, out *MsgsRes) error {
	return h.MessagesServiceHandler.UpdateUserNotification(ctx, in, out)
}

func (h *messagesServiceHandler) GetUserNotifications(ctx context.Context, in *MsgsKeyword, out *UserNotificationsRes) error {
	return h.MessagesServiceHandler.GetUserNotifications(ctx, in, out)
}

func (h *messagesServiceHandler) CreateConversation(ctx context.Context, in *Conversation, out *MsgsKeyword) error {
	return h.MessagesServiceHandler.CreateConversation(ctx, in, out)
}

func (h *messagesServiceHandler) UpdateConversation(ctx context.Context, in *Conversation, out *MsgsRes) error {
	return h.MessagesServiceHandler.UpdateConversation(ctx, in, out)
}

func (h *messagesServiceHandler) GetConversation(ctx context.Context, in *MsgsKeyword, out *Conversation) error {
	return h.MessagesServiceHandler.GetConversation(ctx, in, out)
}

func (h *messagesServiceHandler) GetParticipantConversations(ctx context.Context, in *ParticipantConversationRequest, out *ConversationsResponse) error {
	return h.MessagesServiceHandler.GetParticipantConversations(ctx, in, out)
}

func (h *messagesServiceHandler) GetUserConversations(ctx context.Context, in *UserConversationRequest, out *UserConversationResponse) error {
	return h.MessagesServiceHandler.GetUserConversations(ctx, in, out)
}

func (h *messagesServiceHandler) GetServiceConversations(ctx context.Context, in *UserConversationRequest, out *UserConversationResponse) error {
	return h.MessagesServiceHandler.GetServiceConversations(ctx, in, out)
}

func (h *messagesServiceHandler) GetUserUnreadMessage(ctx context.Context, in *MsgsKeyword, out *UserUnreadMessage) error {
	return h.MessagesServiceHandler.GetUserUnreadMessage(ctx, in, out)
}

func (h *messagesServiceHandler) ClearUserUnreadMessage(ctx context.Context, in *ClearUserUnreadMessageReq, out *MsgsRes) error {
	return h.MessagesServiceHandler.ClearUserUnreadMessage(ctx, in, out)
}

func (h *messagesServiceHandler) CreateTweet(ctx context.Context, in *Tweet, out *MsgsKeyword) error {
	return h.MessagesServiceHandler.CreateTweet(ctx, in, out)
}

func (h *messagesServiceHandler) UpdateTweet(ctx context.Context, in *Tweet, out *MsgsRes) error {
	return h.MessagesServiceHandler.UpdateTweet(ctx, in, out)
}

func (h *messagesServiceHandler) RemoveTweet(ctx context.Context, in *Tweet, out *MsgsRes) error {
	return h.MessagesServiceHandler.RemoveTweet(ctx, in, out)
}

func (h *messagesServiceHandler) GetTweet(ctx context.Context, in *MsgsKeyword, out *Tweet) error {
	return h.MessagesServiceHandler.GetTweet(ctx, in, out)
}

func (h *messagesServiceHandler) GetTweetByUserID(ctx context.Context, in *MsgsKeyword, out *TweetsRes) error {
	return h.MessagesServiceHandler.GetTweetByUserID(ctx, in, out)
}

func (h *messagesServiceHandler) GetNewestTweet(ctx context.Context, in *NewestTweetReq, out *TweetsRes) error {
	return h.MessagesServiceHandler.GetNewestTweet(ctx, in, out)
}

func (h *messagesServiceHandler) GetUserTweet(ctx context.Context, in *UserTweetRequest, out *TweetsRes) error {
	return h.MessagesServiceHandler.GetUserTweet(ctx, in, out)
}

func (h *messagesServiceHandler) LikeTweet(ctx context.Context, in *TweetReq, out *MsgsRes) error {
	return h.MessagesServiceHandler.LikeTweet(ctx, in, out)
}

func (h *messagesServiceHandler) UnlikeTweet(ctx context.Context, in *TweetReq, out *MsgsRes) error {
	return h.MessagesServiceHandler.UnlikeTweet(ctx, in, out)
}

func (h *messagesServiceHandler) GetUserLikedRecord(ctx context.Context, in *MsgsKeyword, out *UserLikeRecordsRes) error {
	return h.MessagesServiceHandler.GetUserLikedRecord(ctx, in, out)
}

func (h *messagesServiceHandler) GetUserLikesRecord(ctx context.Context, in *MsgsKeyword, out *UserLikeRecordsRes) error {
	return h.MessagesServiceHandler.GetUserLikesRecord(ctx, in, out)
}

func (h *messagesServiceHandler) CreateFollowers(ctx context.Context, in *Followers, out *MsgsRes) error {
	return h.MessagesServiceHandler.CreateFollowers(ctx, in, out)
}

func (h *messagesServiceHandler) RemoveFollowers(ctx context.Context, in *Followers, out *MsgsRes) error {
	return h.MessagesServiceHandler.RemoveFollowers(ctx, in, out)
}

func (h *messagesServiceHandler) GetFollowersByUserID(ctx context.Context, in *MsgsKeyword, out *FollowerssRes) error {
	return h.MessagesServiceHandler.GetFollowersByUserID(ctx, in, out)
}

func (h *messagesServiceHandler) CreateFollowing(ctx context.Context, in *Following, out *MsgsRes) error {
	return h.MessagesServiceHandler.CreateFollowing(ctx, in, out)
}

func (h *messagesServiceHandler) RemoveFollowing(ctx context.Context, in *Following, out *MsgsRes) error {
	return h.MessagesServiceHandler.RemoveFollowing(ctx, in, out)
}

func (h *messagesServiceHandler) GetFollowingByUserID(ctx context.Context, in *MsgsKeyword, out *FollowingsRes) error {
	return h.MessagesServiceHandler.GetFollowingByUserID(ctx, in, out)
}

func (h *messagesServiceHandler) GetTweets(ctx context.Context, in *TweetRequest, out *TweetResponse) error {
	return h.MessagesServiceHandler.GetTweets(ctx, in, out)
}

func (h *messagesServiceHandler) ShareTweet(ctx context.Context, in *TweetReq, out *MsgsRes) error {
	return h.MessagesServiceHandler.ShareTweet(ctx, in, out)
}

func (h *messagesServiceHandler) ViewTweet(ctx context.Context, in *TweetReq, out *MsgsRes) error {
	return h.MessagesServiceHandler.ViewTweet(ctx, in, out)
}

func (h *messagesServiceHandler) GetTweetLikeRecord(ctx context.Context, in *MsgsKeyword, out *TweetLikeRecordRes) error {
	return h.MessagesServiceHandler.GetTweetLikeRecord(ctx, in, out)
}

func (h *messagesServiceHandler) GetTweetShareRecord(ctx context.Context, in *MsgsKeyword, out *TweetShareRecordRes) error {
	return h.MessagesServiceHandler.GetTweetShareRecord(ctx, in, out)
}

func (h *messagesServiceHandler) GetTweetViewRecord(ctx context.Context, in *MsgsKeyword, out *TweetViewRecordRes) error {
	return h.MessagesServiceHandler.GetTweetViewRecord(ctx, in, out)
}

func (h *messagesServiceHandler) GetTweetUserActionState(ctx context.Context, in *MsgsKeyword, out *TweetUserActionStateRes) error {
	return h.MessagesServiceHandler.GetTweetUserActionState(ctx, in, out)
}

func (h *messagesServiceHandler) GetTweetLikers(ctx context.Context, in *MsgsKeyword, out *TweetUserRefRes) error {
	return h.MessagesServiceHandler.GetTweetLikers(ctx, in, out)
}

func (h *messagesServiceHandler) GetTweetSharers(ctx context.Context, in *MsgsKeyword, out *TweetUserRefRes) error {
	return h.MessagesServiceHandler.GetTweetSharers(ctx, in, out)
}

func (h *messagesServiceHandler) GetTweetViewers(ctx context.Context, in *MsgsKeyword, out *TweetUserRefRes) error {
	return h.MessagesServiceHandler.GetTweetViewers(ctx, in, out)
}

func (h *messagesServiceHandler) GetUserRecordByUserId(ctx context.Context, in *UserRecordReq, out *UserRecordRes) error {
	return h.MessagesServiceHandler.GetUserRecordByUserId(ctx, in, out)
}

func (h *messagesServiceHandler) GetUserRecordByTweetUserId(ctx context.Context, in *UserRecordReq, out *UserRecordRes) error {
	return h.MessagesServiceHandler.GetUserRecordByTweetUserId(ctx, in, out)
}
